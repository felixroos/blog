{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-blog/src/components/seo.js","webpack:///./src/pages/404.tsx"],"names":["SEO","description","lang","meta","keywords","title","imageSource","imageAlt","site","useStaticQuery","metaDescription","siteMetadata","image","siteUrl","imageAltText","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","NotFoundPage","style","width","height","display","justifyContent","alignItems","to","className"],"mappings":"4FAAA,2DAYA,SAASA,EAAT,GAQI,IAPFC,EAOC,EAPDA,YACAC,EAMC,EANDA,KACAC,EAKC,EALDA,KAKC,IAJDC,gBAIC,MAJU,GAIV,EAHDC,EAGC,EAHDA,MACAC,EAEC,EAFDA,YACAC,EACC,EADDA,SAEQC,EAASC,YAAe,aAAxBD,KAeFE,EAAkBT,GAAeO,EAAKG,aAAaV,YACnDW,EAAQN,EAAW,GAClBE,EAAKG,aAAaE,QAAUP,EAC/B,KACEQ,EAAeP,GAAYG,EAEjC,OACE,YAAC,IAAD,CACEK,eAAgB,CACdb,QAEFG,MAAOA,EACPW,cAAa,QAAUR,EAAKG,aAAaN,MACzCF,KAAM,CACJ,CACEc,KAAK,cACLC,QAASR,GAEX,CACEO,KAAK,WACLC,QAASN,GAEX,CACEK,KAAK,eACLC,QAASJ,GAEX,CACEK,SAAS,WACTD,QAASb,GAEX,CACEc,SAAS,iBACTD,QAASR,GAEX,CACES,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,gBACLC,QAASN,GAEX,CACEK,KAAK,oBACLC,QAASJ,GAEX,CACEG,KAAK,eACLC,QAAQ,uBAEV,CACED,KAAK,kBACLC,QAASV,EAAKG,aAAaS,QAE7B,CACEH,KAAK,gBACLC,QAASb,GAEX,CACEY,KAAK,sBACLC,QAASR,IAGVW,OACCjB,EAASkB,OAAS,EACd,CACEL,KAAK,WACLC,QAASd,EAASmB,KAAT,OAEX,IAELF,OAAOlB,KAKhBH,EAAIwB,aAAe,CACjBtB,KAAK,KACLC,KAAM,GACNC,SAAU,IAYGJ,O,oCC/Hf,oEA2BeyB,UAxBM,kBACnB,8BACE,YAAC,IAAD,CAAKpB,MAAM,mBACX,mBACEqB,MAAO,CACLC,MAAO,QACPC,OAAQ,QACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,WAGd,uBACE,mCACA,gFAC+D,IAC7D,YAAC,IAAD,CAAMC,GAAG,IAAIC,UAAU,cAAvB","file":"component---src-pages-404-tsx-c1397677adbe5fb05f2c.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({\n  description,\n  lang,\n  meta,\n  keywords = [],\n  title,\n  imageSource,\n  imageAlt,\n}) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            siteUrl\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const image = imageSource\n    ? `${site.siteMetadata.siteUrl}${imageSource}`\n    : null\n  const imageAltText = imageAlt || metaDescription\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          name: `og:image`,\n          content: image,\n        },\n        {\n          name: `og:image:alt`,\n          content: imageAltText,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:image`,\n          content: image,\n        },\n        {\n          name: `twitter:image:alt`,\n          content: imageAltText,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary_large_image`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n  imageSource: PropTypes.string,\n}\n\nexport default SEO\n","import { Link } from \"gatsby\"\nimport React from \"react\"\nimport SEO from \"gatsby-theme-blog/src/components/seo\"\nconst NotFoundPage = () => (\n  <>\n    <SEO title=\"404: Not found\" />\n    <div\n      style={{\n        width: `100vw`,\n        height: `100vh`,\n        display: `flex`,\n        justifyContent: `center`,\n        alignItems: `center`,\n      }}\n    >\n      <div>\n        <h1>NOT FOUND</h1>\n        <p>\n          {`You just hit a route that doesn't exist... Please visit `}{\" \"}\n          <Link to=\"/\" className=\"link-style\">\n            Homepage\n          </Link>\n        </p>\n      </div>\n    </div>\n  </>\n)\nexport default NotFoundPage"],"sourceRoot":""}