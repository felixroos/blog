{"version":3,"sources":["webpack:///./node_modules/gatsby-plugin-mdx/index.js","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js","webpack:///./node_modules/gatsby-theme-blog/src/components/post-title.js","webpack:///./node_modules/gatsby-theme-blog/src/components/post-date.js","webpack:///./node_modules/gatsby-theme-blog/src/components/post-footer.js","webpack:///./node_modules/gatsby-theme-blog/src/components/post-hero.js","webpack:///./node_modules/gatsby-theme-blog/src/components/post.js","webpack:///./node_modules/gatsby-theme-blog-core/src/templates/post-query.js","webpack:///./node_modules/gatsby-theme-blog/src/gatsby-theme-blog-core/components/post.js"],"names":["MDXRenderer","require","module","React","mdx","useMDXScope","scope","children","props","mdxScope","End","fullScope","keys","Object","values","key","fn","PostTitle","h1","PostDate","p","sx","fontSize","mt","mb","Footer","previous","next","css","pt","hr","as","flexWrap","justifyContent","listStyle","padding","a","Link","to","slug","rel","title","Hero","post","image","childImageSharp","fluid","alt","imageAlt","excerpt","Post","data","site","siteMetadata","location","description","imageSource","socialImage","src","keywords","date","body","PostPage","blogPost"],"mappings":"iFAMA,IAAMA,EAAcC,EAApB,QAEAC,UAAiB,CACfF,YAAaA,I,woBCTf,IAAMG,EAAQF,EAAd,QACQG,EAAQH,EAAQ,QAAhBG,IACAC,EAAgBJ,EAAQ,QAAxBI,YAERH,UAAiB,SAAqB,GAIlC,IAHFI,EAGC,EAHDA,MACAC,EAEC,EAFDA,SACGC,EACF,0BACKC,EAAWJ,EADhB,GAIKK,EAAMP,EAAA,SAAc,WACxB,MACE,OAAO,KAGT,IAAMQ,EAAS,GAGbR,MAHa,EAIbC,OAJF,GAQMQ,EAAOC,YAAb,GACMC,EAASF,EAAA,KAAS,SAAAG,GAAG,OAAIJ,EAAJ,MAG3B,OAFQ,mCAAR,KAEOK,2BAAP,OACC,CAACT,EAlBJ,IAoBA,OAAOJ,uBAAP,M,0IC3Bac,EAFG,SAAAT,GAAK,OAAI,YAAC,IAAOU,GAAOV,I,YCW3BW,EAXE,SAAAX,GAAK,OACpB,YAAC,IAAOY,EAAR,aACEC,GAAI,CACFC,SAAU,EACVC,IAAK,EACLC,GAAI,IAEFhB,K,wBCkCOiB,EAtCA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,KAAb,OACb,sBACEC,IAAKA,YAAI,CACPL,GAAI,EACJM,GAAI,KAGN,YAAC,IAAOC,GAAR,MACA,YAAC,IAAD,OACEJ,GAAYC,IACZ,YAAC,IAAD,CACEI,GAAG,KACHH,IAAKA,YAAI,CACPI,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,KAGX,sBACGT,GACC,YAAC,IAAOU,EAAR,CAAUL,GAAIM,IAAMC,GAAIZ,EAASa,KAAMC,IAAI,QAA3C,KACKd,EAASe,QAIlB,sBACGd,GACC,YAAC,IAAOS,EAAR,CAAUL,GAAIM,IAAMC,GAAIX,EAAKY,KAAMC,IAAI,QACpCb,EAAKc,MADR,U,qBCpBGC,EAXF,SAAC,GAAD,MAAGC,EAAH,EAAGA,KAAH,OACX,+BACGA,SAAA,UAAAA,EAAMC,aAAN,eAAaC,kBACZ,YAAC,IAAD,CACEC,MAAOH,EAAKC,MAAMC,gBAAgBC,MAClCC,IAAKJ,EAAKK,SAAWL,EAAKK,SAAWL,EAAKM,YCoCnCC,EAjCF,SAAC,GAAD,gBACXC,KACER,EAFS,EAETA,KAEkBF,EAJT,EAGTW,KACEC,aAAgBZ,MAGpBa,EAPW,EAOXA,SACA5B,EARW,EAQXA,SACAC,EATW,EASXA,KATW,OAWX,YAAC,IAAD,CAAQ2B,SAAUA,EAAUb,MAAOA,GACjC,YAAC,IAAD,CACEA,MAAOE,EAAKF,MACZc,YAAaZ,EAAKM,QAClBO,YACEb,EAAKc,YAAL,UACId,EAAKc,mBADT,iBACI,EAAkBZ,uBADtB,aACI,EAAmCC,MAAMY,IAD7C,UAEIf,EAAKC,aAFT,iBAEI,EAAYC,uBAFhB,aAEI,EAA6BC,MAAMY,IAEzCC,SAAUhB,EAAKgB,SACfX,SAAUL,EAAKK,WAEjB,wBACE,YAAC,EAAD,CAAUL,KAAMA,IAChB,YAAC,EAAD,KAAYA,EAAKF,OACjB,YAAC,EAAD,KAAWE,EAAKiB,MAChB,YAAC,cAAD,KAAcjB,EAAKkB,OAErB,YAAC,EAAD,CAAkBnC,WAAUC,W,ykBCrCjBmC,UCAA,YAAyB,IAAtBR,EAAqB,EAArBA,SAAUH,EAAW,EAAXA,KAClBY,EAA6BZ,EAA7BY,SAAUrC,EAAmByB,EAAnBzB,SAAUC,EAASwB,EAATxB,KAE5B,OACE,YAAC,EAAD,CACEwB,KAAI,OAAOA,GAAP,IAAaR,KAAMoB,IACvBT,SAAUA,EACV5B,SAAUA,EACVC,KAAMA","file":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js-dc050bc12bcb61566813.js","sourcesContent":["/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","const React = require(`react`)\nconst { mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  children,\n  ...props\n}) {\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, {...props })\n}\n","import React from \"react\"\nimport { Styled } from \"theme-ui\"\n\nconst PostTitle = props => <Styled.h1 {...props} />\n\nexport default PostTitle\n","/** @jsx jsx */\nimport { Styled, jsx } from \"theme-ui\"\n\nconst PostDate = props => (\n  <Styled.p\n    sx={{\n      fontSize: 1,\n      mt: -3,\n      mb: 3,\n    }}\n    {...props}\n  />\n)\n\nexport default PostDate\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { css, Styled, Flex } from \"theme-ui\"\n\nimport Bio from \"../components/bio\"\n\nconst Footer = ({ previous, next }) => (\n  <footer\n    css={css({\n      mt: 4,\n      pt: 3,\n    })}\n  >\n    <Styled.hr />\n    <Bio />\n    {(previous || next) && (\n      <Flex\n        as=\"ul\"\n        css={css({\n          flexWrap: `wrap`,\n          justifyContent: `space-between`,\n          listStyle: `none`,\n          padding: 0,\n        })}\n      >\n        <li>\n          {previous && (\n            <Styled.a as={Link} to={previous.slug} rel=\"prev\">\n              ← {previous.title}\n            </Styled.a>\n          )}\n        </li>\n        <li>\n          {next && (\n            <Styled.a as={Link} to={next.slug} rel=\"next\">\n              {next.title} →\n            </Styled.a>\n          )}\n        </li>\n      </Flex>\n    )}\n  </footer>\n)\n\nexport default Footer\n","import React from \"react\"\nimport Image from \"gatsby-image\"\n\nconst Hero = ({ post }) => (\n  <>\n    {post?.image?.childImageSharp && (\n      <Image\n        fluid={post.image.childImageSharp.fluid}\n        alt={post.imageAlt ? post.imageAlt : post.excerpt}\n      />\n    )}\n  </>\n)\n\nexport default Hero\n","import React from \"react\"\n\nimport { MDXRenderer } from \"gatsby-plugin-mdx\"\n\nimport Layout from \"./layout\"\nimport SEO from \"./seo\"\nimport PostTitle from \"./post-title\"\nimport PostDate from \"./post-date\"\nimport PostFooter from \"./post-footer\"\nimport PostHero from \"./post-hero\"\n\nconst Post = ({\n  data: {\n    post,\n    site: {\n      siteMetadata: { title },\n    },\n  },\n  location,\n  previous,\n  next,\n}) => (\n  <Layout location={location} title={title}>\n    <SEO\n      title={post.title}\n      description={post.excerpt}\n      imageSource={\n        post.socialImage\n          ? post.socialImage?.childImageSharp?.fluid.src\n          : post.image?.childImageSharp?.fluid.src\n      }\n      keywords={post.keywords}\n      imageAlt={post.imageAlt}\n    />\n    <main>\n      <PostHero post={post} />\n      <PostTitle>{post.title}</PostTitle>\n      <PostDate>{post.date}</PostDate>\n      <MDXRenderer>{post.body}</MDXRenderer>\n    </main>\n    <PostFooter {...{ previous, next }} />\n  </Layout>\n)\n\nexport default Post\n","import { graphql } from \"gatsby\"\nimport PostPage from \"../components/post\"\n\nexport default PostPage\n\nexport const query = graphql`\n  query PostPageQuery($id: String!, $previousId: String, $nextId: String) {\n    site {\n      siteMetadata {\n        title\n        social {\n          name\n          url\n        }\n      }\n    }\n    blogPost(id: { eq: $id }) {\n      id\n      excerpt\n      body\n      slug\n      title\n      tags\n      keywords\n      date(formatString: \"MMMM DD, YYYY\")\n      image {\n        childImageSharp {\n          fluid {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n      imageAlt\n      socialImage {\n        childImageSharp {\n          fluid {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n    previous: blogPost(id: { eq: $previousId }) {\n      id\n      excerpt\n      slug\n      title\n      date(formatString: \"MMMM DD, YYYY\")\n    }\n    next: blogPost(id: { eq: $nextId }) {\n      id\n      excerpt\n      slug\n      title\n      date(formatString: \"MMMM DD, YYYY\")\n    }\n  }\n`\n","import React from \"react\"\nimport Post from \"../../components/post\"\n\nexport default ({ location, data }) => {\n  const { blogPost, previous, next } = data\n\n  return (\n    <Post\n      data={{ ...data, post: blogPost }}\n      location={location}\n      previous={previous}\n      next={next}\n    />\n  )\n}\n"],"sourceRoot":""}