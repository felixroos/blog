{"version":3,"sources":["webpack:///./content/drafts/voicing/Step.ts","webpack:///./content/drafts/voicing/Degree.ts","webpack:///./content/drafts/voicing/Voicing.ts","webpack:///./src/pages/voicings/index.tsx"],"names":["Step","from","step","fromInterval","interval","min","steps","toInterval","Object","keys","find","i","includes","Degree","fromStep","match","length","parseInt","inChord","degree","chord","Harmony","getTonalChord","intervals","Chord","get","tokens","tokenize","Note","transpose","simplify","reduceInterval","Math","abs","degreeOrStep","intervalsOrSteps","map","isInterval","minInterval","console","error","Voicing","getCombinations","options","root","getBassNote","bottomDegrees","bottomPitches","concat","degrees","topDegrees","Error","topPitches","p","absolute","getPitches","voicingDefaultOptions","requiredPitches","optionalPitches","topNotes","voices","ignoreLowerIntervalLimits","bottomDistances","topDistances","preferTopDistances","range","defaultDistances","pitches","bottomChromas","n","chroma","topChromas","getMinMaxNotes","minNotes","maxNotes","allowedNotes","Range","chromatic","filter","byPitches","Permutation","search","path","solutions","bottomDistance","topDistance","distanceRange","note","noteMidi","midi","lastMidi","lowIntervalLimits","solution","reduce","hasAll","pitch","valid","chromas","index","distance","d","Array","isArray","allocations","notes","sort","a","b","v","indexOf","isInRange","getRequiredPitches","getRequiredNotes","requiredSteps","slice","max","push","required","req","analyze","voicing","pc","Interval","semitones","minDistance","maxDistance","spread","semitoneSpread","avgSpread","floor","averageDistance","avg","leapSemitones","leap","fromSemitones","topMidi","topDegree","bottomDegree","bottomMidi","midiMedian","sum","rangeBorders","maxVoices","forceDirection","forceBestPick","minBottomDistance","minTopDistance","noTopDrop","noTopAdd","noBottomDrop","noBottomAdd","idleChance","logIdle","logging","1","2","3","4","5","6","7","8","9","10","11","PolySynth","Tone","Synth","poly","window","volume","toMaster","Voicings","useState","wave","sortBy","tonic","symbol","arpeggioInterval","state","setState","parseInts","divider","split","_d","trim","voicings","flatMidi","apply","fromMidi","Layout","sidebar","value","onChange","e","target","title","type","href","main","DynamicTable","heading","cols","property","resolve","display","onMouseDown","stopPropagation","preventDefault","triggerAttack","onMouseUp","releaseAll","onMouseLeave","Keyboard","mouseControl","keyControl","scaleX","scaleY","colorize","color","join","rows"],"mappings":"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","file":"component---src-pages-voicings-index-tsx-8475084f688f2a4bfe48.js","sourcesContent":["export class Step {\n  static from(step: string | number) {\n    if (typeof step === 'number' && step < 0) {\n      step = 'b' + (step * -1);\n    }\n    return step + ''; // to string\n  }\n  static fromInterval(interval, min = false) {\n    const step = steps[interval] || [];\n    if (min) {\n      return step[1] || step[0] || 0;\n    }\n    return step[0] || 0;\n  }\n  /** Returns interval from step */\n  static toInterval(step: string | number) {\n    step = Step.from(step);\n    const interval = Object.keys(steps)\n      .find(i => steps[i].includes(step));\n    if (!interval) {\n      // console.warn(`step ${step} has no defined inteval`);\n    }\n    return interval;\n  }\n}\n\nexport const steps = {\n  '1P': ['1', '8'],\n  '2m': ['b9', 'b2'],\n  '2M': ['9', '2',],\n  '2A': ['#9', '#2'],\n  '3m': ['b3'],\n  '3M': ['3'],\n  '4P': ['11', '4'],\n  '4A': ['#11', '#4'],\n  '5d': ['b5'],\n  '5P': ['5'],\n  '5A': ['#5'],\n  '6m': ['b13', 'b6'],\n  '6M': ['13', '6'],\n  '7m': ['b7'],\n  '7M': ['7', '^7', 'maj7']\n};","import { Harmony } from './Harmony';\nimport { steps, Step } from './Step';\nimport { Chord, Note } from '@tonaljs/tonal';\n\nexport class Degree {\n  /** Returns degree from step */\n  static fromStep(step: string) {\n    step = Step.from(step);\n    const match = step.match(/([1-9])+/);\n    if (!match || !match.length) {\n      return 0;\n    }\n    return parseInt(match[0], 10);\n  }\n  static inChord(degree, chord) {\n    chord = Harmony.getTonalChord(chord);\n    const intervals = Chord.get(chord).intervals;\n    const tokens = Chord.tokenize(chord);\n    return Note.transpose(tokens[0], Degree.find(degree, intervals));\n  }\n  static fromInterval(interval = '-1', simplify = false) {\n    const fixed = Harmony.reduceInterval(interval + '', simplify) || '';\n    const match = fixed.match(/[-]?([1-9])+/);\n    if (!match) {\n      return 0;\n    }\n    return Math.abs(parseInt(match[0], 10));\n  }\n  static find(degreeOrStep: number | string, intervalsOrSteps: string[]) {\n    const intervals = intervalsOrSteps.map(i => Harmony.isInterval(i) ? i : Step.toInterval(i));\n    if (typeof degreeOrStep === 'number') { // is degree\n      const degree = Math.abs(degreeOrStep);\n      return intervals.find(i => {\n        i = Harmony.minInterval(i, 'up');\n        if (!steps[i]) {\n          console.error('interval', i, 'is not valid', intervals);\n        }\n        return !!(steps[i].find(step => Degree.fromStep(step) === degree));\n      });\n    }\n    // is step\n    const step = Step.from(degreeOrStep);\n    return intervals.find(i => i.includes(step) ||\n      i === Step.toInterval(step));\n  }\n}","import { Permutation } from '../../components/combinatorial-search/Permutation';\nimport { Harmony, intervalDirection } from './Harmony';\nimport { Chord, Note, Interval, Range } from '@tonaljs/tonal';\nimport { Degree } from './Degree';\nimport { Step } from './Step';\n\nexport class Voicing {\n  static getCombinations(chord, options: VoicingValidation = {}) {\n    const root = Harmony.getBassNote(chord);\n    if (options.bottomDegrees && options.bottomDegrees.length) {\n      options.bottomPitches = (options.bottomPitches || []).concat(\n        (options.bottomDegrees as number[][])\n          .map(degrees => degrees.map(degree => Degree.inChord(degree, chord)))\n      );\n    }\n    if (options.topDegrees && options.topDegrees.length && typeof options.topDegrees[0] === 'number') {\n      throw new Error('topDegrees should be a double nested array!');\n    }\n    if (options.topDegrees && options.topDegrees.length) {\n      options.topPitches = (options.topPitches || []).concat(\n        (options.topDegrees as number[][])\n          .map(p => p.map(degree => Degree.inChord(degree, chord)))\n      );\n    }\n    return Voicing.absolute({ ...Voicing.getPitches(chord, options), ...options, root });\n  }\n\n  static absolute(options: VoicingValidation = {}) {\n    // interval in semitones => lowest starting note\n    // set default options\n    options = {\n      ...voicingDefaultOptions,\n      ...options\n    };\n    const {\n      requiredPitches,\n      optionalPitches,\n      bottomPitches,\n      topPitches,\n      topNotes,\n      voices,\n      ignoreLowerIntervalLimits,\n      bottomDistances,\n      topDistances,\n      preferTopDistances,\n    } = options;\n    let {\n      range,\n      defaultDistances,\n    } = options;\n    const pitches = [...(requiredPitches || []), ...(optionalPitches || [])];\n    const bottomChromas = (bottomPitches || []).map(p => (p || []).map(n => Note.chroma(n)));\n    const topChromas = (topPitches || []).map((p => (p || []).map(n => Note.chroma(n))));\n    if (!pitches.length) {\n      throw new Error('requiredPitches or optionalPitches must be set!');\n    }\n    let { minNotes, maxNotes } = {\n      ...Voicing.getMinMaxNotes(options),\n      ...options,\n    }\n    if (voices) {\n      // each voice has own range\n      if (maxNotes && maxNotes > voices.length) {\n        throw new Error('maxNotes cannot be greater than the amount of voices');\n      } // but can be smaller..\n      maxNotes = maxNotes || voices.length;\n      range = [voices[0][0], voices[voices.length - 1][1]];\n    }\n    if (!range) {\n      throw new Error('no range given');\n    }\n    if (!minNotes) {\n      minNotes = pitches.length;\n    }\n    if (!maxNotes) {\n      maxNotes = pitches.length;\n    }\n    const allowedNotes = Range.chromatic(range).filter(Harmony.byPitches(pitches));\n    return Permutation.search(\n      (path: string[], solutions) => {\n        if (!path.length) { // no notes picked yet\n          /* if (bottomPitches && bottomPitches.length) {\n            return allowedNotes.filter(n => bottomPitches.includes(Note.pc(n)));\n          } */\n          if (bottomChromas.length) {\n            return allowedNotes.filter(n => bottomChromas[0].includes(Note.chroma(n)));\n          }\n          return allowedNotes;\n        }\n        if (path.length >= maxNotes) { // limit reached\n          return [];\n        }\n        // determine min/max distance for current path\n        let bottomDistance, topDistance;\n        if (bottomDistances && bottomDistances[path.length - 1]) {\n          bottomDistance = bottomDistances[path.length - 1];\n        }\n        if (minNotes === maxNotes && topDistances && topDistances[maxNotes - path.length - 1]) {\n          // maybe could optimize for minNotes!==maxNotes\n          topDistance = topDistances[maxNotes - path.length];\n        }\n        let distanceRange = [].concat(defaultDistances);\n        if (bottomDistance && topDistance) { // clash\n          distanceRange = preferTopDistances ? topDistance : bottomDistance;\n        } else {\n          distanceRange = bottomDistance || topDistance || distanceRange; //  || [minDistance, maxDistance];\n        }\n        return allowedNotes.filter( // only return notes above last pick\n          note => {\n            const noteMidi = Note.midi(note);\n            const lastMidi = Note.midi(path[path.length - 1]);\n            return noteMidi > lastMidi\n              && (!distanceRange[1] || (noteMidi - lastMidi) <= distanceRange[1])\n              && (!distanceRange[0] || (noteMidi - lastMidi) >= distanceRange[0])\n              && (!bottomChromas[path.length] || bottomChromas[path.length].includes(Note.chroma(note)))\n              && (ignoreLowerIntervalLimits || (!lowIntervalLimits[(noteMidi - lastMidi)] || noteMidi >= Note.midi(lowIntervalLimits[(noteMidi - lastMidi)])))\n          }\n        );\n      },\n      (solution) => {\n        if (solution.length < minNotes) {\n          return false;\n        }\n        if (requiredPitches && !requiredPitches.reduce(\n          (hasAll, pitch) => hasAll && !!solution.find(n => Note.chroma(n) === Note.chroma(pitch)), true\n        )) {\n          return false;\n        }\n        /* if (topPitches && !topPitches.includes(Note.pc(solution[solution.length - 1]))) {\n          return false;\n        } */\n        // TODO add other topChromas....\n        /* if (topChromas[solution.length - 1] && !topChromas[solution.length - 1].includes(Note.chroma(solution[solution.length - 1]))) {\n          return false;\n        } */\n        if (topNotes && !topNotes.includes(solution[solution.length - 1])) {\n          return false;\n        }\n        if (topChromas && !topChromas.reduce((valid, chromas, i) => {\n          const index = solution.length - topChromas.length + i;\n          if (!index) {\n            return valid;\n          }\n          return valid && chromas.includes(Note.chroma(solution[index]));\n        }, true)) {\n          //console.log('topChroma fail', topChromas, solution);\n          return false;\n        }\n\n        if (topDistances && !topDistances.reduce((valid, distance, i) => {\n          const index = solution.length - topDistances.length + i;\n          if (!index) {\n            return valid;\n          }\n          const d = (Note.midi(solution[index]) - Note.midi(solution[index - 1]));\n          return valid && d >= distance[0] && d <= distance[1];\n        }, true)) {\n          return false;\n        }\n        if (voices && Array.isArray(voices)\n          && voices.length\n          && Array.isArray(voices[0])\n          && Array.isArray(voices[1])\n          && Voicing.allocations(solution, voices as string[][]).length === 0) {\n          return false;\n        }\n        return true;\n      }\n    );\n  }\n  /* static allocations(notes: string[], voices: { [name: string]: string[] }) { */\n  static allocations(notes: string[], voices: string[][]) {\n    // sort voices by range top => bottom to top\n    //const keys = Object.keys(voices).sort((a, b) => Note.midi(voices[a][1]) - Note.midi(voices[b][1]));\n    const keys = voices.sort((a, b) => Note.midi(a[1]) - Note.midi(b[1])).map((v, i) => i);\n\n    return Permutation.search(\n      (path: number[], solutions) => {\n        if (path.length > notes.length - 1) { // all notes voiced\n          return [];\n        }\n        const note = notes[path.length];\n        return keys.filter((v, i) =>\n          !path.includes(i) // voice has already neem picked\n          && i > keys.indexOf(keys[path.length - 1]) // voice is below last voice => would cross\n          && Harmony.isInRange(note, voices[i])\n        );\n      },\n      (solution) => {\n        return solution.length === notes.length;\n      }\n    ); //.map(solution => solution.map(v => voices.indexOf(v)));\n  }\n  static getPitches(chord: string, options: VoicingValidation) {\n    chord = Harmony.getTonalChord(chord);\n    const pitches = Chord.get(chord).notes;\n    options = {\n      ...Voicing.getMinMaxNotes(options),\n      ...options,\n    }\n    const requiredPitches = Voicing.getRequiredPitches(chord, options.maxNotes);\n    const optionalPitches = pitches.filter(pitch => !requiredPitches.includes(pitch));\n    return {\n      requiredPitches,\n      optionalPitches\n    }\n  }\n  // just a wrapper to avoid possible future refactoring: correctly named\n  static getRequiredPitches(chord, voices = 2) {\n    return Voicing.getRequiredNotes(chord, voices);\n  }\n  /** Returns all notes that are required to outline a chord */\n  static getRequiredNotes(chord, voices = 2) {\n    chord = Harmony.getTonalChord(chord);\n    const notes = Chord.get(chord).notes;\n    const intervals = Chord.get(chord).intervals;\n    let requiredSteps = [3, 7, 'b5', 6].slice(0, Math.max(voices, 2)); // order is important\n    if (!Degree.find(3, intervals)) {\n      requiredSteps.push(4); // fixes m6 chords\n    }\n    let required = requiredSteps.reduce((req, degree) => {\n      if (!!Degree.find(degree, intervals)) {\n        req.push(Degree.inChord(degree, chord));\n      }\n      return req;\n    }, []);\n    if (voices > 3 && !required.includes(notes[notes.length - 1])) {\n      required.push(notes[notes.length - 1]);\n    }\n    return required;\n  }\n  static getMinMaxNotes(options: VoicingValidation) {\n    let notes = options.notes || voicingDefaultOptions.notes;\n    let minNotes, maxNotes;\n    if (typeof notes === 'number') {\n      minNotes = notes;\n      maxNotes = notes\n    } else if (Array.isArray(notes)) {\n      if (notes.length < 2) {\n        throw new Error('notes must be a number or an array with two numbers (max,min)');\n      }\n      minNotes = notes[0];\n      maxNotes = notes[1];\n    }\n    if (minNotes > maxNotes) {\n      throw new Error('minNotes cannot be greater than maxNotes');\n    }\n    return { minNotes, maxNotes };\n  }\n  static analyze(voicing, root) { // voicing with first note as bass\n    const pitches = voicing.map(note => Note.get(note).pc);\n    const steps = pitches.map(pitch => Step.fromInterval(Interval.distance(root, pitch)));\n    const intervals = voicing.reduce((intervals, note, index) => index ? intervals.concat(\n      [Interval.distance(voicing[index - 1] as string, note as string)]\n    ) : [], []);\n    const semitones = intervals.map(interval => Interval.semitones(interval));\n    const minDistance = Math.min(...semitones);\n    const maxDistance = Math.max(...semitones);\n    const spread = Interval.distance(voicing[0], voicing[voicing.length - 1]);\n    const semitoneSpread = Interval.semitones(spread as string);\n    const avgSpread = Math.floor(semitoneSpread / voicing.length);\n    const averageDistance = semitones.reduce((avg, semitones) => avg + semitones, 0) / semitones.length;\n    const leapSemitones = maxDistance - minDistance;\n    const leap = Interval.fromSemitones(leapSemitones);\n    const topMidi = Note.midi(voicing[voicing.length - 1]);\n    const topDegree = Degree.fromInterval(Interval.distance(root, pitches[pitches.length - 1]));\n    const bottomDegree = Degree.fromInterval(Interval.distance(root, pitches[0]));\n    const bottomMidi = Note.midi(voicing[0]);\n    const midiMedian = voicing.reduce((sum, note) => sum + Note.midi(note), 0) / voicing.length;\n    // TODO:\n    // amount of different interval types: (3m 3M = 1) (4P 3m = 2)\n    // standard deviation from median interval\n    // degree stack: [1,[3,5,7]]\n    return {\n      root, pitches, maxDistance, minDistance, steps, intervals, semitones, spread, semitoneSpread, averageDistance, leap, leapSemitones,\n      topMidi, bottomMidi, midiMedian, topDegree, bottomDegree, avgSpread\n    }\n  }\n}\n\nexport declare type VoicingValidation = {\n\n  /** COPIED FROM VoiceLeadingOptions to avoid typing errors */\n  range?: string[];\n  maxVoices?: number;\n  forceDirection?: intervalDirection;\n  forceBestPick?: boolean; // if true, the best pick will always be taken even if transposed an octave\n  // the lower and upper distance to the range end that is tolerated before forcing a direction\n  rangeBorders?: number[];\n  logging?: boolean; // if true, all voice leading infos will be logged to the console\n  idleChance?: number; // if true, next voicings cant use all the same notes again (difference !== 0)\n  logIdle?: boolean; // if false, nothing will be logged if the notes stayed the same\n  /** COPY END */\n\n  // NEW\n  requiredPitches?: string[];\n  optionalPitches?: string[];\n  bottomPitches?: string[][];\n  topPitches?: string[][];\n  voices?: string[][];\n  ignoreLowerIntervalLimits?: boolean;\n  defaultDistances?: number[];\n  bottomDistances?: number[][];\n  topDistances?: number[][];\n  preferTopDistances?: boolean;\n  maxTopDistance?: number;\n  notes?: number | number[];\n\n  maxDistance?: number;\n  minBottomDistance?: number;\n  minDistance?: number;\n  minTopDistance?: number;\n  topNotes?: string[]; // accepted top notes\n  topDegrees?: number[][] | number[]; // accepted top degrees\n  bottomNotes?: string[]; // accepted top notes\n  bottomDegrees?: number[] | number[][]; // accepted bottom degrees\n  omitNotes?: string[];\n  unique?: boolean; // if true, no pitch can be picked twice\n  maxNotes?: number; // if true, no pitch can be picked twice\n  minNotes?: number; // if true, no pitch can be picked twice\n  /* custom validator for permutation of notes */\n  validatePermutation?: (path: string[], next: string, array: string[]) => boolean;\n  /* Custom sort function for choices. Defaults to smaller difference. */\n  sortChoices?: (choiceA, choiceB) => number;\n  filterChoices?: (choice) => boolean;\n  noTopDrop?: boolean;\n  noTopAdd?: boolean;\n  noBottomDrop?: boolean;\n  noBottomAdd?: boolean;\n  root?: string; // validate relative to that root\n};\nexport const voicingDefaultOptions = {\n  range: ['C3', 'C5'],\n  notes: 4,\n  rangeBorders: [3, 3],\n  maxVoices: 4,\n  forceDirection: null,\n  forceBestPick: false,\n  maxDistance: 7,\n  defaultDistances: [1, 7],\n  minBottomDistance: 3, // min semitones between the two bottom notes\n  minTopDistance: 2, // min semitones between the two top notes\n  noTopDrop: true,\n  noTopAdd: true,\n  noBottomDrop: false,\n  noBottomAdd: false,\n  idleChance: 1,\n  logIdle: false,\n  logging: true,\n}\n\nexport const lowIntervalLimits = {\n  1: 'E3',\n  2: 'Eb3',\n  3: 'C3',\n  4: 'Bb2',\n  5: 'Bb2',\n  6: 'B2',\n  7: 'Bb1',\n  8: 'F2',\n  9: 'F2',\n  10: 'F2',\n  11: 'F2',\n};","import React, { useState } from 'react';\nimport { State } from 'react-powerplug';\nimport * as Tone from 'tone';\nimport { Chord, Note, Interval } from '@tonaljs/tonal';\nimport { Harmony } from '../../../content/drafts/voicing/Harmony';\nimport { Voicing } from '../../../content/drafts/voicing/Voicing';\nimport Keyboard from '../../../content/components/Keyboard';\nconst { PolySynth, Synth } = Tone;\nconst isBrowser = typeof window !== 'undefined';\nconst poly = isBrowser && new PolySynth(32, Synth, { volume: -12 }).toMaster();\nimport DynamicTable from '../../../content/components/common/DynamicTable';\nimport { min, max } from 'd3-array';\nimport Layout from '../Layout';\n\nexport default function Voicings() {\n  const [state, setState] = useState<any>({\n    wave: 'fmsine',\n    sortBy: 'topMidi',\n    tonic: 'D',\n    symbol: '-9',\n    bottomPitches: '',\n    maxNotes: 5,\n    minNotes: 5,\n    defaultDistances: '1-7',\n    bottomDistances: '5-15 2-8',\n    topDistances: '3-7',\n    arpeggioInterval: 200,\n    bottomDegrees: '1 3,5,7',\n    topDegrees: ''\n  });\n  const parseInts = (divider) => (d) =>\n    d.split(divider).map((_d) => parseInt(_d));\n  const options = {\n    ...state,\n    range: ['A1', 'C5'],\n    notes: [state.minNotes, state.maxNotes] || 5,\n    bottomPitches: state.bottomPitches ? state.bottomPitches.split(' ') : [],\n    topPitches: state.topPitches ? state.topPitches.split(' ') : [],\n    bottomDegrees: state.bottomDegrees\n      ? state.bottomDegrees.trim().split(' ').map(parseInts(','))\n      : [],\n    topDegrees: state.topDegrees\n      ? state.topDegrees.trim().split(' ').map(parseInts(','))\n      : [],\n    bottomDistances: state.bottomDistances\n      ? state.bottomDistances.trim().split(' ').map(parseInts('-'))\n      : [],\n    topDistances: state.topDistances\n      ? state.topDistances.trim().split(' ').map(parseInts('-'))\n      : [],\n    defaultDistances: state.defaultDistances\n      ? state.defaultDistances.trim().split('-').map(parseInts('-'))\n      : []\n  };\n  let voicings = Voicing.getCombinations(state.tonic + state.symbol, options);\n  const flatMidi = [].concat.apply([], voicings).map((n) => Note.midi(n));\n  const range = [min(flatMidi), max(flatMidi)].map((midi) =>\n    Note.fromMidi(+midi)\n  );\n  //.map((note) => Note.simplify(note));\n  return (\n    <Layout\n      sidebar={\n        <>\n          <label>\n            <select\n              value={state.tonic}\n              onChange={(e) => setState({ ...state, tonic: e.target.value })}\n            >\n              <option>C</option>\n              <option>C#</option>\n              <option>Db</option>\n              <option>D</option>\n              <option>D#</option>\n              <option>Eb</option>\n              <option>E</option>\n              <option>F</option>\n              <option>F#</option>\n              <option>Gb</option>\n              <option>G</option>\n              <option>G#</option>\n              <option>Ab</option>\n              <option>A</option>\n              <option>A#</option>\n              <option>Bb</option>\n              <option>B</option>\n            </select>\n            <select\n              value={state.symbol}\n              onChange={(e) => setState({ ...state, symbol: e.target.value })}\n            >\n              <option>^</option>\n              <option>sus4</option>\n              <option>sus2</option>\n              <option>2</option>\n              <option>^#5</option>\n              <option>6</option>\n              <option>^7</option>\n              <option>^7#5</option>\n              <option>^7#11</option>\n              <option>^9</option>\n              <option>^9#11</option>\n              <option>^13</option>\n              <option>7</option>\n              <option>7sus4</option>\n              <option>7sus</option>\n              <option>7b5</option>\n              <option>7#5</option>\n              <option>7+</option>\n              <option>7#9</option>\n              <option>7b9</option>\n              <option>7#11</option>\n              <option>7b13</option>\n              <option>7b9b5</option>\n              <option>7b9sus</option>\n              <option>7b9#5</option>\n              <option>7#9b5</option>\n              <option>7b9#9</option>\n              <option>7#9#5</option>\n              <option>7b9b13</option>\n              <option>7b9#11</option>\n              <option>7#9#11</option>\n              <option>9</option>\n              <option>9sus</option>\n              <option>9#5</option>\n              <option>9b5</option>\n              <option>9#11</option>\n              <option>13</option>\n              <option>13sus</option>\n              <option>13#9</option>\n              <option>13b9</option>\n              <option>13#11</option>\n              <option>11</option>\n              <option>-</option>\n              <option>-6</option>\n              <option>-#5</option>\n              <option>-b6</option>\n              <option>-7</option>\n              <option>-^7</option>\n              <option>-9</option>\n              <option>-^9</option>\n              <option>-11</option>\n              <option>h</option>\n              <option>h7</option>\n              <option>-7b5</option>\n              <option>o</option>\n              <option>o7</option>\n            </select>{' '}\n          </label>\n          <br />\n          <label title=\"minimum number of notes\">\n            <input\n              type=\"number\"\n              min=\"1\"\n              max=\"8\"\n              value={state.minNotes}\n              onChange={(e) => setState({ ...state, minNotes: e.target.value })}\n            />{' '}\n            -\n            <input\n              type=\"number\"\n              min=\"1\"\n              max=\"8\"\n              value={state.maxNotes}\n              onChange={(e) => setState({ ...state, maxNotes: e.target.value })}\n            />\n            notes\n          </label>\n          <br />\n          <label title=\"min-max distances between the notes in semitones from the bottom up. all remaining will default to minDistance-maxDistance\">\n            <input\n              type=\"text\"\n              value={state.bottomDistances}\n              onChange={(e) =>\n                setState({ ...state, bottomDistances: e.target.value })\n              }\n            />\n            bottomDistances (min0-max0 min1-max1 ...){' '}\n          </label>\n          <br />\n          <label title=\"default min-max distance between notes. in semitones. can be overridden by bottomDistances / topDistances\">\n            <input\n              type=\"text\"\n              value={state.defaultDistances}\n              onChange={(e) =>\n                setState({ ...state, defaultDistances: e.target.value })\n              }\n            />{' '}\n            defaultDistances (min-max semitones)\n          </label>\n          <br />\n          <label title=\"min-max distances between the notes in semitones to the top. all remaining will default to minDistance-maxDistance\">\n            <input\n              type=\"text\"\n              value={state.topDistances}\n              onChange={(e) =>\n                setState({ ...state, topDistances: e.target.value })\n              }\n            />{' '}\n            topDistance(s) (... minTop-maxTop){' '}\n          </label>\n          <br />\n          <label title=\"all degree options for the bottom note. number(s, space seperated)\">\n            <input\n              type=\"text\"\n              value={state.bottomDegrees}\n              onChange={(e) =>\n                setState({ ...state, bottomDegrees: e.target.value })\n              }\n            />{' '}\n            bottomDegree(s) (1-7)\n          </label>\n          <br />\n          <label title=\"all degree options for the top note. number(s, space seperated)\">\n            <input\n              type=\"text\"\n              value={state.topDegrees}\n              onChange={(e) =>\n                setState({ ...state, topDegrees: e.target.value })\n              }\n            />{' '}\n            topDegree(s) (1-7)\n          </label>\n          <br />\n          <label title=\"time between each note in ms. choose 0 to play all at once.\">\n            <input\n              type=\"number\"\n              value={state.arpeggioInterval}\n              onChange={(e) =>\n                setState({ ...state, arpeggioInterval: e.target.value })\n              }\n              min=\"0\"\n              max=\"1000\"\n            />\n            arpeggio (ms){' '}\n          </label>\n          <br />\n          <label>\n            <select\n              value={state.sortBy}\n              onChange={(e) => setState({ ...state, sortBy: e.target.value })}\n            >\n              <option value=\"topMidi\">top note</option>\n              <option value=\"bottomMidi\">bottom note</option>\n              <option value=\"midiMedian\">median note</option>\n              <option value=\"topDegree\">top degree</option>\n              <option value=\"bottomDegree\">bottom degree</option>\n              <option value=\"semitoneSpread\">spread</option>\n              <option value=\"avgSpread\">average spread</option>\n              <option value=\"leapSemitones\">leap</option>\n              <option value=\"maxDistance\">maxDistance</option>\n              <option value=\"minDistance\">minDistance</option>\n            </select>\n            sort by{' '}\n          </label>\n          <br />\n          <label>\n            <select\n              value={state.wave}\n              onChange={(e) => setState({ ...state, wave: e.target.value })}\n            >\n              <option value=\"sine\">sine</option>\n              <option value=\"triangle\">triangle</option>\n              <option value=\"sawtooth\">sawtooth</option>\n              <option value=\"square\">square</option>\n              <option value=\"pwm\">pwm</option>\n              <option value=\"pulse\">pulse</option>\n              <option value=\"fmsine\">fmsine</option>\n              <option value=\"fmtriangle\">fmtriangle</option>\n              <option value=\"fmsawtooth\">fmsawtooth</option>\n              <option value=\"fmsquare\">fmsquare</option>\n              <option value=\"amsine\">amsine</option>\n              <option value=\"amtriangle\">amtriangle</option>\n              <option value=\"amsawtooth\">amsawtooth</option>\n              <option value=\"amsquare\">amsquare</option>\n              <option value=\"fatsine\">fatsine</option>\n              <option value=\"fattriangle\">fattriangle</option>\n              <option value=\"fatsawtooth\">fatsawtooth</option>\n              <option value=\"fatsquare\">fatsquare</option>\n            </select>{' '}\n            oscillator wave\n          </label>\n          <br />\n          <strong>TBD:</strong>\n          <br />\n          <ul>\n            <li>Beautify Interface</li>\n            <li>Steps are buggy - test</li>\n            <li>\n              Reimplement rules, use array of objects with voices as selector\n            </li>\n          </ul>\n          <a href=\"../\">Go back to blog</a>\n        </>\n      }\n      main={\n        <>\n          <DynamicTable\n            heading={<>{voicings.length} voicings found</>}\n            cols={[\n              {\n                property: 'keys',\n                resolve: (notes) => notes,\n                display: (keys) => (\n                  <div\n                    onMouseDown={(e) => {\n                      e.stopPropagation();\n                      // e.stopImmediatePropagation();\n                      e.preventDefault();\n                      poly.triggerAttack(keys);\n                    }}\n                    onMouseUp={(e) => poly.releaseAll()}\n                    onMouseLeave={(e) => poly.releaseAll()}\n                  >\n                    <Keyboard\n                      mouseControl={false}\n                      keyControl={false}\n                      options={{\n                        scaleX: 0.5,\n                        scaleY: 0.5,\n                        range,\n                        colorize: [\n                          {\n                            keys,\n                            color: 'steelblue'\n                          }\n                        ]\n                      }}\n                    />\n                  </div>\n                )\n              },\n              {\n                property: 'structure',\n                resolve: (keys: any) => {\n                  const { steps, intervals } = Voicing.analyze(\n                    keys,\n                    state.tonic\n                  );\n                  return (\n                    <>\n                      {keys.join(' ')}\n                      <br />\n                      {steps.join(' ')}\n                      <br />\n                      {intervals.join(' ')}\n                    </>\n                  );\n                }\n              },\n              {\n                property: 'spread',\n                resolve: (keys) => Voicing.analyze(keys, state.tonic).spread,\n                sort: (a, b) => Interval.semitones(a) - Interval.semitones(b)\n              },\n              {\n                property: 'leap',\n                resolve: (keys) => Voicing.analyze(keys, state.tonic).leap,\n                sort: (a, b) => Interval.semitones(a) - Interval.semitones(b)\n              },\n              {\n                property: 'midi median',\n                resolve: (keys) =>\n                  Voicing.analyze(keys, state.tonic).midiMedian,\n                sort: (a, b) => a - b\n              }\n            ]}\n            rows={voicings}\n          />\n        </>\n      }\n    />\n  );\n}\n"],"sourceRoot":""}