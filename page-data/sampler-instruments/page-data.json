{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/sampler-instruments/","result":{"data":{"site":{"siteMetadata":{"title":"Loophole Letters","social":[{"name":"github","url":"https://github.com/felixroos"},{"name":"GitHub","url":"https://github.com/gatsbyjs"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"cbdf3ab2-bea0-56d9-8ea8-28dcdc5ca6a0","excerpt":"Caution: Playing the examples will load ~60MB of samples. Make sure you are on Wifi! To get away from cheap synth sounds, let's implementâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Using Sampled Instruments with Tone.js\",\n  \"date\": \"2020-07-08T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Caution: Playing the examples will load ~60MB of samples. Make sure you are on Wifi!\"), mdx(\"p\", null, \"To get away from cheap synth sounds, let\\u2019s implement instruments that use samples, with the help of Tone.js.\"), mdx(\"h2\", {\n    \"id\": \"rack-for-drums\"\n  }, \"Rack for drums\"), mdx(\"p\", null, \"So far, we already used samples for drums, implemented with a rack, using Tone.Players:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// rack.ts\\nimport * as Tone from 'tone';\\nexport function rack(samples: { [key: string]: any }, options = {}) {\\n  options = { volume: -12, attack: 0.05, ...options };\\n  let players = new Tone.Players(samples, options);\\n\\n  const s = {\\n    customSymbols: Object.keys(samples),\\n    triggerAttackRelease: (key, duration, time, velocity) => {\\n      if (!players.has(key)) {\\n        console.warn(`key ${key} not found for playback`);\\n        return;\\n      }\\n      const player = players.get(key);\\n      player.start(time);\\n      player.stop(time + duration);\\n    },\\n    connect: (dest) => {\\n      players.connect(dest);\\n      return s;\\n    },\\n    toMaster: () => {\\n      players.toMaster();\\n      return s;\\n    }\\n  };\\n  return s;\\n}\\n\")), mdx(\"p\", null, \"Here we are essentially creating a triggerAttackRelease method for Players to have more control and to be able to use one unified method for all instruments later.\"), mdx(\"p\", null, \"We can package a drum instrument like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// tidal.ts\\nimport { rack } from './rack';\\nconst tidalsounds = {\\n  bd: require('./bd/BT0A0D0.wav'),\\n  sn: require('./sn/ST0T0S3.wav'),\\n  hh: require('./hh/000_hh3closedhh.wav'),\\n  cp: require('./cp/HANDCLP0.wav'),\\n  mt: require('./mt/MT0D3.wav'),\\n  ht: require('./ht/HT0D3.wav'),\\n  lt: require('./lt/LT0D3.wav')\\n};\\nexport default rack(tidalsounds).toMaster();\\n\")), mdx(\"p\", null, \"You can download the samples from the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/tidalcycles/Dirt-Samples\"\n  }, \"Dirt-Samples repo\"), \".\"), mdx(\"p\", null, \"Then we can play sounds like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import * as Tone from 'tone';\\nimport drums from './tidal';\\nimport { State } from 'react-powerplug';\\n\\nconst seq = new Tone.Sequence(\\n  (time, note, duration) => drums.triggerAttackRelease(note, 0.5, time),\\n  ['bd', 'hh', 'cp', 'hh', 'bd', 'hh', 'cp', 'hh'],\\n  '8n'\\n);\\nfunction toggleSeq() {\\n  if (seq.state !== 'started') {\\n    Tone.Transport.start('+0.1');\\n    seq.start();\\n  } else {\\n    Tone.Transport.stop();\\n    seq.stop();\\n  }\\n}\\ndocument\\n  .getElementById('#playButton')\\n  .addEventListener('click', () => toggleSeq());\\n// in your dom: <button id=\\\"playButton\\\">toggle</button>\\n\")), mdx(Player, {\n    instruments: {\n      drums: drums\n    },\n    fold: true,\n    events: renderRhythmObject({\n      duration: 2,\n      sequential: ['bd', 'hh', 'cp', 'hh', 'bd', 'hh', 'cp', 'hh']\n    }, [inheritProperty('instrument')]),\n    mdxType: \"Player\"\n  }), mdx(\"p\", null, \"With this approach, we can map any string to any sound, which is good for drums and non pitched sounds.\"), mdx(\"h2\", {\n    \"id\": \"sampler-for-pitched-sounds\"\n  }, \"Sampler for pitched sounds\"), mdx(\"p\", null, \"To use samples for playing back pitched sounds, we can use Tone.Sampler:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// sampler.ts\\n\\nimport { Distance, Interval, Note } from 'tonal';\\nimport Tone from 'tone';\\n\\nexport function sampler(samples, options = {}) {\\n  options = { volume: -12, attack: 0.05, ...options };\\n  let sampler = new Tone.Sampler(samples, options);\\n  const s = {\\n    triggerAttackRelease: (note, duration, velocity) => {\\n      if (options['transpose']) {\\n        note = Distance.transpose(\\n          note,\\n          Interval.fromSemitones(options['transpose'])\\n        );\\n      }\\n      sampler.triggerAttackRelease(Note.simplify(note), duration, velocity);\\n    },\\n    connect: (dest) => {\\n      sampler.connect(dest);\\n      return s;\\n    },\\n    toMaster: () => {\\n      sampler.toMaster();\\n      return s;\\n    }\\n  };\\n  return s;\\n}\\n\")), mdx(\"p\", null, \"To package an instrument, we need samples of different pitches of the instrument:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"export const piano = {\\n  C1: require('./C1.mp3'),\\n  C2: require('./C2.mp3'),\\n  C3: require('./C3.mp3'),\\n  C4: require('./C4.mp3'),\\n  C5: require('./C5.mp3'),\\n  C6: require('./C6.mp3'),\\n  C7: require('./C7.mp3')\\n};\\n\\nimport { sampler } from '../../../components/rhythmical/instruments/sampler';\\n\\nexport default sampler(piano).toMaster();\\n\")), mdx(\"p\", null, \"The good thing about Tone.Sampler, is that it is able to fill the gaps between non existing pitches.\\nThis allows much smaller sample payloads, for example, the above piano only has 217KB of samples.\\nIf we add a sample for each key from C1 to B7, we have a payload of 2,2MB.\"), mdx(\"p\", null, \"You can compare the two and judge for yourself:\"), mdx(Player, {\n    instruments: {\n      piano: piano\n    },\n    fold: true,\n    events: renderRhythmObject({\n      duration: 4,\n      sequential: [['c3', 'e3', 'g3', 'b3'], ['a3', 'g3', 'e3', 'c3'], ['d3', 'f3', 'a3', 'c4'], 'b3']\n    }),\n    mdxType: \"Player\"\n  }), mdx(Player, {\n    instruments: {\n      tinypiano: tinypiano\n    },\n    fold: true,\n    events: renderRhythmObject({\n      duration: 4,\n      sequential: [['c3', 'e3', 'g3', 'b3'], ['a3', 'g3', 'e3', 'c3'], ['d3', 'f3', 'a3', 'c4'], 'b3']\n    }),\n    mdxType: \"Player\"\n  }), mdx(\"p\", null, \"This time, we play it back using rhythmical + Tone.Part (as Tone.Sequence does not support durations):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const duration = 4;\\nconst seq = (instr) => {\\n  const sequence = new Tone.Part(\\n    (time, { value, duration }) =>\\n      instr.triggerAttackRelease(value, duration, time),\\n    renderRhythmObject({\\n      duration,\\n      sequential: [\\n        ['c3', 'e3', 'g3', 'b3'],\\n        ['a3', 'g3', 'e3', 'c3'],\\n        ['d3', 'f3', 'a3', 'c4'],\\n        'b3'\\n      ]\\n    })\\n  );\\n  sequence.loop = true;\\n  sequence.loopEnd = duration;\\n  return sequence;\\n};\\nconst cheapLoop = seq(tinypiano);\\nconst goodLoop = seq(piano);\\nfunction toggleSeq(sequence) {\\n  if (sequence.state !== 'started') {\\n    Tone.Transport.start('+0.1');\\n    sequence.start();\\n  } else {\\n    Tone.Transport.stop();\\n    sequence.stop();\\n  }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"extracting-samples-from-kontakt\"\n  }, \"Extracting Samples from Kontakt\"), mdx(\"p\", null, \"If you do not have the time or equipment to record your large collection of vintage instruments at home, you can for example extract samples from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.native-instruments.com/de/products/komplete/samplers/kontakt-6/\"\n  }, \"Kontakt\"), \":\"), mdx(\"ol\", {\n    \"start\": 0\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"purchase (or download a free) kontakt instrument\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"open instrument kontakt standalone version\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"open expert > groups\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"select all and click download, make sure you deselect the compress option\")), mdx(\"p\", null, \"Now you have all samples that are used by the kontakt instrument as wav on your hard drive!\"), mdx(\"h2\", {\n    \"id\": \"converting-wav-samples-to-mp3\"\n  }, \"Converting wav samples to mp3\"), mdx(\"p\", null, \"If you have a large amount of wav files, it is best to compress them, as a wav file for every key can get quite large.\\nFor example, I extracted samples from a rhodes instrument which add up to over 170MB only for one sample per key (same velocity).\\nIt would be nice to have a quick way to convert all wavs to a more compressed format like mp3.\"), mdx(\"p\", null, \"We can do that using node-lame:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const Lame = require('node-lame').Lame;\\nconst path = require('path');\\nconst fs = require('fs');\\nconst folder = process.argv[2];\\nif (!folder) {\\n  console.log('no folder given!');\\n} else {\\n  //joining path of directory\\n  const directoryPath = path.join(__dirname, folder);\\n  console.log('convert ', directoryPath);\\n  //passsing directoryPath and callback function\\n  fs.readdir(directoryPath, function (err, files) {\\n    //handling error\\n    if (err) {\\n      return console.log('Unable to scan directory: ' + err);\\n    }\\n    files\\n      .filter((file) => file.split('.')[1] === 'wav')\\n      .forEach(function (file) {\\n        const encoder = new Lame({\\n          output: `${directoryPath}/${file.split('.')[0]}.mp3`,\\n          bitrate: 192\\n        }).setFile(`${directoryPath}/${file.split('.')[0]}.wav`);\\n        encoder\\n          .encode()\\n          .then(() =>\\n            console.log(`encoded ${directoryPath}/${file.split('.')[0]}.mp3`)\\n          )\\n          .catch((error) =>\\n            console.log(\\n              `error encoding ${directoryPath}/${\\n                file.split('.')[0]\\n              }.mp3: ${error}`\\n            )\\n          );\\n      });\\n  });\\n}\\n\")), mdx(\"p\", null, \"This allowed me to reduce the size by 73% (from 756MB to 206MB for all articulations / from 170MB to 40MB for medium articulation)\"), mdx(\"h2\", {\n    \"id\": \"demo\"\n  }, \"Demo\"), mdx(\"p\", null, \"So here are a few demos using a rhodes sound with 40MB payload:\"), mdx(\"h3\", {\n    \"id\": \"mr-sandman\"\n  }, \"Mr Sandman\"), mdx(Player, {\n    instruments: {\n      MK2md2: MK2md2\n    },\n    fold: true,\n    events: renderRhythmObject({\n      duration: 8,\n      parallel: [{\n        parallel: [['c3', 'a2', 'd3', 'g2'], ['r', 'g3', 'r', 'e3', 'r', 'a3', 'r', 'd3'], ['r', 'e4', 'r', 'c4', 'r', 'f4', 'r', 'b3']]\n      }, {\n        sequential: [['c5', 'e5', 'g5', 'b5'], ['a5', 'g5', 'e5', 'c5'], ['d5', 'f5', 'a5', 'c6'], ['b5']]\n      }]\n    }),\n    mdxType: \"Player\"\n  }), mdx(\"h3\", {\n    \"id\": \"green-onions\"\n  }, \"green onions\"), mdx(Player, {\n    instruments: {\n      MK2md2: MK2md2\n    },\n    fold: true,\n    events: renderRhythmObject({\n      duration: 2,\n      parallel: [['r', 'f4', 'eb4', 'd4'], ['r', 'c4', 'c4', 'bb3'], ['r', 'ab3', 'ab3', 'f3'], ['f2', 'f2', 'ab2', 'bb2']]\n    }, [inheritProperty('instrument')]),\n    mdxType: \"Player\"\n  }), mdx(\"h3\", {\n    \"id\": \"schlechter-empfang\"\n  }, \"schlechter empfang\"), mdx(Player, {\n    instruments: {\n      MK2md2: MK2md2\n    },\n    fold: true,\n    events: renderRhythmObject({\n      duration: 10,\n      parallel: [{\n        instrument: 'MK2md2',\n        sequential: [['r', ['a3', 'c4', 'f4', 'r'], ['a4', 'r', 'r', 'f4'], ['r', 'r', 'c4', 'r']], ['r', ['a3', 'c#4', 'f4', 'r'], ['a4', 'r', 'r', 'f4'], ['r', 'r', 'c#4', 'r']], ['r', ['b3', 'd4', 'f4', 'r'], ['a4', 'r', 'r', 'f4'], ['r', 'r', 'd4', 'r']], ['r', ['c4', 'e4', 'g4', 'r'], ['c5', 'r', 'r', 'bb4'], ['r', 'r', 'g4', 'r']]]\n      }, {\n        instrument: 'MK2md2',\n        color: 'steelblue',\n        parallel: [['a3', 'a3', ['a3', ['g3', 'f3']], ['f3', {\n          sequential: 'e3',\n          duration: 3\n        }]], ['f3', 'f3', 'd3', ['d3', {\n          sequential: 'c3',\n          duration: 3\n        }]], ['c3', 'c#3', 'b2', 'bb2']]\n      }]\n    }, [inheritProperty('instrument')]),\n    mdxType: \"Player\"\n  }), mdx(\"h3\", {\n    \"id\": \"microtonality\"\n  }, \"microtonality\"), mdx(\"p\", null, \"Sadly, Tone.Sampler will round frequencies to equal temperament, making it impossible to play microtonal music:\"), mdx(\"p\", null, \"How it sounds:\"), mdx(Player, {\n    instruments: {\n      MK2md2: MK2md2\n    },\n    events: renderRhythmObject({\n      duration: 4,\n      sequential: [400, 410, 420, 430, 440, 450, 460, 470]\n    }),\n    mdxType: \"Player\"\n  }), mdx(\"p\", null, \"How it should sound:\"), mdx(Player, {\n    events: renderRhythmObject({\n      duration: 4,\n      sequential: [400, 410, 420, 430, 440, 450, 460, 470]\n    }),\n    mdxType: \"Player\"\n  }), mdx(\"p\", null, \"source:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<Player\\n  instruments={{ MK2md2 }}\\n  events={renderRhythmObject({\\n    duration: 4,\\n    sequential: [400, 410, 420, 430, 440, 450, 460, 470]\\n  })}\\n/>\\n\")), mdx(\"h2\", {\n    \"id\": \"further-ideas\"\n  }, \"Further ideas\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"implement multiple samples per key for different velocities\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"implement looping sections\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"write script that trims samples to a max length\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"learn KSP\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"find way to load samples only after accepting huge payload (40MB is much on mobile)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"find ways to humanize playback e.g. velocity curves, timing variances + swing\")));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/sampler-instruments/","title":"Using Sampled Instruments with Tone.js","tags":[],"keywords":[],"date":"July 08, 2020","image":null,"imageAlt":null,"socialImage":null},"previous":{"__typename":"MdxBlogPost","id":"40c35d5c-2423-5ffc-9105-af248d82df38","excerpt":"Now that we have a huge dataset of chord changes, we can do some data mining on it. Metadata Rankings As a warmup, let's do a ranking ofâ€¦","slug":"/ireal-analytics/","title":"Analyzing iReal Chord Changes","date":"June 14, 2020"},"next":{"__typename":"MdxBlogPost","id":"9e8bfe92-aaaa-5c24-8aba-a0e97de3211d","excerpt":"In modern music, ties across barlines are a common way of adding interest to a melody. For example, take the beginning of the tune \"Blueâ€¦","slug":"/rhythmical-ties/","title":"Rhythmical Ties","date":"July 10, 2020"}},"pageContext":{"id":"cbdf3ab2-bea0-56d9-8ea8-28dcdc5ca6a0","previousId":"40c35d5c-2423-5ffc-9105-af248d82df38","nextId":"9e8bfe92-aaaa-5c24-8aba-a0e97de3211d"}},"staticQueryHashes":["386998304","4198970465","764694655"]}