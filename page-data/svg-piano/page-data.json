{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/svg-piano/","result":{"data":{"site":{"siteMetadata":{"title":"Loophole Letters","social":[{"name":"github","url":"https://github.com/felixroos"},{"name":"GitHub","url":"https://github.com/gatsbyjs"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"d9b97b82-b5d4-5b61-ab6b-49f9b717860d","excerpt":"Let's talk about (virtual) keyboards: They are good to visualize chords as a static image ...and melodies as an animation. they areâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar synth = canUseDOM() && new Synth({\n  volume: -12\n}).toMaster();\nvar poly = canUseDOM() && new PolySynth(6, Synth, {\n  volume: -12\n}).toMaster();\nvar _frontmatter = {\n  \"title\": \"SVG Piano\",\n  \"date\": \"2020-03-26T00:00:00.000Z\"\n};\nvar layoutProps = {\n  synth: synth,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://stuartmemo.com/qwerty-hancock/qwerty-hancock.png\",\n    \"alt\": \"Herbie Hancock\"\n  }))), mdx(\"p\", null, \"Let\\u2019s talk about (virtual) keyboards:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"They are good to visualize chords as a static image\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u2026and melodies as an animation.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"they are understood by most musicians\")), mdx(\"p\", null, \"I recently made a little npm lib called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/svg-piano\"\n  }), \"svg-piano\"), \".\\nThough there are a number of\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stuartmemo.com/qwerty-hancock/\"\n  }), \"piano\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.kevinqi.com/react-piano/\"\n  }), \"components\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/hienpd/svg-piano\"\n  }), \"out there\"), \"\\nmost of them are either incorrectly sized or not hackable enough.\\nTalkin about \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.mathpages.com/home/kmath043.htm\"\n  }), \"correct sizing\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/regginos/piano\"\n  }), \"this one\"), \"\\nis the best i\\u2019ve found so far, but still its not on npm and its generating svg nodes directly, making it not so hackable.\"), mdx(\"p\", null, \"What I wanted to achieve with my \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/svg-piano\"\n  }), \"svg-piano lib\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"npm installable\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"no dependencies\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"minimal boilerplate code\")), mdx(\"h2\", {\n    \"id\": \"usage-with-react\"\n  }, \"Usage with React\"), mdx(\"p\", null, \"The lib comes with the method \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/felixroos/svg-piano/blob/0.3.1/keyboard.js#L174\"\n  }), \"renderSVG\"), \",\\nwhich dumps all needed svg element props into a json, which can be plugged directly to any rendering:\"), mdx(\"p\", null, \"Keyboard.js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from 'react';\\nimport { renderSVG } from 'svg-piano';\\n\\nexport default function Keyboard({ options }) {\\n  const { svg, children } = renderSVG(options);\\n  return (\\n    <svg {...svg}>\\n      {children.map(({ polygon, circle, text, key }, index) => [\\n        polygon && <polygon {...polygon} key={'p' + index} />,\\n        circle && <circle {...circle} key={'c' + index} />,\\n        text && (\\n          <text {...text} key={'t' + index}>\\n            {text.value}\\n          </text>\\n        ),\\n      ])}\\n    </svg>\\n  );\\n}\\n\")), mdx(\"p\", null, \"The children elements contain:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"polygon: The actual key\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"text: Text label\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"circle: Background for text\")), mdx(\"p\", null, \"Usage:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Keyboard\\n  options={{\\n    range: ['A0', 'C8'],\\n    scaleX: 0.5,\\n    scaleY: 0.5,\\n  }}\\n/>\\n\")), mdx(Keyboard, {\n    options: {\n      range: ['A0', 'C8'],\n      scaleX: 0.5,\n      scaleY: 0.5\n    },\n    mdxType: \"Keyboard\"\n  }), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"adding-mouse-events\"\n  }, \"Adding Mouse Events\"), mdx(\"p\", null, \"Let\\u2019s add some mouse events to trigger attack / release. We can use \\u2018react-use-gesture\\u2019 to handle the mouse events:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const active = useRef([]);\\nconst [colorized, setColorized] = useState([]);\\nconst onDrag = useGesture({\\n  onDragStart: ({ down, args: [key] }) => down && activate(key),\\n  onHover: ({ down, active, args: [key] }) => {\\n    if (active && down) {\\n      activate(key);\\n    }\\n    if (!active) {\\n      deactivate(key);\\n    }\\n  },\\n});\\nconst activate = (key) => {\\n  if (!colorized.includes(key.notes[0])) {\\n    active.current = [...active.current, key.notes[0]];\\n    onAttack && onAttack(key);\\n  }\\n  setColorized(active.current);\\n};\\nconst deactivate = (key) => {\\n  if (colorized.includes(key.notes[0])) {\\n    active.current = active.current.filter((n) => n !== key.notes[0]);\\n    onRelease && onRelease(key);\\n  }\\n  setColorized(active.current);\\n};\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"I had to useRef as an extra layer to always have the latest active keys. Using state directly did not work for me, but maybe this can be done better.\")), mdx(\"p\", null, \"Then we need to pass the colorization:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const { svg, children } = renderSVG({\\n  ...options,\\n  colorize: [...(options.colorize || []), { keys: colorized, color: 'red' }],\\n});\\n\")), mdx(\"p\", null, \"\\u2026and pass the mouse events to the key polygon:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<polygon\\n  {...polygon}\\n  key={'p' + index}\\n  {...onDrag(key)}\\n  onMouseUp={() => deactivate(key)}\\n  onClick={() => onClick && onClick(key)}\\n/>\\n\")), mdx(\"p\", null, \"We also need the mouse up event, as we need use the key and passing args to useGesture\\u2019s onMouseUp is not possible.\"), mdx(\"h2\", {\n    \"id\": \"adding-a-synth\"\n  }, \"Adding a Synth\"), mdx(\"p\", null, \"Using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tonejs.github.io/\"\n  }), \"Tone.js\"), \", we now can make the keys playable:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import { Synth } from \\\"tone\\\"\\nconst synth = new Synth({ volume: -6 }).toMaster()\\n\\n<Keyboard\\n  options={{range: [\\\"C3\\\", \\\"C5\\\"]}}\\n  onAttack={key => synth && synth.triggerAttack(key.notes[0])}\\n  onRelease={key => synth && synth.triggerRelease([key.notes[0]])}\\n/>\\n\")), mdx(Keyboard, {\n    options: {\n      range: ['C3', 'C5']\n    },\n    onAttack: function onAttack(key) {\n      return synth && synth.triggerAttack(key.notes[0]);\n    },\n    onRelease: function onRelease(key) {\n      return synth && synth.triggerRelease([key.notes[0]]);\n    },\n    mdxType: \"Keyboard\"\n  }), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"adding-keyboard-support\"\n  }, \"Adding keyboard support\"), mdx(\"p\", null, \"To control our keyboard from the computer keyboard, lets add another custom hook:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { useEffect } from 'react';\\n\\nexport function useKeyEvents({ downHandler, upHandler }) {\\n  useEffect(() => {\\n    window.addEventListener('keydown', downHandler);\\n    window.addEventListener('keyup', upHandler);\\n    return () => {\\n      window.removeEventListener('keydown', downHandler);\\n      window.removeEventListener('keyup', upHandler);\\n    };\\n  }, [downHandler, upHandler]);\\n}\\n\")), mdx(\"p\", null, \"\\u2026 and use it inside Keyboard.js:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// + add keyControl to props\\nuseKeyEvents({\\n  downHandler: (e) => keyControl && keyControl[e.key] && activate({ notes: [keyControl[e.key]] }),\\n  upHandler: (e) => keyControl && keyControl[e.key] && deactivate({ notes: [keyControl[e.key]] }),\\n});\\n\")), mdx(\"p\", null, \"in action:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Keyboard\\n  onAttack={(key) => poly && poly.triggerAttack(key.notes[0])}\\n  onRelease={(key) => poly && poly.triggerRelease([key.notes[0]])}\\n  keyControl={{\\n    a: 'C3',\\n    w: 'C#3',\\n    s: 'D3',\\n    e: 'D#3',\\n    d: 'E3',\\n    f: 'F3',\\n    t: 'F#3',\\n    g: 'G3',\\n    z: 'G#3',\\n    h: 'A3',\\n    u: 'A#3',\\n    j: 'B3',\\n    k: 'C4',\\n  }}\\n  options={{\\n    range: ['C3', 'C4'],\\n    scaleX: 1.5,\\n    scaleY: 1.5,\\n    labels: {\\n      C3: 'A',\\n      'C#3': 'W',\\n      D3: 'S',\\n      'D#3': 'E',\\n      E3: 'D',\\n      F3: 'F',\\n      'F#3': 'T',\\n      G3: 'G',\\n      'G#3': 'Z',\\n      A3: 'H',\\n      'A#3': 'U',\\n      B3: 'J',\\n      C4: 'K',\\n    },\\n  }}\\n/>\\n\")), mdx(\"p\", null, \"Now type:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-txt\"\n  }), \"ffef a afuhf\\n\")), mdx(Keyboard, {\n    onAttack: function onAttack(key) {\n      return poly && poly.triggerAttack(key.notes[0]);\n    },\n    onRelease: function onRelease(key) {\n      return poly && poly.triggerRelease([key.notes[0]]);\n    },\n    keyControl: {\n      a: 'C3',\n      w: 'C#3',\n      s: 'D3',\n      e: 'D#3',\n      d: 'E3',\n      f: 'F3',\n      t: 'F#3',\n      g: 'G3',\n      z: 'G#3',\n      h: 'A3',\n      u: 'A#3',\n      j: 'B3',\n      k: 'C4'\n    },\n    options: {\n      range: ['C3', 'C4'],\n      scaleX: 1.5,\n      scaleY: 1.5,\n      labels: {\n        C3: 'A',\n        'C#3': 'W',\n        D3: 'S',\n        'D#3': 'E',\n        E3: 'D',\n        F3: 'F',\n        'F#3': 'T',\n        G3: 'G',\n        'G#3': 'Z',\n        A3: 'H',\n        'A#3': 'U',\n        B3: 'J',\n        C4: 'K'\n      }\n    },\n    mdxType: \"Keyboard\"\n  }), mdx(\"p\", null, \"Thats it for today..\"), mdx(\"h2\", {\n    \"id\": \"further-ideas\"\n  }, \"Further Ideas\"), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"Redo mouse events with \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://use-gesture.netlify.com/docs/state\"\n  }), \"https://use-gesture.netlify.com/docs/state\"), \", see Monochord for usage\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.react-spring.io/\"\n  }), \"https://www.react-spring.io/\"), \" for animated colorization fade\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use midi input\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.newline.co/@waterplea/jam-on-your-midi-keyboard-in-angular--6c16e1e0?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_327\"\n  }), \"https://www.newline.co/@waterplea/jam-on-your-midi-keyboard-in-angular\\u20146c16e1e0?utm_campaign=NG-Newsletter&utm_medium=email&utm_source=NG-Newsletter_327\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/stephband/midi\"\n  }), \"https://github.com/stephband/midi\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/svg-piano/","title":"SVG Piano","tags":[],"keywords":[],"date":"March 26, 2020","image":null,"imageAlt":null,"socialImage":null},"previous":{"__typename":"MdxBlogPost","id":"e82b5b48-ac9f-5dae-aff7-a3d6be8fb1a7","excerpt":"I will write about music and coding here. I have many unordered notes about the combination of both. Many things I have already implementedâ€¦","slug":"/hello/","title":"Hello, let me enter","date":"March 25, 2020"},"next":{"__typename":"MdxBlogPost","id":"8bb5e8c2-38f0-5043-b36e-0dd0e3ce18a1","excerpt":"Chords Let's use the SVG Piano to display chords. My favourite lib for music theory in javascript is  tonal .\nIt comes with a dictionaryâ€¦","slug":"/chords/","title":"Chords and Scales","date":"March 27, 2020"}},"pageContext":{"id":"d9b97b82-b5d4-5b61-ab6b-49f9b717860d","previousId":"e82b5b48-ac9f-5dae-aff7-a3d6be8fb1a7","nextId":"8bb5e8c2-38f0-5043-b36e-0dd0e3ce18a1"}},"staticQueryHashes":["386998304","4198970465","764694655"]}