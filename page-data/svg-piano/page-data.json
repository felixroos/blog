{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/svg-piano/","result":{"data":{"site":{"siteMetadata":{"title":"Loophole Letters","social":[{"name":"github","url":"https://github.com/felixroos"},{"name":"GitHub","url":"https://github.com/gatsbyjs"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"d9b97b82-b5d4-5b61-ab6b-49f9b717860d","excerpt":"Let's talk about (virtual) keyboards: They are good to visualize chords as a static image ...and melodies as an animation. they areâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar isBrowser = typeof window !== \"undefined\";\nvar synth = isBrowser && new Synth({\n  volume: -12\n}).toMaster();\nvar poly = isBrowser && new PolySynth(6, Synth, {\n  volume: -12\n}).toMaster();\nvar _frontmatter = {\n  \"title\": \"SVG Piano part 1\",\n  \"date\": \"2020-03-26T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://stuartmemo.com/qwerty-hancock/qwerty-hancock.png\",\n    \"alt\": \"Herbie Hancock\"\n  }))), mdx(\"p\", null, \"Let\\u2019s talk about (virtual) keyboards:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"They are good to visualize chords as a static image\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u2026and melodies as an animation.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"they are understood by most musicians\")), mdx(\"p\", null, \"I recently made a little npm lib called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/svg-piano\"\n  }), \"svg-piano\"), \".\\nThough there are a number of\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stuartmemo.com/qwerty-hancock/\"\n  }), \"piano\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.kevinqi.com/react-piano/\"\n  }), \"components\"), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/hienpd/svg-piano\"\n  }), \"out there\"), \"\\nmost of them are either incorrectly sized or not hackable enough.\\nTalkin about \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.mathpages.com/home/kmath043.htm\"\n  }), \"correct sizing\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/regginos/piano\"\n  }), \"this one\"), \"\\nis the best i\\u2019ve found so far, but still its not on npm and its generating svg nodes directly, making it not so hackable.\"), mdx(\"p\", null, \"What I wanted to achieve with my \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.npmjs.com/package/svg-piano\"\n  }), \"svg-piano lib\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"npm installable\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"no dependencies\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"minimal boilerplate code\")), mdx(\"h2\", {\n    \"id\": \"usage-with-react\"\n  }, \"Usage with React\"), mdx(\"p\", null, \"The lib comes with the method \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/felixroos/svg-piano/blob/0.3.1/keyboard.js#L174\"\n  }), \"renderSVG\"), \",\\nwhich dumps all needed svg element props into a json, which can be plugged directly to any rendering:\"), mdx(\"p\", null, \"Keyboard.js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from \\\"react\\\"\\nimport { renderSVG } from \\\"svg-piano\\\"\\n\\nexport default function Keyboard({ options }) {\\n  const { svg, children } = renderSVG(options)\\n  return (\\n    <svg {...svg}>\\n      {children.map(({ polygon, circle, text, key }, index) => [\\n        polygon && <polygon {...polygon} key={\\\"p\\\" + index} />,\\n        circle && <circle {...circle} key={\\\"c\\\" + index} />,\\n        text && (\\n          <text {...text} key={\\\"t\\\" + index}>\\n            {text.value}\\n          </text>\\n        ),\\n      ])}\\n    </svg>\\n  )\\n}\\n\")), mdx(\"p\", null, \"The children elements contain:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"polygon: The actual key\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"text: Text label\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"circle: Background for text\")), mdx(\"p\", null, \"Usage:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Keyboard\\n  options={{\\n    range: [\\\"A0\\\", \\\"C8\\\"],\\n    scaleX: 0.5,\\n    scaleY: 0.5,\\n  }}\\n/>\\n\")), mdx(Keyboard, {\n    options: {\n      range: [\"A0\", \"C8\"],\n      scaleX: 0.5,\n      scaleY: 0.5\n    },\n    mdxType: \"Keyboard\"\n  }), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"adding-mouse-events\"\n  }, \"Adding Mouse Events\"), mdx(\"p\", null, \"Let\\u2019s add mouseDown / mouseUp logic, that will fire attack and release events.\"), mdx(\"p\", null, \"This custom hook handles all the mouse stuff:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React, { useState, useEffect } from \\\"react\\\"\\n\\nexport function useMouseDrag({ activate, deactivate }) {\\n  // listen for document mouse up\\n  useEffect(() => {\\n    const handleMouseUp = () => setMouseDown(false)\\n    const handleMouseDown = () => setMouseDown(true)\\n    window.addEventListener(\\\"mouseup\\\", handleMouseUp)\\n    window.addEventListener(\\\"mousedown\\\", handleMouseDown)\\n    return () => {\\n      window.removeEventListener(\\\"mouseup\\\", handleMouseUp)\\n      window.removeEventListener(\\\"mousedown\\\", handleMouseDown)\\n    }\\n  }, [])\\n\\n  const [mouseDown, setMouseDown] = useState(false)\\n\\n  function handleMouseDown() {\\n    setMouseDown(true)\\n    activate(...arguments)\\n  }\\n  function handleMouseEnter() {\\n    if (mouseDown) {\\n      activate(...arguments)\\n    }\\n  }\\n  function handleMouseUp() {\\n    deactivate(...arguments)\\n  }\\n  function handleMouseLeave() {\\n    if (mouseDown) {\\n      deactivate(...arguments)\\n    }\\n  }\\n  return {\\n    handleMouseDown,\\n    handleMouseEnter,\\n    handleMouseUp,\\n    handleMouseLeave,\\n  }\\n}\\n\")), mdx(\"p\", null, \"We can import and use the hook in our Keyboard component, by passing activate and deactivate callbacks:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"export default function Keyboard({ options, onClick, onAttack, onRelease }) {\\n  const active = useRef([])\\n  const [colorized, setColorized] = useState([])\\n\\n  const activate = key => {\\n    if (!colorized.includes(key.notes[0])) {\\n      active.current = [...active.current, key.notes[0]]\\n      onAttack && onAttack(key)\\n    }\\n    setColorized(active.current)\\n  }\\n\\n  const deactivate = key => {\\n    if (colorized.includes(key.notes[0])) {\\n      active.current = active.current.filter(n => n !== key.notes[0])\\n      onRelease && onRelease(key)\\n    }\\n    setColorized(active.current)\\n  }\\n\\n  const {\\n    handleMouseDown,\\n    handleMouseUp,\\n    handleMouseEnter,\\n    handleMouseLeave,\\n  } = useMouseDrag({ activate, deactivate })\\n\\n  const { svg, children } = renderSVG({\\n    ...options,\\n    colorize: [{ keys: colorized, color: \\\"red\\\" }],\\n  })\\n  return (\\n    <svg {...svg}>\\n      {children.map(({ polygon, circle, text, key }, index) => [\\n        polygon && (\\n          <polygon\\n            {...polygon}\\n            key={\\\"p\\\" + index}\\n            onMouseDown={() => handleMouseDown(key)}\\n            onMouseUp={() => handleMouseUp(key)}\\n            onMouseEnter={() => handleMouseEnter(key)}\\n            onMouseLeave={() => handleMouseLeave(key)}\\n            onClick={() => onClick && onClick(key)}\\n          />\\n        ),\\n        circle && <circle {...circle} key={\\\"c\\\" + index} />,\\n        text && (\\n          <text {...text} key={\\\"t\\\" + index}>\\n            {text.value}\\n          </text>\\n        ),\\n      ])}\\n    </svg>\\n  )\\n}\\n\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"I had to useRef as an extra layer to always have the latest active keys. Using state directly did not work for me, but maybe this can be done better.\")), mdx(\"h2\", {\n    \"id\": \"adding-a-synth\"\n  }, \"Adding a Synth\"), mdx(\"p\", null, \"Using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tonejs.github.io/\"\n  }), \"Tone.js\"), \", we now can make the keys playable:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"\\nimport { Synth } from \\\"tone\\\"\\nconst synth = new Synth({ volume: -6 }).toMaster()\\n\\n<Keyboard\\n  options={{range: [\\\"C3\\\", \\\"C5\\\"]}}\\n  onAttack={key => synth?.triggerAttack(key.notes[0])}\\n  onRelease={key => synth?.triggerRelease([key.notes[0]])}\\n/>\\n\")), mdx(Keyboard, {\n    options: {\n      range: [\"C3\", \"C5\"]\n    },\n    onAttack: function onAttack(key) {\n      return synth === null || synth === void 0 ? void 0 : synth.triggerAttack(key.notes[0]);\n    },\n    onRelease: function onRelease(key) {\n      return synth === null || synth === void 0 ? void 0 : synth.triggerRelease([key.notes[0]]);\n    },\n    mdxType: \"Keyboard\"\n  }), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"adding-keyboard-support\"\n  }, \"Adding keyboard support\"), mdx(\"p\", null, \"To control our keyboard from the computer keyboard, lets add another custom hook:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { useEffect } from \\\"react\\\"\\n\\nexport function useKeyEvents({ downHandler, upHandler }) {\\n  useEffect(() => {\\n    window.addEventListener(\\\"keydown\\\", downHandler)\\n    window.addEventListener(\\\"keyup\\\", upHandler)\\n    return () => {\\n      window.removeEventListener(\\\"keydown\\\", downHandler)\\n      window.removeEventListener(\\\"keyup\\\", upHandler)\\n    }\\n  }, [downHandler, upHandler])\\n}\\n\")), mdx(\"p\", null, \"\\u2026 and use it inside Keyboard.js:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// + add keyControl to props\\nuseKeyEvents({\\n  downHandler: e =>\\n    keyControl && keyControl[e.key] && activate({ notes: [keyControl[e.key]] }),\\n  upHandler: e =>\\n    keyControl &&\\n    keyControl[e.key] &&\\n    deactivate({ notes: [keyControl[e.key]] }),\\n})\\n\")), mdx(\"p\", null, \"in action:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<Keyboard\\n  onAttack={key => poly?.triggerAttack(key.notes[0])}\\n  onRelease={key => poly?.triggerRelease([key.notes[0]])}\\n  keyControl={{\\n    a: \\\"C3\\\",\\n    w: \\\"C#3\\\",\\n    s: \\\"D3\\\",\\n    e: \\\"D#3\\\",\\n    d: \\\"E3\\\",\\n    f: \\\"F3\\\",\\n    t: \\\"F#3\\\",\\n    g: \\\"G3\\\",\\n    z: \\\"G#3\\\",\\n    h: \\\"A3\\\",\\n    u: \\\"A#3\\\",\\n    j: \\\"B3\\\",\\n    k: \\\"C4\\\",\\n  }}\\n  options={{\\n    range: [\\\"C3\\\", \\\"C4\\\"],\\n    scaleX: 1.5,\\n    scaleY: 1.5,\\n    labels: {\\n      C3: \\\"A\\\",\\n      \\\"C#3\\\": \\\"W\\\",\\n      D3: \\\"S\\\",\\n      \\\"D#3\\\": \\\"E\\\",\\n      E3: \\\"D\\\",\\n      F3: \\\"F\\\",\\n      \\\"F#3\\\": \\\"T\\\",\\n      G3: \\\"G\\\",\\n      \\\"G#3\\\": \\\"Z\\\",\\n      A3: \\\"H\\\",\\n      \\\"A#3\\\": \\\"U\\\",\\n      B3: \\\"J\\\",\\n      C4: \\\"K\\\",\\n    },\\n  }}\\n/>\\n\")), mdx(\"p\", null, \"Now type:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-txt\"\n  }), \"ffef a afuhf\\n\")), mdx(Keyboard, {\n    onAttack: function onAttack(key) {\n      return poly === null || poly === void 0 ? void 0 : poly.triggerAttack(key.notes[0]);\n    },\n    onRelease: function onRelease(key) {\n      return poly === null || poly === void 0 ? void 0 : poly.triggerRelease([key.notes[0]]);\n    },\n    keyControl: {\n      a: \"C3\",\n      w: \"C#3\",\n      s: \"D3\",\n      e: \"D#3\",\n      d: \"E3\",\n      f: \"F3\",\n      t: \"F#3\",\n      g: \"G3\",\n      z: \"G#3\",\n      h: \"A3\",\n      u: \"A#3\",\n      j: \"B3\",\n      k: \"C4\"\n    },\n    options: {\n      range: [\"C3\", \"C4\"],\n      scaleX: 1.5,\n      scaleY: 1.5,\n      labels: {\n        C3: \"A\",\n        \"C#3\": \"W\",\n        D3: \"S\",\n        \"D#3\": \"E\",\n        E3: \"D\",\n        F3: \"F\",\n        \"F#3\": \"T\",\n        G3: \"G\",\n        \"G#3\": \"Z\",\n        A3: \"H\",\n        \"A#3\": \"U\",\n        B3: \"J\",\n        C4: \"K\"\n      }\n    },\n    mdxType: \"Keyboard\"\n  }), mdx(\"p\", null, \"Thats it for today..\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/svg-piano/","title":"SVG Piano part 1","tags":[],"keywords":[],"date":"March 26, 2020"},"previous":{"__typename":"MdxBlogPost","id":"e82b5b48-ac9f-5dae-aff7-a3d6be8fb1a7","excerpt":"I will write about music and coding here. I have many unordered notes about the combination of both. Many things I have already implementedâ€¦","slug":"/hello/","title":"Hello, let me enter","date":"March 25, 2020"},"next":{"__typename":"MdxBlogPost","id":"8bb5e8c2-38f0-5043-b36e-0dd0e3ce18a1","excerpt":"Chords Let's use the SVG Piano to display chords. My favourite lib for music theory in javascript is  tonal .\nIt comes with a dictionaryâ€¦","slug":"/chords/","title":"SVG Piano part 2","date":"March 27, 2020"}},"pageContext":{"id":"d9b97b82-b5d4-5b61-ab6b-49f9b717860d","previousId":"e82b5b48-ac9f-5dae-aff7-a3d6be8fb1a7","nextId":"8bb5e8c2-38f0-5043-b36e-0dd0e3ce18a1"}}}