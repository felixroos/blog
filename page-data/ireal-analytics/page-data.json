{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/ireal-analytics/","result":{"data":{"site":{"siteMetadata":{"title":"Loophole Letters","social":[{"name":"github","url":"https://github.com/felixroos"},{"name":"GitHub","url":"https://github.com/gatsbyjs"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"40c35d5c-2423-5ffc-9105-af248d82df38","excerpt":"Now that we have a huge dataset of chord changes, we can do some data mining on it. Metadata Rankings As a warmup, let's do a ranking ofâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Analyzing iReal Chord Changes\",\n  \"date\": \"2020-06-14T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Now that we have a huge dataset of chord changes, we can do some data mining on it.\"), mdx(\"h2\", {\n    \"id\": \"metadata-rankings\"\n  }, \"Metadata Rankings\"), mdx(\"p\", null, \"As a warmup, let\\u2019s do a ranking of metadata values. Here are some rankings for the 1350 Jazz Standards set, (but you can paste any url from the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.irealb.com/forums/\"\n  }), \"forum\"), \").\"), mdx(RealRanking, {\n    url: standards,\n    property: \"composer\",\n    mdxType: \"RealRanking\"\n  }), mdx(\"details\", null, mdx(\"summary\", null, \"show relevant code\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"export function countUnique(values) {\\n  return values\\n    .filter((c, i, a) => a.indexOf(c) === i) // filter out duplicates\\n    .map((value) => ({\\n      // count items that have the value\\n      value,\\n      count: values.filter((v) => v === value).length\\n    }));\\n}\\nexport function topValues(songs, property) {\\n  return countUnique(songs.map((song) => song[property]))\\n    .sort((a, b) => b.count - a.count) // sort by count\\n    .slice(0, 20); // only use top 20\\n}\\n\"))), mdx(\"br\", null), mdx(\"h2\", {\n    \"id\": \"most-common-chords\"\n  }, \"Most Common Chords\"), mdx(\"p\", null, \"To find out which chords are the most common, we can\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"collect all chords of all songs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"count the occurrence of each chord, either relative (without root) or absolute (with root)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"calculate the \\u201Cregularity\\u201D with count/totalChords\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"for each song, we can then calculate the average regularity of all chords to know how common it is in general\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"you can click chords to show only songs who include the selected chords\")), mdx(RealChords, {\n    url: standards,\n    mdxType: \"RealChords\"\n  }), mdx(\"h3\", {\n    \"id\": \"interpretation\"\n  }, \"Interpretation\"), mdx(\"p\", null, \"And the gold medal for the most boring chords goes to\\u2026 \\u201CSunshine of your Love by Cream\\u201D (that does not mean the song is bad in general).\"), mdx(\"p\", null, \"The songs at the top of the list are the ones that contain only the most common chords.\\nIf you learn one of those, you will automatically learn many other songs too.\\nThe songs at the bottom of the list contain only exotic, unusual chords, so learning one of those will not be as effective.\"), mdx(\"p\", null, \"Note that this is still a little bit too specific, for example the algorithm treats -9 chords different from -7 chords, but in (jazz) practice, you will mostly play -9 anyway.\\nThe accuracy could be improved by adding a layer of abstraction that groups together chords that are more or less interchangeable.\"), mdx(\"h2\", {\n    \"id\": \"most-common-chord-transitions\"\n  }, \"Most Common Chord Transitions\"), mdx(\"p\", null, \"We can find out the most common chord transitions by looking at each single transition between two chords.\\nEssentially, a chord transition consists of:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"from symbol to symbol\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"interval (relative) or from root to root (absolute)\")), mdx(\"p\", null, \"So if we map each transition to a string of the format:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"`${from.symbol}.${to.symbol}.${interval}`;\\n\")), mdx(\"p\", null, \"\\u2026 and then count all unique values, we can find out which chord progressions are the most used.\\nLet\\u2019s try it out with the pop 400 playlist:\"), mdx(RealTransitions, {\n    url: pop400,\n    mdxType: \"RealTransitions\"\n  }), mdx(\"details\", null, mdx(\"summary\", null, \"show relevant code\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function getChord(_chord) {\\n  const [chord, bass] = (_chord || '').split('/');\\n  const symbol = chord.replace(/[A-G][b#]*/g, '');\\n  return {\\n    root: chord.replace(symbol, ''),\\n    symbol: symbol || 'M',\\n    bass\\n  };\\n}\\nfunction getTransitions(songs, relative = true, semitones = false) {\\n  let changes = [];\\n  songs.forEach((song) => {\\n    const transitions = song.music.measures\\n      .flat() // flatten measures as we don't care about rhythm\\n      .map((chord, index, chords) => {\\n        const [from, to] = [\\n          chord || '0',\\n          chords[(index + 1) % chords.length] || '0'\\n        ].map((c) => getChord(c)); // parse chords\\n        if (relative) {\\n          // relative does only care for interval\\n          let interval = Interval.distance(from.root, to.root);\\n          if (semitones) {\\n            // don't care about enharmonic equivalent intervals\\n            interval = Interval.semitones(interval) + '';\\n          }\\n          return `${from.symbol}.${to.symbol}.${interval}`; // format to id string\\n        }\\n        return `${from.root}.${from.symbol}.${to.root}.${to.symbol}`;\\n      });\\n    changes = changes.concat(transitions); // concat song transitions\\n  });\\n  changes = changes.filter((change) => {\\n    // filter changes where nothing changes..\\n    const [fromSymbol, toSymbol, interval] = change.split('.');\\n    return fromSymbol !== toSymbol || interval !== '1P';\\n  });\\n  // count unique and sort by count\\n  return countUnique(changes).sort((a, b) => b.count - a.count);\\n}\\n\"))), mdx(\"br\", null), mdx(\"p\", null, \"Note that we are running the script on the music.measures which are not 100% correct for all tunes (see last post), but it should be accurate enough to find out the most common chord progressions.\"), mdx(\"h3\", {\n    \"id\": \"interpretation-1\"\n  }, \"Interpretation\"), mdx(\"p\", null, \"And the gold medal for the most boring chords goes to: Massachusetts by the Bee Gees.\"), mdx(\"p\", null, \"Most of this is no surprise, but let\\u2019s try to describe the most common transitions for two big pop and jazz playlists:\"), mdx(Grid, {\n    spacing: 0,\n    container: true,\n    style: {\n      width: 800\n    },\n    mdxType: \"Grid\"\n  }, mdx(Grid, {\n    item: true,\n    xs: 6,\n    mdxType: \"Grid\"\n  }, mdx(\"strong\", null, mdx(\"a\", {\n    href: \"https://www.irealb.com/forums/showthread.php?8483-Pop-400\"\n  }, \"Pop 400\")), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", null, mdx(\"strong\", null, \"M.M.5P\"), \" I to V triads\"), mdx(\"li\", null, mdx(\"strong\", null, \"M.M.4P\"), \" I to IV triads\"), mdx(\"li\", null, mdx(\"strong\", null, \"7.M.4P\"), \" V7 to I\"), mdx(\"li\", null, mdx(\"strong\", null, \"M.M.2M\"), \" IV to V with triads\"), mdx(\"li\", null, mdx(\"strong\", null, \"M.-.2M\"), \" V to VI-\"), mdx(\"li\", null, mdx(\"strong\", null, \"M.M.7m\"), \" I to bVII in mixolydian\"), mdx(\"li\", null, mdx(\"strong\", null, \"-.M.7m\"), \" I- to bVII\"), mdx(\"li\", null, mdx(\"strong\", null, \"M.7.2M\"), \" IV to V7 in major\"), mdx(\"li\", null, mdx(\"strong\", null, \"-7.-7.4P\"), \" I- to IV- or III- to VI-\"), mdx(\"li\", null, mdx(\"strong\", null, \"M.-.6M\"), \" I to VI-\"), mdx(\"li\", null, mdx(\"strong\", null, \"-.M.6M\"), \" I to VI-\"), mdx(\"li\", null, mdx(\"strong\", null, \"-7.7.4P\"), \" II-7 V7\"), mdx(\"li\", null, mdx(\"strong\", null, \"7.-.4P\"), \" V7 to I-\"), mdx(\"li\", null, mdx(\"strong\", null, \"sus.M.1P\"), \" suspended I\"))), mdx(Grid, {\n    item: true,\n    xs: 6,\n    mdxType: \"Grid\"\n  }, mdx(\"strong\", null, mdx(\"a\", {\n    href: \"https://www.irealb.com/forums/showthread.php?12753-Jazz-1350-Standards\"\n  }, \"Jazz 1350\")), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", null, mdx(\"strong\", null, \"-7.7.4P\"), \" II- V\"), mdx(\"li\", null, mdx(\"strong\", null, \"7.^7.4P\"), \" V7 I^7, V/IV^7\"), mdx(\"li\", null, mdx(\"strong\", null, \"7.7.4P\"), \" dominant in fourths\"), mdx(\"li\", null, mdx(\"strong\", null, \"7.-7.4P\"), \" V/II-7, V/III-7, V/VI-7\"), mdx(\"li\", null, mdx(\"strong\", null, \"7.6.4P\"), \" V7 I6\"), mdx(\"li\", null, mdx(\"strong\", null, \"-7.-7.4P\"), \" I- IV-, III- VI-, VI- II-\"), mdx(\"li\", null, mdx(\"strong\", null, \"7.-7.5P\"), \" V7 II- ?!\"), mdx(\"li\", null, mdx(\"strong\", null, \"7.-7.1P\"), \" V/V7 II-7\"), mdx(\"li\", null, mdx(\"strong\", null, \"^7.-7.6M\"), \" I^7 VI-7\"), mdx(\"li\", null, mdx(\"strong\", null, \"^7.-7.2M\"), \" I^7 II-7\"), mdx(\"li\", null, mdx(\"strong\", null, \"h7.7b9.4P\"), \" II-7b5 V7b9\"), mdx(\"li\", null, mdx(\"strong\", null, \"7b9.-7.4P\"), \" V7b9 I-7\"), mdx(\"li\", null, mdx(\"strong\", null, \"7.7.7M\"), \" chromatic dominant\"), mdx(\"li\", null, mdx(\"strong\", null, \"7.-7.6M\"), \" V7 III-7\")))), mdx(\"p\", null, \"Note that those transitions could also describe other degree transitions, but I just picked the most common ones (which should make up the greatest part).\"), mdx(\"p\", null, \"If you sat down at a piano and just learned the top 10 of each, you would be able to learn many songs really quickly..\"), mdx(\"h2\", {\n    \"id\": \"chord-diversity\"\n  }, \"Chord Diversity\"), mdx(\"p\", null, \"Another song feature that is interesting to determine how difficult it is to learn is chord diversity.\"), mdx(RealDiversity, {\n    url: pop400,\n    mdxType: \"RealDiversity\"\n  }), mdx(\"br\", null), mdx(\"h2\", {\n    \"id\": \"most-difficult-songs\"\n  }, \"Most Difficult Songs\"), mdx(\"p\", null, \"What makes a song\\u2019s changes difficult? I would say:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"uncommon chords\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"uncommon chord transitions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"high diversity\")), mdx(\"p\", null, \"and of course, the opposite is true for the easiest songs..\"), mdx(\"h3\", {\n    \"id\": \"next-steps\"\n  }, \"Next Steps\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Find good tune learning path by including all the features\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Generate Markov Models for chord transitions to generate authentic chord progressions\")));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/ireal-analytics/","title":"Analyzing iReal Chord Changes","tags":[],"keywords":[],"date":"June 14, 2020","image":null,"imageAlt":null,"socialImage":null},"previous":{"__typename":"MdxBlogPost","id":"77bd7c6e-e55b-57b6-bae4-7c563ff0388b","excerpt":"In the previous posts, my focus was the implementation of rhythmical, which is basically a programmable sequencer.\nIf we had some chordâ€¦","slug":"/ireal-changes/","title":"Parsing iReal Chord Changes","date":"June 13, 2020"},"next":{"__typename":"MdxBlogPost","id":"cbdf3ab2-bea0-56d9-8ea8-28dcdc5ca6a0","excerpt":"Caution: Playing the examples will load ~60MB of samples. Make sure you are on Wifi! To get away from cheap synth sounds, let's implementâ€¦","slug":"/sampler-instruments/","title":"Using Sampled Instruments with Tone.js","date":"July 08, 2020"}},"pageContext":{"id":"40c35d5c-2423-5ffc-9105-af248d82df38","previousId":"77bd7c6e-e55b-57b6-bae4-7c563ff0388b","nextId":"cbdf3ab2-bea0-56d9-8ea8-28dcdc5ca6a0"}},"staticQueryHashes":["386998304","4198970465","764694655"]}