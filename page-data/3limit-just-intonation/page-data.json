{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/3limit-just-intonation/","result":{"data":{"site":{"siteMetadata":{"title":"Loophole Letters","social":[{"name":"github","url":"https://github.com/felixroos"},{"name":"GitHub","url":"https://github.com/gatsbyjs"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"f0803083-1135-53d7-aa24-b54a926e9201","excerpt":"After building a foundation of understanding pure intervals in the last post, we will now look at different ways of building tuning systemsâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"3 Limit Just Intonation\",\n  \"date\": \"2020-04-26T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"After building a foundation of understanding pure intervals in the last post, we will now look at different ways of building tuning systems with them.\\nThis post focuses on the most simple interval: fifths.\"), mdx(\"h2\", {\n    \"id\": \"stacking-fifths\"\n  }, \"Stacking Fifths\"), mdx(\"p\", null, \"In the last post, we were stacking octave reduced fifths on top of each other:\"), mdx(Monochord, {\n    value: 1,\n    invert: true,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{3}{2}^{0}*2^0\"), mdx(Monochord, {\n    value: 8 / 9,\n    invert: true,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{3}{2}^{2}*2^{-1}\"), mdx(Monochord, {\n    value: 64 / 81,\n    invert: true,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{3}{2}^{4}*2^{-2}\"), mdx(Monochord, {\n    value: 2 / 3,\n    invert: true,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{3}{2}^{1}*2^0\"), mdx(Monochord, {\n    value: 16 / 27,\n    invert: true,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{3}{2}^{3} * 2^{-1}\"), mdx(\"p\", null, \"Note that the ratios are frequency ratios instead of length ratios (as they were in the last post).\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Explanation\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The intervals are generated by powers of 3/2, which means we are stacking fifths ontop of each other\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The multiplication by powers of 2 moves the ratios between 1 and 2:\")), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"1 \\\\leq \\\\frac{3}{2}^{a} * 2^{b} \\\\geq 2\"), mdx(\"br\", null), mdx(\"br\", null), mdx(\"h3\", {\n    \"id\": \"simplification\"\n  }, \"Simplification\"), mdx(\"p\", null, \"To clean up the calculation, we could pull out the /2 and move it to the powers of 2:\"), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{3}{2}^{a} * 2^{b} = 3^{a} * 2^{b-a}\"), mdx(\"p\", null, \"To reflect that in our example, we can apply the right side of the equation above:\"), mdx(Monochord, {\n    value: 1,\n    invert: true,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"3^0*2^{0}\"), mdx(Monochord, {\n    value: 8 / 9,\n    invert: true,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"3^2*2^{-3}\"), mdx(Monochord, {\n    value: 64 / 81,\n    invert: true,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"3^4*2^{-6}\"), mdx(Monochord, {\n    value: 2 / 3,\n    invert: true,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"3^1*2^{-1}\"), mdx(Monochord, {\n    value: 16 / 27,\n    invert: true,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"3^3 * 2^{-4}\"), mdx(\"br\", null), mdx(\"br\", null), mdx(\"h2\", {\n    \"id\": \"n-limit\"\n  }, \"N-Limit\"), mdx(\"p\", null, \"The above simplification aimed to pave the way for a more abstract understanding of stacking numbers in a tuning system.\\nThis is where N-Limit Tuning comes in. N-Limit Tuning generates ratios by multiplying powers of natural numbers up to N.\"), mdx(\"p\", null, \"For example, 3 Limit ratios can be calculated with:\", \" \", mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"R_{3} = 2^{a} * 3^{b}\")), mdx(\"p\", null, \"And 5 Limit ratios: \", mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"R_{5} = 2^{a} * 3^{b} * 5^{c}\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"What about the 4?\")), mdx(\"p\", null, \"We can skip the 4 because it is not a prime number, thus factorizable with lower primes.\"), mdx(\"h3\", {\n    \"id\": \"why-are-we-doing-this-again\"\n  }, \"Why are we doing this again?\"), mdx(\"p\", null, \"Let\\u2019s forget all the mathematics and just focus on why this is even a good idea.\\nWhat does it mean to power 3 (or any other prime number)? To understand it, we can think of the number 3 as the 3rd partial in the harmonic series, which is in musical terms an octave + a fifth.\\nIf we multiply this 3 with any fundamental frequency, what we get is the frequency that is an octave and a fifth higher. If we multiply that new frequency again with 3, we get one octave + a fifth more and so on.\"), mdx(\"p\", null, \"So essentially, we are building harmonics of harmonics. This will lead to pitches that have many harmonics in common, which results in a harmonic relationship between them, thats what we want.\"), mdx(\"p\", null, \"Of course those frequencies will quickly get really high, which is why we utilize octave reduction.\"), mdx(\"h2\", {\n    \"id\": \"3-limit-tuning\"\n  }, \"3 Limit Tuning\"), mdx(\"p\", null, \"Enough of the theoretical blabla, let\\u2019s make some \\u201Cmusic\\u201D:\"), mdx(State, {\n    initial: {\n      power: 0\n    },\n    mdxType: \"State\"\n  }, function (_ref2) {\n    var state = _ref2.state,\n        setState = _ref2.setState;\n\n    function calculate(power) {\n      var factor = Math.pow(3, power);\n      var exp = Math.ceil(Math.log(1 / factor) / Math.log(2));\n      var value = Math.pow(2, exp) * factor;\n\n      var _Fraction$toFraction$ = new Fraction(value).toFraction().split(\"/\"),\n          _Fraction$toFraction$2 = _slicedToArray(_Fraction$toFraction$, 2),\n          top = _Fraction$toFraction$2[0],\n          bottom = _Fraction$toFraction$2[1];\n\n      return {\n        factor: factor,\n        exp: exp,\n        value: value,\n        top: top,\n        bottom: bottom\n      };\n    }\n\n    var _calculate = calculate(state.power),\n        factor = _calculate.factor,\n        exp = _calculate.exp,\n        value = _calculate.value,\n        top = _calculate.top,\n        bottom = _calculate.bottom;\n\n    return mdx(\"div\", null, mdx(InlineMath, {\n      mdxType: \"InlineMath\"\n    }, \"b = \".concat(state.power)), mdx(\"br\", null), mdx(Slider, {\n      min: -7,\n      max: 7,\n      marks: true,\n      track: false,\n      value: state.power,\n      onMouseDown: function onMouseDown() {\n        return harp.triggerAttackRelease(value * 440, 1);\n      },\n      onChange: function onChange(e, v) {\n        if (v !== state.power) {\n          var _calculate2 = calculate(v),\n              _value = _calculate2.value;\n\n          harp.triggerAttackRelease(_value * 440, 1);\n          setState({\n            power: v\n          });\n        }\n      },\n      mdxType: \"Slider\"\n    }), \" \", mdx(\"br\", null), mdx(InlineMath, {\n      mdxType: \"InlineMath\"\n    }, \"R_f = 2^{a} * 3^{b} = 2^{\".concat(exp, \"} * 3^{\").concat(state.power, \"} = \\\\frac{\").concat(top, \"}{\").concat(bottom || 1, \"}\")), mdx(\"br\", null), mdx(InlineMath, {\n      mdxType: \"InlineMath\"\n    }, \"a = \\\\lceil\\\\log_2 3^{-b}\\\\rceil = \\\\lceil\\\\log_2 {3^{\".concat(state.power * -1, \"}}\\\\rceil = \").concat(exp)), mdx(\"br\", null), mdx(\"br\", null), mdx(Monochord, {\n      value: 1 / value,\n      amplitude: 1,\n      invert: false,\n      base: 440,\n      mdxType: \"Monochord\"\n    }), mdx(InlineMath, {\n      mdxType: \"InlineMath\"\n    }, \"R_l = \\\\frac{1}{R_f} = \\\\frac{\".concat(bottom || 1, \"}{\").concat(top, \"}\")));\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Here we are generating ratios with a limit of 3, which is why why can call it 3 limit tuning.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The slider controls the exponent of the 3 (= \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"b\"), \"), while the exponent of the 2 (= \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"a\"), \") is calculated automatically to stay in one octave\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can ignore the formula for \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"a\"), \" if you like, but if you are curious, you can see the derivation below (automatic octave reduction)\")), mdx(\"h3\", {\n    \"id\": \"tuning-circle\"\n  }, \"Tuning Circle\"), mdx(\"p\", null, \"Now we can generate a whole tuning system, by picking a range of ratios. We can visualize their position in the octave in a circular fashion:\"), mdx(State, {\n    initial: {\n      toggle: false,\n      interval: 1,\n      focus: undefined,\n      pitches: 5,\n      rotate: 0,\n      preset: -1 // sort: false\n\n    },\n    mdxType: \"State\"\n  }, function (_ref3) {\n    var state = _ref3.state,\n        setState = _ref3.setState;\n    var _ref4 = [state.rotate, state.rotate + state.pitches - 1],\n        from = _ref4[0],\n        to = _ref4[1];\n    var ratios = generate(3, state.pitches + state.rotate, state.pitches, 2);\n    var range = [-28, 28];\n    var base = 440;\n    var selectedPreset = state.preset >= 0 ? state.preset : undefined;\n    var presets = [[0, 5, \"Major Pentatonic\"], [-3, 5, \"Minor Pentatonic\"], [0, 7, \"Lydian\"], [-1, 7, \"Ionian\"], [-2, 7, \"Mixolydian\"], [-3, 7, \"Dorian\"], [-4, 7, \"Aeolian\"], [-5, 7, \"Phrygian\"], [-6, 7, \"Locrian\"], [-5, 12, \"12 Notes centered\"], [-26, 53, \"53 Notes centered\"]];\n    return mdx(\"div\", null, mdx(InlineMath, {\n      mdxType: \"InlineMath\"\n    }, \"3^{\".concat(from, \"} - 3^{\").concat(to, \"}\")), mdx(\"br\", null), mdx(ConnectedCircle, {\n      r: 100,\n      nodeRadius: 20,\n      nodes: ratios.map(function (_ref5, id) {\n        var ratio = _ref5.ratio,\n            power = _ref5.power;\n        return {\n          id: power,\n          label: power,\n          value: cents(ratio) / 1200,\n          ratio: ratio,\n          distance: 140,\n          fill: frequencyColor(base * ratio)\n        };\n      }),\n      links: [],\n      onClick: function onClick(_ref6) {\n        var node = _ref6.node;\n\n        if (node) {\n          harp.triggerAttackRelease(node.ratio * base, 1);\n        }\n      },\n      mdxType: \"ConnectedCircle\"\n    }), mdx(\"br\", null), mdx(\"strong\", null, \"Presets: \"), mdx(\"select\", {\n      value: selectedPreset,\n      onChange: function onChange(e) {\n        var _presets$e$target$val = _slicedToArray(presets[e.target.value], 2),\n            rotate = _presets$e$target$val[0],\n            pitches = _presets$e$target$val[1];\n\n        setState({\n          rotate: rotate,\n          pitches: pitches\n        });\n      }\n    }, presets.map(function (_ref7, i) {\n      var _ref8 = _slicedToArray(_ref7, 3),\n          rotate = _ref8[0],\n          pitches = _ref8[1],\n          title = _ref8[2];\n\n      return mdx(\"option\", {\n        key: i,\n        value: i\n      }, title);\n    })), mdx(\"br\", null), state.pitches, \" pitch\", state.pitches !== 1 ? \"es\" : \"\", mdx(\"br\", null), mdx(Slider, {\n      marks: true,\n      track: false,\n      min: 2,\n      max: 60,\n      value: state.pitches,\n      onChange: function onChange(e, v) {\n        return v !== state.pitches && setState({\n          pitches: v\n        });\n      },\n      mdxType: \"Slider\"\n    }), mdx(\"br\", null), \"rotate by \", state.rotate, \" power\", Math.abs(state.rotate) !== 1 ? \"s\" : \"\", mdx(\"br\", null), mdx(Slider, {\n      marks: true,\n      track: false,\n      min: -state.pitches + 1,\n      max: 0,\n      value: state.rotate,\n      onChange: function onChange(e, v) {\n        return v !== state.rotate && setState({\n          rotate: v\n        });\n      },\n      mdxType: \"Slider\"\n    }), mdx(\"h3\", null, \"Tuning Table\"), mdx(\"p\", null, \"Let's look at the underlying data of the graphic above in a so called Tuning Table:\"), mdx(\"table\", null, mdx(\"tr\", null, mdx(\"th\", null, \"position\"), mdx(\"th\", null, \"powers\"), mdx(\"th\", null, \"ratio\"), mdx(\"th\", null, \"cents\"), mdx(\"th\", null, \"listen\")), ratios.map(function (_ref9, i) {\n      var ratio = _ref9.ratio,\n          power = _ref9.power;\n      var factor = Math.pow(3, power);\n\n      var _Fraction$toFraction$3 = new Fraction(ratio).toFraction().split(\"/\"),\n          _Fraction$toFraction$4 = _slicedToArray(_Fraction$toFraction$3, 2),\n          top = _Fraction$toFraction$4[0],\n          bottom = _Fraction$toFraction$4[1];\n\n      var exp = Math.ceil(Math.log(1 / factor) / Math.log(2));\n      return mdx(\"tr\", null, mdx(\"td\", null, i), mdx(\"td\", null, mdx(InlineMath, {\n        key: i,\n        mdxType: \"InlineMath\"\n      }, \"3^{\".concat(power, \"} * 2^{\").concat(exp, \"}\"))), mdx(\"td\", null, mdx(InlineMath, {\n        key: i,\n        mdxType: \"InlineMath\"\n      }, \"\\\\frac{\".concat(top, \"}{\").concat(bottom || 1, \"}\"))), mdx(\"td\", null, Math.round(cents(ratio))), mdx(\"td\", null, mdx(\"button\", {\n        onClick: function onClick() {\n          return harp.triggerAttackRelease(ratio * base, 1);\n        }\n      }, \"Play\")));\n    })));\n  }), mdx(\"p\", null, \"The tuning above is mostly known in the west from pythagoras, also called the pythagorean tuning.\\nAlthough pythagoras was not the first who invented that type of tuning, as we know now, see Sh\\xED-\\xE8r-l\\u01DC for an earlier variant.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Observations\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"At 12 pitches, the fractions seem to reach a point of saturation, where all pitches are more or less equidistant\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The 13th pitch is really close to the first\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The next \\u201Cpoint of saturation\\u201D is not reached until 53 pitches are generated\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"By rotation, we can generate all the greek modes + pentatonics\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Rotating left will darken the scale (more subharmonic partials), while rotating right will brighten the scale (more harmonic partials)\")), mdx(\"p\", null, \"Here we see the main reason for why western music uses a 12 note tuning system!\"), mdx(\"h2\", {\n    \"id\": \"the-pythagorean-comma\"\n  }, \"The Pythagorean Comma\"), mdx(\"p\", null, \"This 12 note system is only almost perfect. The problem: if we stack another fifth ontop of the 12th one, the resulting pitch is a little bit too high than it should be.\\nThe system would be perfect if the 13ths fifth would end up being the fundamental ratio again. But this is mathematically impossible:\"), mdx(BlockMath, {\n    mdxType: \"BlockMath\"\n  }, \"2^{-19} * 3^{12} = \\\\frac{531441}{524288} \\\\approx 1.0136432 \\\\neq 1\"), mdx(\"p\", null, \"or put differently, using fifths:\"), mdx(BlockMath, {\n    mdxType: \"BlockMath\"\n  }, \"{(\\\\frac{3}{2})}^{12} = \\\\frac{531441}{4096} \\\\approx 129.7463 \\\\neq 2^7 = 128\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Explanation\"), \": If we stack 12 fifths, we dont land exactly 7 octaves higher, but slightly off.\\nIf we divide those 7 octaves to get the difference, we come to the same result as above:\"), mdx(BlockMath, {\n    mdxType: \"BlockMath\"\n  }, \"R_{pc} = {(\\\\frac{3}{2})}^{12} : 2^7 = \\\\frac{531441}{524288} \\\\approx 1.0136432\"), mdx(\"p\", null, \"This little \\u201Cerror\\u201D is called the pythagorean comma.\"), mdx(\"p\", null, \"We could try to correct that comma, by subtracting 1/12 of it from each consecutive fifth. But this will be a topic for another post,\\nas this is a step away from Just Intonation to Equal Temperment.\"), mdx(\"h2\", {\n    \"id\": \"automatic-octave-reduction\"\n  }, \"Automatic Octave reduction\"), mdx(\"p\", null, \"In the calculations above, the exponent of the factor 2 was used to move the resulting ratio between 1 and 2 (= inside one octave).\"), mdx(\"h4\", {\n    \"id\": \"recursive-solution\"\n  }, \"Recursive Solution\"), mdx(\"p\", null, \"An easy and expressive way to solve this is using a recursive function:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"export function clamp(ratio) {\\n  if (ratio > 2) {\\n    return clamp(ratio / 2)\\n  }\\n  if (ratio < 1) {\\n    return clamp(ratio * 2)\\n  }\\n  return ratio\\n}\\n\")), mdx(\"p\", null, \"Here, we are just dividing or multiplying by 2 until the number sits between 1 and 2.\"), mdx(\"h3\", {\n    \"id\": \"mathematical-solution\"\n  }, \"Mathematical Solution\"), mdx(\"p\", null, \"To make your inner mathematician proud, lets now try an algebraic \\u201Cproof\\u201D and find a function that applies octave reduction.\"), mdx(\"p\", null, \"The goal of octave reduction is to multiply a certain ratio R with powers of 2, until it is between 1 and 2.\\nWith that in mind, we can come up with a range of numbers that can be used as exponents of 2:\"), mdx(BlockMath, {\n    mdxType: \"BlockMath\"\n  }, \"1 \\\\leq R * 2^{x} \\\\geq 2\"), mdx(BlockMath, {\n    mdxType: \"BlockMath\"\n  }, \"\\\\frac{1}{R} \\\\leq 2^{x} \\\\geq \\\\frac{2}{R}\"), mdx(BlockMath, {\n    mdxType: \"BlockMath\"\n  }, \"\\\\log_2 ({\\\\frac{1}{R}}) \\\\leq x \\\\geq \\\\log_2 ({\\\\frac{2}{R}})\"), mdx(\"p\", null, \"So x is inside:\"), mdx(BlockMath, {\n    mdxType: \"BlockMath\"\n  }, \"[\\\\log_2 ({\\\\frac{1}{R}}), \\\\log_2 ({\\\\frac{2}{R}})]\"), mdx(\"p\", null, \"Example:\"), mdx(BlockMath, {\n    mdxType: \"BlockMath\"\n  }, \"R = 3^{4}\"), mdx(BlockMath, {\n    mdxType: \"BlockMath\"\n  }, \"[\\\\log_2 ({\\\\frac{1}{3^{4}}}), \\\\log_2 ({\\\\frac{2}{3^{4}}})] = [-6.34, -5.34]\"), mdx(\"p\", null, \"As we want a whole number exponent, we have -6 as the single solution.\"), mdx(\"h4\", {\n    \"id\": \"simplification-1\"\n  }, \"Simplification\"), mdx(\"p\", null, \"As powers of 3 grow faster than powers of 2, there will always be just one solution inside the interval.\\nSo for all bases above 2 we can simplify this by rounding up the first / rounding down the second interval bound. As the first bound is more compact, our solution will be:\"), mdx(BlockMath, {\n    mdxType: \"BlockMath\"\n  }, \"\\\\lceil\\\\log_2 ({R^{-1}})\\\\rceil\"), mdx(\"p\", null, \"(\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Those brackets mean rounding up\"), \")\"), mdx(\"h4\", {\n    \"id\": \"disclaimer\"\n  }, \"Disclaimer\"), mdx(\"p\", null, \"As I am not a real mathematician, this proof may lack some formal finesse, but the point should be clear.\"), mdx(\"h3\", {\n    \"id\": \"more\"\n  }, \"More\"), mdx(\"p\", null, \"Now that\\u2019s it for today. We will look at 5-limit tuning and equal temperament in the next posts.\\nHere are some more or less related links:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.xen.wiki/w/Just_intonation\"\n  }, \"https://en.xen.wiki/w/Just_intonation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://en.wikipedia.org/wiki/Just_intonation\"\n  }, \"https://en.wikipedia.org/wiki/Just_intonation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=cyW5z-M2yzw\"\n  }, \"https://www.youtube.com/watch?v=cyW5z-M2yzw\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=IT9CPoe5LnM\"\n  }, \"https://www.youtube.com/watch?v=IT9CPoe5LnM\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=1Hqm0dYKUx4\"\n  }, \"https://www.youtube.com/watch?v=1Hqm0dYKUx4\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://www.garygarrett.me/?page_id=1922\"\n  }, \"http://www.garygarrett.me/?page_id=1922\"))));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/3limit-just-intonation/","title":"3 Limit Just Intonation","tags":[],"keywords":[],"date":"April 26, 2020","image":null,"imageAlt":null,"socialImage":null},"previous":{"__typename":"MdxBlogPost","id":"0f840e45-c3a8-513f-a9a4-3534990868c4","excerpt":"This article is the first of a series about Just Intonation. Using pure (or just) intervals to build musical tuning systems is called \"Justâ€¦","slug":"/intervals/","title":"Pure Intervals","date":"April 22, 2020"},"next":{"__typename":"MdxBlogPost","id":"19ad2e2d-f154-52fb-b365-9624b52c2760","excerpt":"As this is the third post of a series of a series about Just Intonation, let's talk about thirds. Stacking Thirds Let's start by stackingâ€¦","slug":"/5limit-just-intonation/","title":"5 Limit Just Intonation","date":"May 02, 2020"}},"pageContext":{"id":"f0803083-1135-53d7-aa24-b54a926e9201","previousId":"0f840e45-c3a8-513f-a9a4-3534990868c4","nextId":"19ad2e2d-f154-52fb-b365-9624b52c2760"}},"staticQueryHashes":["386998304","4198970465","764694655"]}