{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/5limit-just-intonation/","result":{"data":{"site":{"siteMetadata":{"title":"Loophole Letters","social":[{"name":"github","url":"https://github.com/felixroos"},{"name":"GitHub","url":"https://github.com/gatsbyjs"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"19ad2e2d-f154-52fb-b365-9624b52c2760","excerpt":"As this is the third post of a series of a series about Just Intonation, let's talk about thirds. Stacking Thirds Let's start by stackingâ€¦","body":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _Tone = Tone,\n    PolySynth = _Tone.PolySynth,\n    Synth = _Tone.Synth;\nvar harp = canUseDOM() && new PolySynth(6, Synth, {\n  volume: -16,\n  envelope: {\n    attack: 0.01,\n    decay: 2,\n    sustain: 0,\n    release: 0.1\n  },\n  oscillator: {\n    type: \"fmtriangle\"\n  }\n}).toMaster();\nvar _frontmatter = {\n  \"title\": \"5 Limit Just Intonation\",\n  \"date\": \"2020-05-02T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"As this is the third post of a series of a series about Just Intonation, let\\u2019s talk about thirds.\"), mdx(\"h2\", {\n    \"id\": \"stacking-thirds\"\n  }, \"Stacking Thirds\"), mdx(\"p\", null, \"Let\\u2019s start by stacking major thirds on top of each other. The most simple ratio that represents a major third is 5/4:\"), mdx(Monochord, {\n    value: 1,\n    invert: true,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"5^{0}*2^{0}\"), mdx(Monochord, {\n    value: 4 / 5,\n    invert: true,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"5^{1}*2^{-2}\"), mdx(Monochord, {\n    value: 16 / 25,\n    invert: true,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"5^{2}*2^{-4}\"), mdx(Monochord, {\n    value: 64 / 125,\n    invert: true,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"5^{3}*2^{-6}\"), mdx(Monochord, {\n    value: 256 / 625,\n    invert: true,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"5^{4}*2^{-8}\"), mdx(Monochord, {\n    value: 1024 / 3125,\n    invert: true,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"5^{5}*2^{-10}\"), mdx(Monochord, {\n    value: 4096 / 15625,\n    invert: true,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"5^{6}*2^{-12}\"), mdx(\"p\", null, \"Note that the ratios are frequency ratios instead of length ratios.\"), mdx(\"p\", null, \"Like in the last post, we are multiplying powers of harmonic partials, in this case 5 and 2, which is the same powering thirds:\"), mdx(BlockMath, {\n    mdxType: \"BlockMath\"\n  }, \"5^{n} * 2^{-2n} = (\\\\frac{5}{4})^{n}\"), mdx(\"p\", null, \"I prefer the combination of powers of natural numbers, as this expresses more clearly what we are doing here: combining harmonic partials.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Observation\"), \":\"), mdx(\"p\", null, \"We can clearly see and hear a pattern: There are 3 distinct pitches, which repeat in a detuned way.\\nOn strings 4 and 7, we arrive at a pitches that are really close to octaves of the fundamental frequency.\"), mdx(BlockMath, {\n    mdxType: \"BlockMath\"\n  }, \"\\\\frac{1}{1} \\\\approx \\\\frac{125}{64} * 2^{-1} \\\\approx \\\\frac{15625}{4096} * 2^{-2}\"), mdx(\"p\", null, \"This makes sense if we compare that to standard western tuning, where 3 major thirds fit inside one octave.\"), mdx(\"h3\", {\n    \"id\": \"diesis\"\n  }, \"Diesis\"), mdx(\"p\", null, \"This little \\u201Cerror\\u201D between 3 stacked thirds and 1 octave is called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Diesis\"\n  }), \"Diesis\"), \":\"), mdx(BlockMath, {\n    mdxType: \"BlockMath\"\n  }, \"\\\\frac{125}{64} : 2 = \\\\frac{125}{128}\"), mdx(\"p\", null, \"This is similar to the pythagorean comma, which is the little \\u201Cerror\\u201D between 12 stacked fifths and 7 octaves (see last post).\"), mdx(\"h2\", {\n    \"id\": \"5-limit-tuning\"\n  }, \"5 Limit Tuning\"), mdx(\"p\", null, \"Now that we have a little knowledge of thirds, we can look at 5 limit tuning, which combines pure fifths and thirds (powers of 3 and powers of 5) to generate ratios.\\nThis means that for each number of fifths, we can add any number of thirds. As a formula, this means:\"), mdx(BlockMath, {\n    mdxType: \"BlockMath\"\n  }, \"R_{5} = 2^{a} * 3^{b} * 5^{c}\"), mdx(\"p\", null, \"Like in the last post, we will use octave reduction to automatically set the exponent of 2 to keep the end result between 1 and 2.\\nHaving that out of the way, we have free control over the two exponents b and c.\"), mdx(\"p\", null, \"So 5 limit tuning brings a whole new dimension to our system: The first dimension is the 3 (fifths) and the second, new dimension is the 5 (thirds).\"), mdx(\"h3\", {\n    \"id\": \"naming-collision\"\n  }, \"Naming collision\"), mdx(\"p\", null, \"It may sound wrong that the 3 stands for a fifth, while the 5 stands for a third, but this just stems from the naming convention of musical intervals,\\nbased on 7 notes per octave. Funny enough, the next prime numbers are 7, which adds the minor seventh, and 9, which adds the major second (or 9th).\\nBut let\\u2019s stay with 3 and 5 for now.\"), mdx(\"h3\", {\n    \"id\": \"tuning-circle\"\n  }, \"Tuning Circle\"), mdx(State, {\n    initial: {\n      toggle: false,\n      interval: 1,\n      focus: undefined,\n      fifths: 4,\n      thirds: 2,\n      rotateFifths: -2,\n      rotateThirds: -1,\n      preset: \"Chromatic\",\n      activeUnit: \"powers\",\n      activeView: \"grid\",\n      disabled: [[2, -1], [-2, 1], [-2, -1]]\n    },\n    mdxType: \"State\"\n  }, function (_ref2) {\n    var state = _ref2.state,\n        setState = _ref2.setState;\n    var units = {\n      powers: \"Powers\",\n      ratio: \"Ratio\",\n      frequency: \"Frequency\",\n      cent: \"Cent\"\n    };\n    var views = {\n      grid: \"Grid\",\n      list: \"Sorted\"\n    };\n    var l5 = limit5([state.fifths, state.rotateFifths], [state.thirds, state.rotateThirds]);\n    var flat = flatten(l5).filter(function (_ref3) {\n      var fifth = _ref3.fifth,\n          third = _ref3.third;\n      return !state.disabled.find(function (_ref4) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n            x = _ref5[0],\n            y = _ref5[1];\n\n        return x === fifth && y === third;\n      });\n    });\n    var maxThirds = 3;\n    var maxFifths = 11;\n    var base = 440;\n    var presets = [{\n      preset: \"Ionian\",\n      fifths: 3,\n      rotateFifths: -1,\n      thirds: 1,\n      rotateThirds: 0,\n      disabled: [[2, 1]]\n    }, {\n      preset: \"Ionian (3-limit)\",\n      fifths: 6,\n      rotateFifths: -1,\n      thirds: 0,\n      rotateThirds: 0,\n      disabled: []\n    }, {\n      preset: \"Aeolian\",\n      fifths: 4,\n      rotateFifths: -2,\n      thirds: 1,\n      rotateThirds: -1,\n      disabled: [[-1, -1], [-2, -1], [2, -1]]\n    }, {\n      preset: \"Dorian\",\n      fifths: 5,\n      rotateFifths: -2,\n      thirds: 1,\n      rotateThirds: -1,\n      disabled: [[-2, -1], [-1, -1], [0, -1], [2, -1], [3, -1]]\n    }, {\n      preset: \"Mixolydian\",\n      fifths: 4,\n      rotateFifths: -2,\n      thirds: 1,\n      rotateThirds: 0,\n      disabled: [[1, 1], [-2, 1], [2, 1]]\n    }, {\n      preset: \"Chromatic\",\n      fifths: 5,\n      rotateFifths: -2,\n      thirds: 2,\n      rotateThirds: -1,\n      disabled: [[2, -1], [-2, 1], [-2, -1], [3, -1], [3, 0], [3, 1]]\n    }];\n    return mdx(\"div\", null, mdx(\"br\", null), mdx(ConnectedCircle, {\n      r: 100,\n      nodeRadius: 20,\n      nodes: flat.map(function (_ref6, id) {\n        var ratio = _ref6.ratio,\n            top = _ref6.top,\n            bottom = _ref6.bottom,\n            fifth = _ref6.fifth,\n            third = _ref6.third;\n        var label = \"\".concat(top, \"/\").concat(bottom);\n\n        if (state.activeUnit === \"frequency\") {\n          label = Math.round(ratio * base);\n        } else if (state.activeUnit === \"cent\") {\n          label = Math.round(cents(ratio));\n        }\n\n        return {\n          id: \"\".concat(fifth, \"-\").concat(third),\n          label: label,\n          value: cents(ratio) / 1200,\n          ratio: ratio,\n          distance: 140,\n          fill: frequencyColor(base * ratio)\n        };\n      }),\n      links: [],\n      onClick: function onClick(_ref7) {\n        var node = _ref7.node;\n\n        if (node) {\n          harp.triggerAttackRelease(node.ratio * base, 1);\n        }\n      },\n      mdxType: \"ConnectedCircle\"\n    }), mdx(\"br\", null), mdx(\"strong\", null, \"Presets:\"), mdx(\"select\", {\n      value: state.preset,\n      onChange: function onChange(e) {\n        var p = presets.find(function (_ref8) {\n          var preset = _ref8.preset;\n          return preset === e.target.value;\n        });\n        p && setState(p);\n      }\n    }, presets.map(function (_ref9, i) {\n      var preset = _ref9.preset;\n      return mdx(\"option\", {\n        key: i,\n        value: preset\n      }, preset);\n    })), mdx(\"br\", null), mdx(Grid, {\n      container: true,\n      spacing: 2,\n      mdxType: \"Grid\"\n    }, mdx(Grid, {\n      item: true,\n      xs: 6,\n      mdxType: \"Grid\"\n    }, state.fifths, \" fifth\", state.fifths !== 1 ? \"s\" : \"\", mdx(\"br\", null), mdx(Slider, {\n      marks: true,\n      track: false,\n      min: 0,\n      max: maxFifths,\n      value: state.fifths,\n      onChange: function onChange(e, v) {\n        return v !== state.fifths && setState({\n          fifths: v\n        });\n      },\n      mdxType: \"Slider\"\n    })), mdx(Grid, {\n      item: true,\n      xs: 6,\n      mdxType: \"Grid\"\n    }, \"rotate by \", state.rotateFifths, \" fifth\", Math.abs(state.rotateFifths) !== 1 ? \"s\" : \"\", mdx(\"br\", null), mdx(Slider, {\n      marks: true,\n      track: false,\n      min: -maxFifths,\n      max: maxFifths,\n      value: state.rotateFifths,\n      onChange: function onChange(e, v) {\n        return v !== state.rotateFifths && setState({\n          rotateFifths: v\n        });\n      },\n      mdxType: \"Slider\"\n    }))), mdx(Grid, {\n      container: true,\n      spacing: 2,\n      mdxType: \"Grid\"\n    }, mdx(Grid, {\n      item: true,\n      xs: 6,\n      mdxType: \"Grid\"\n    }, state.thirds, \" third\", state.thirds !== 1 ? \"s\" : \"\", mdx(Slider, {\n      marks: true,\n      track: false,\n      min: 0,\n      max: maxThirds,\n      value: state.thirds,\n      onChange: function onChange(e, v) {\n        return v !== state.thirds && setState({\n          thirds: v\n        });\n      },\n      mdxType: \"Slider\"\n    })), mdx(Grid, {\n      item: true,\n      xs: 6,\n      mdxType: \"Grid\"\n    }, \"rotate by \", state.rotateThirds, \" third\", Math.abs(state.rotateThirds) !== 1 ? \"s\" : \"\", mdx(\"br\", null), mdx(Slider, {\n      marks: true,\n      track: false,\n      min: -maxThirds,\n      max: maxThirds,\n      value: state.rotateThirds,\n      onChange: function onChange(e, v) {\n        return v !== state.rotateThirds && setState({\n          rotateThirds: v\n        });\n      },\n      mdxType: \"Slider\"\n    }))), mdx(\"table\", null, mdx(\"tbody\", null, Array.from({\n      length: state.fifths + 1\n    }, function (_, f) {\n      return mdx(\"tr\", {\n        key: f\n      }, Array.from({\n        length: state.thirds + 1\n      }, function (_, t) {\n        var fifth = f + state.rotateFifths;\n        var third = t + state.rotateThirds;\n        var factor = Math.pow(3, fifth) * Math.pow(5, third);\n        var exp = Math.ceil(Math.log(1 / factor) / Math.log(2));\n        var value = Math.pow(2, exp) * factor;\n\n        var _toFraction$split = new Fraction(value).toFraction().split(\"/\"),\n            _toFraction$split2 = _slicedToArray(_toFraction$split, 2),\n            top = _toFraction$split2[0],\n            bottom = _toFraction$split2[1];\n\n        var isDisabled = !!state.disabled.find(function (_ref10) {\n          var _ref11 = _slicedToArray(_ref10, 2),\n              x = _ref11[0],\n              y = _ref11[1];\n\n          return fifth === x && third === y;\n        });\n        var colProps = {\n          key: \"\".concat(f, \"-\").concat(t),\n          style: {\n            color: \"black\",\n            paddingLeft: 10,\n            border: 0,\n            backgroundColor: isDisabled ? \"gray\" : frequencyColor(value * base)\n          },\n          onClick: function onClick() {\n            {\n              if (isDisabled) {\n                setState({\n                  disabled: state.disabled.filter(function (_ref12) {\n                    var _ref13 = _slicedToArray(_ref12, 2),\n                        x = _ref13[0],\n                        y = _ref13[1];\n\n                    return !(x === fifth && y === third);\n                  })\n                });\n              } else {\n                setState({\n                  disabled: state.disabled.concat([[fifth, third]])\n                });\n              }\n            }\n          }\n        };\n\n        if (state.activeUnit === \"powers\") {\n          return mdx(\"td\", colProps, mdx(InlineMath, {\n            mdxType: \"InlineMath\"\n          }, \"3^{\".concat(fifth, \"}*5^{\").concat(third, \"}*2^{\").concat(exp, \"} = \\\\frac{\").concat(top, \"}{\").concat(bottom || 1, \"}\")));\n        }\n\n        if (state.activeUnit === \"ratio\") {\n          return mdx(\"td\", colProps, mdx(InlineMath, {\n            mdxType: \"InlineMath\"\n          }, \"\\\\frac{\".concat(top, \"}{\").concat(bottom || 1, \"}\")));\n        }\n\n        if (state.activeUnit === \"cent\") {\n          return mdx(\"td\", colProps, Math.round(cents(value) * 10) / 10);\n        }\n\n        if (state.activeUnit === \"frequency\") {\n          return mdx(\"td\", colProps, Math.round(value * base * 10) / 10, \"Hz\");\n        }\n      }));\n    }))), mdx(ButtonGroup, {\n      color: \"primary\",\n      mdxType: \"ButtonGroup\"\n    }, Object.keys(units).map(function (unit) {\n      return mdx(Button, {\n        key: unit,\n        variant: state.activeUnit === unit ? \"contained\" : \"\",\n        onClick: function onClick() {\n          return setState({\n            activeUnit: unit\n          });\n        },\n        mdxType: \"Button\"\n      }, units[unit]);\n    })), mdx(\"br\", null), mdx(\"br\", null));\n  }), mdx(\"p\", null, \"In contrast to the Tuning Circle of the last post, where we had a one dimensional table of ratios, here we have a two dimensional grid.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The fifths stack in vertical while thirds stack in horizontal direction.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"From each field, the fields below and above are pure fifths apart, while the fields to the left and right are pure major thirds apart.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The bounds for both grid dimensions can be adjusted with the sliders on the left\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The rotation for each dimension can be adjusted with the sliders on the right. It controls the offset of the exponents in that direction.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can switch between different units to change the representation type of each ratio\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Each ratio can be disabled/enabled by clicking. This will gray it out and also hide it in the circle.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can pick a preset to load different 5 limit scales\")), mdx(\"h3\", {\n    \"id\": \"5-limit-vs-3-limit\"\n  }, \"5 limit vs 3 limit\"), mdx(\"p\", null, \"With 5 limit, we can simplify many of the complex ratios of 3 limit.\\nThis results in much purer intervals. The downside is, that it adds complexity by introducing another dimension.\"), mdx(\"p\", null, \"Also, some intervals can be reached in multiple ways, and the right choice depends on the use case.\\nFor example, the the sixth can either be 27/16 or 5/3.\\nThe first one seems more complex, but if we wanted to build a chord on the second degree of the scale (9/8), we should choose that one.\\nBut this is a topic for another post!\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/5limit-just-intonation/","title":"5 Limit Just Intonation","tags":[],"keywords":[],"date":"May 02, 2020"},"previous":{"__typename":"MdxBlogPost","id":"f0803083-1135-53d7-aa24-b54a926e9201","excerpt":"After building a foundation of understanding pure intervals in the last post, we will now look at different ways of building tuning systemsâ€¦","slug":"/3limit-just-intonation/","title":"3 Limit Just Intonation","date":"April 26, 2020"},"next":null},"pageContext":{"id":"19ad2e2d-f154-52fb-b365-9624b52c2760","previousId":"f0803083-1135-53d7-aa24-b54a926e9201"}}}