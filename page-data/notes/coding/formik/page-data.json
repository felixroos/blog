{"componentChunkName":"component---node-modules-gatsby-theme-notes-src-templates-note-js","path":"/notes/coding/formik","result":{"data":{"note":{"id":"5a1bbd98-0eb2-5864-b3ba-41fb9b82f73c","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"formik-experiments\"\n  }, \"Formik Experiments\"), mdx(\"p\", null, \"After having worked with formik a few times, I want to break down different ways of using it.\\nFor all the below components, I will be using this FormikConfig:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"const formikConfig = {\\n  initialValues: {\\n    firstName: \\\"\\\",\\n    lastName: \\\"\\\",\\n    email: \\\"\\\",\\n  },\\n  onSubmit: (values, actions) => {\\n    alert(JSON.stringify(values))\\n    actions.resetForm({\\n      values: {\\n        firstName: \\\"form\\\",\\n        lastName: \\\"reset\\\",\\n        email: \\\"hihi@test.de\\\",\\n      },\\n    })\\n  },\\n}\\n\")), mdx(\"p\", null, \"and this helper, which just passes some props to a TextField:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function controlField(name, { handleChange, values }) {\\n  return {\\n    onChange: handleChange,\\n    value: values[name],\\n    name,\\n  }\\n}\\n\")), mdx(\"p\", null, \"This helper could be further extended to e.g. handle different field types etc..\"), mdx(\"h2\", {\n    \"id\": \"via-useformik-hook\"\n  }, \"via useFormik hook\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"export function FormikWithHook() {\\n  const formikHook = useFormik(formikConfig)\\n  return (\\n    <form onSubmit={formikHook.handleSubmit}>\\n      {JSON.stringify(formikHook.values)}\\n      <TextField label=\\\"Vorname\\\" {...controlField(\\\"firstName\\\", formikHook)} />\\n      <TextField label=\\\"Nachname\\\" {...controlField(\\\"lastName\\\", formikHook)} />\\n      <TextField\\n        type=\\\"email\\\"\\n        label=\\\"Mail\\\"\\n        {...controlField(\\\"email\\\", formikHook)}\\n      />\\n      <button type=\\\"submit\\\">Submit</button>\\n    </form>\\n  )\\n}\\n\")), mdx(FormikWithHook, {\n    mdxType: \"FormikWithHook\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pro: flat hierarchy => no HOC\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pro: non obfuscated\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"contra: cannot use formik helper components => no context\")), mdx(\"h2\", {\n    \"id\": \"via-useformikcontext\"\n  }, \"via useFormikContext\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"export function FormikWithContext() {\\n  return (\\n    <Formik {...formikConfig}>\\n      <Form>\\n        <FormikState />\\n        <FormikField label=\\\"Vorname\\\" name=\\\"firstName\\\" />\\n        <FormikField label=\\\"Nachname\\\" name=\\\"lastName\\\" />\\n        <FormikField label=\\\"Mail\\\" name=\\\"email\\\" />\\n        <button type=\\\"submit\\\">Submit</button>\\n      </Form>\\n    </Formik>\\n  )\\n}\\n\")), mdx(\"p\", null, \"the child components of Formik can access the context like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function FormikField(props) {\\n  const { name, type } = props\\n  const { values, handleChange } = useFormikContext()\\n  // TBD switch on type, adapt change handler\\n  return (\\n    <TextField {...controlField(name, { values, handleChange })} {...props} />\\n  )\\n}\\nfunction FormikState() {\\n  const { values, handleChange } = useFormikContext()\\n  return <>{JSON.stringify(values)}</>\\n}\\n\")), mdx(FormikWithContext, {\n    mdxType: \"FormikWithContext\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pro: less verbose, everything is encapsulated\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"contra: more obfuscation => no direct access to formikBag\")), mdx(\"h2\", {\n    \"id\": \"via-child-function\"\n  }, \"via child function\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"export function FormikWithChildrenFunction() {\\n  return (\\n    <Formik {...formikConfig}>\\n      {(formik) => (\\n        <form onSubmit={formik.handleSubmit}>\\n          {JSON.stringify(formik.values)}\\n          <TextField label=\\\"Vorname\\\" {...controlField(\\\"firstName\\\", formik)} />\\n          <TextField label=\\\"Nachname\\\" {...controlField(\\\"lastName\\\", formik)} />\\n          <FormikField label=\\\"Mail\\\" name=\\\"email\\\" placeholder=\\\"Mail\\\" />\\n          <button type=\\\"submit\\\">Submit</button>\\n        </form>\\n      )}\\n    </Formik>\\n  )\\n}\\n\")), mdx(FormikWithChildrenFunction, {\n    mdxType: \"FormikWithChildrenFunction\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pro: can mix non obfuscated elements & encapsulated components\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"contra: everything is wrapped in a function\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"site":{"siteMetadata":{"title":"Loophole Letters"}}},"pageContext":{"id":"5a1bbd98-0eb2-5864-b3ba-41fb9b82f73c","parent":{"name":"formik","base":"formik.mdx","relativePath":"coding/formik.mdx","sourceInstanceName":"content/notes"},"title":"formik"}},"staticQueryHashes":[]}