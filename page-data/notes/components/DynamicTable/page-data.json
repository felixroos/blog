{"componentChunkName":"component---node-modules-gatsby-theme-notes-src-templates-note-js","path":"/notes/components/DynamicTable","result":{"data":{"note":{"id":"319eb138-f04c-56d7-b17e-df19776f3fc2","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"dynamictable\"\n  }, \"DynamicTable\"), mdx(\"p\", null, \"This component wraps the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://material-ui.com/components/tables/#table\"\n  }, \"material-ui Table\"), \" component to easily list arrays of objects.\\nIt includes many ideas from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://entrecode.github.io/ec.components/\"\n  }, \"ec.components\"), \" ec-list.\"), mdx(\"h2\", {\n    \"id\": \"simple-table\"\n  }, \"Simple Table\"), mdx(\"p\", null, \"As a table consists of cols and rows, we need at least pass those two props:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<DynamicTable\\n  cols={['name', 'age']}\\n  rows={[\\n    { name: 'Tom', age: 16, foo: true },\\n    { name: 'Dylan', age: 12 },\\n    { name: 'Bob', age: 31 }\\n  ]}\\n/>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"cols is an array of either a string (property name) or an object for further customization\")), mdx(\"h2\", {\n    \"id\": \"col-options\"\n  }, \"col options\"), mdx(\"p\", null, \"If we use an objects for a column, we can customize its behaviour:\"), mdx(\"h3\", {\n    \"id\": \"label\"\n  }, \"label\"), mdx(\"p\", null, \"Controls the label of the column header:\"), mdx(DynamicTable, {\n    rows: [{\n      name: 'Tom',\n      age: 16\n    }, {\n      name: 'Dylan',\n      age: 12\n    }, {\n      name: 'Bob',\n      age: 31\n    }],\n    cols: [{\n      property: 'name',\n      label: 'Forename'\n    }, 'age'],\n    mdxType: \"DynamicTable\"\n  }), mdx(\"h3\", {\n    \"id\": \"display\"\n  }, \"display\"), mdx(\"p\", null, \"Accepts a custom display rendering function (also accepts JSX):\"), mdx(DynamicTable, {\n    rows: [{\n      name: 'Tom',\n      age: 16\n    }, {\n      name: 'Dylan',\n      age: 12\n    }, {\n      name: 'Bob',\n      age: 31\n    }],\n    cols: ['name', {\n      property: 'age',\n      display: function display(v) {\n        return mdx(\"strong\", null, v, \" Years\");\n      }\n    }],\n    mdxType: \"DynamicTable\"\n  }), mdx(\"h3\", {\n    \"id\": \"sort\"\n  }, \"sort\"), mdx(\"p\", null, \"Each field that has a sort function will be sortable by clicking the column header:\"), mdx(DynamicTable, {\n    rows: [{\n      name: 'Tom',\n      age: 16\n    }, {\n      name: 'Dylan',\n      age: 12\n    }, {\n      name: 'Bob',\n      age: 31\n    }],\n    cols: ['name', {\n      property: 'age',\n      sort: function sort(a, b) {\n        return a - b;\n      },\n      display: function display(v) {\n        return v + ' Years';\n      }\n    }],\n    mdxType: \"DynamicTable\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the column header is clicked again, the order is simply reversed (as indicated by the arrow).\")), mdx(\"h3\", {\n    \"id\": \"defaultorder\"\n  }, \"defaultOrder\"), mdx(\"p\", null, \"If a field is sorted, the arrow points up by default, which stands for \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"asc\"), \"ending order.\\nTo invert the arrow, we can specify the defaultOrder to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"desc\"), \"ending:\"), mdx(DynamicTable, {\n    rows: [{\n      name: 'Tom',\n      age: 16\n    }, {\n      name: 'Dylan',\n      age: 12\n    }, {\n      name: 'Bob',\n      age: 31\n    }],\n    cols: ['name', {\n      property: 'age',\n      display: function display(v) {\n        return v + ' Years';\n      },\n      defaultOrder: 'desc',\n      sort: function sort(a, b) {\n        return b - a;\n      }\n    }],\n    mdxType: \"DynamicTable\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You have to make sure the sort function reflects the defaultOrder\")), mdx(\"h3\", {\n    \"id\": \"resolve\"\n  }, \"resolve\"), mdx(\"p\", null, \"Allows creating \\u201Cvirtual\\u201D fields that do not exist on the rows:\"), mdx(DynamicTable, {\n    rows: [{\n      name: 'Tom',\n      age: 16\n    }, {\n      name: 'Dylan',\n      age: 12\n    }, {\n      name: 'Bob',\n      age: 31\n    }],\n    cols: ['name', {\n      property: 'age',\n      defaultOrder: 'desc',\n      sort: function sort(a, b) {\n        return b - a;\n      }\n    }, {\n      property: 'is over 16?',\n      resolve: function resolve(_ref2) {\n        var age = _ref2.age;\n        return age >= 16;\n      },\n      display: function display(v) {\n        return v ? 'YES' : 'NO';\n      },\n      sort: function sort(a, b) {\n        return a && !b ? -1 : 1;\n      }\n    }],\n    mdxType: \"DynamicTable\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This makes the field also usable for sorting\")), mdx(\"h2\", {\n    \"id\": \"direct-props\"\n  }, \"Direct props\"), mdx(\"p\", null, \"Here are the direct props of the component:\"), mdx(\"h3\", {\n    \"id\": \"orderedby\"\n  }, \"orderedBy\"), mdx(\"p\", null, \"If the rows you pass are already ordered by a property:\"), mdx(DynamicTable, {\n    orderedBy: \"age\",\n    cols: ['name', {\n      property: 'age',\n      defaultOrder: 'desc',\n      sort: function sort(a, b) {\n        return b - a;\n      }\n    }, {\n      property: 'is over 16?',\n      resolve: function resolve(_ref3) {\n        var age = _ref3.age;\n        return age >= 16;\n      },\n      display: function display(v) {\n        return v ? 'YES' : 'NO';\n      },\n      sort: function sort(a, b) {\n        return a && !b ? -1 : 1;\n      }\n    }],\n    rows: [{\n      name: 'Tom',\n      age: 16\n    }, {\n      name: 'Dylan',\n      age: 12\n    }, {\n      name: 'Bob',\n      age: 31\n    }].sort(function (a, b) {\n      return b.age - a.age;\n    }),\n    mdxType: \"DynamicTable\"\n  }), mdx(\"h3\", {\n    \"id\": \"heading\"\n  }, \"heading\"), mdx(\"p\", null, \"Shows a table header:\"), mdx(DynamicTable, {\n    heading: \"I was so much older then, I'm younger than that now\",\n    orderedBy: \"age\",\n    cols: ['name', {\n      property: 'age',\n      defaultOrder: 'desc',\n      sort: function sort(a, b) {\n        return b - a;\n      }\n    }, {\n      property: 'is over 16?',\n      resolve: function resolve(_ref4) {\n        var age = _ref4.age;\n        return age >= 16;\n      },\n      display: function display(v) {\n        return v ? 'YES' : 'NO';\n      },\n      sort: function sort(a, b) {\n        return a && !b ? -1 : 1;\n      }\n    }],\n    rows: [{\n      name: 'Tom',\n      age: 16\n    }, {\n      name: 'Dylan',\n      age: 12\n    }, {\n      name: 'Bob',\n      age: 31\n    }].sort(function (a, b) {\n      return b.age - a.age;\n    }),\n    mdxType: \"DynamicTable\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"site":{"siteMetadata":{"title":"Loophole Letters"}}},"pageContext":{"id":"319eb138-f04c-56d7-b17e-df19776f3fc2","parent":{"name":"DynamicTable","base":"DynamicTable.mdx","relativePath":"components/DynamicTable.mdx","sourceInstanceName":"content/notes"},"title":"DynamicTable"}},"staticQueryHashes":[]}