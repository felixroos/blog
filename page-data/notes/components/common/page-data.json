{"componentChunkName":"component---node-modules-gatsby-theme-notes-src-templates-note-js","path":"/notes/components/common","result":{"data":{"note":{"id":"59ea7a4a-4767-510d-b337-86fb5658e51b","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"common-components\"\n  }, \"Common Components\"), mdx(\"h2\", {\n    \"id\": \"animationframe\"\n  }, \"AnimationFrame\"), mdx(\"p\", null, \"See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../AnimationFrame\"\n  }, \"AnimationFrame\"), \".\"), mdx(\"h2\", {\n    \"id\": \"asciitree\"\n  }, \"AsciiTree\"), mdx(\"p\", null, \"Vizualize a tree structure with text using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/treeify\"\n  }, \"treeify\"), \". Currently not in use\"), mdx(AsciiTree, {\n    node: {\n      oranges: {\n        mandarin: {\n          clementine: null,\n          tangerine: 'so cheap and juicy'\n        }\n      },\n      apples: {\n        gala: null,\n        'pink lady': null\n      }\n    },\n    mdxType: \"AsciiTree\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<AsciiTree\\n  node={{\\n    oranges: { mandarin: { clementine: null, tangerine: 'so cheap and juicy' } },\\n    apples: { gala: null, 'pink lady': null },\\n  }}\\n/>\\n\")), mdx(\"h2\", {\n    \"id\": \"asciitreediff\"\n  }, \"AsciiTreeDiff\"), mdx(\"p\", null, \"Diff 2 AsciiTrees. Currently not in use\"), mdx(AsciiTreeDiff, {\n    before: {\n      oranges: {\n        mandarin: {\n          clementine: null,\n          tangerine: 'so cheap and juicy'\n        }\n      },\n      apples: {\n        gala: null,\n        'pink lady': null\n      }\n    },\n    after: {\n      oranges: {\n        mandarin: {\n          clementine: null,\n          tangerine: 'so cheap and juicy!!!!'\n        }\n      },\n      apples: {\n        gala: null\n      }\n    },\n    mdxType: \"AsciiTreeDiff\"\n  }), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<AsciiTreeDiff\\n  before={{\\n    oranges: { mandarin: { clementine: null, tangerine: 'so cheap and juicy' } },\\n    apples: { gala: null, 'pink lady': null },\\n  }}\\n  after={{\\n    oranges: { mandarin: { clementine: null, tangerine: 'so cheap and juicy!!!!' } },\\n    apples: { gala: null },\\n  }}\\n/>\\n\")), mdx(\"h2\", {\n    \"id\": \"barchart\"\n  }, \"barChart\"), mdx(DShell, {\n    render: function render(container) {\n      return barChart({\n        width: 500,\n        height: 300,\n        container: container,\n        data: [{\n          value: 'A',\n          count: 3\n        }, {\n          value: 'B',\n          count: 5\n        }, {\n          value: 'C',\n          count: 2\n        }]\n      });\n    },\n    mdxType: \"DShell\"\n  }), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<DShell\\n  render={(container) =>\\n    barChart({\\n      width: 500,\\n      height: 300,\\n      container,\\n      data: [\\n        { value: 'A', count: 3 },\\n        { value: 'B', count: 5 },\\n        { value: 'C', count: 2 },\\n      ],\\n    })\\n  }\\n/>\\n\")), mdx(\"h2\", {\n    \"id\": \"circle\"\n  }, \"Circle\"), mdx(\"p\", null, \"svg subcomponent to quickly create a circle. Currently only used in NoteCircle which is not in use\\u2026\"), mdx(\"svg\", {\n    width: 42,\n    height: 42\n  }, mdx(Circle, {\n    fill: 'steelblue',\n    radius: 20,\n    mdxType: \"Circle\"\n  }, mdx(\"text\", {\n    x: 16,\n    y: 25\n  }, \"X\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<svg width={42} height={42}>\\n  <Circle fill={'steelblue'} radius={20}>\\n    <text x={16} y={25}>\\n      X\\n    </text>\\n  </Circle>\\n</svg>\\n\")), mdx(\"p\", null, \"TBD: kill?\"), mdx(\"h2\", {\n    \"id\": \"color\"\n  }, \"Color\"), mdx(Color, {\n    color: 'steelblue',\n    mdxType: \"Color\"\n  }), mdx(\"h2\", {\n    \"id\": \"connectedcircle\"\n  }, \"ConnectedCircle\"), mdx(ConnectedCircle, {\n    nodeRadius: 25,\n    r: 120,\n    size: 10,\n    nodes: Array(10).fill().map(function (_, i) {\n      return {\n        id: i,\n        value: i / 10,\n        label: i / 10,\n        fill: 'steelblue'\n      };\n    }),\n    links: [[0, 2], [2, 4], [4, 6, 'red', 10], [6, 8], [8, 0]].map(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 4),\n          source = _ref3[0],\n          target = _ref3[1],\n          stroke = _ref3[2],\n          strokeWidth = _ref3[3];\n\n      return {\n        source: source,\n        target: target,\n        stroke: stroke,\n        strokeWidth: strokeWidth\n      };\n    }),\n    mdxType: \"ConnectedCircle\"\n  }), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<ConnectedCircle\\n  nodeRadius={25}\\n  r={120}\\n  nodes={Array(10)\\n    .fill()\\n    .map((_, i) => ({\\n      id: i,\\n      value: i / 10,\\n      label: i / 10,\\n      fill: 'steelblue',\\n    }))}\\n  links={[\\n    [0, 2],\\n    [2, 4],\\n    [4, 6, 'red', 10],\\n    [6, 8],\\n    [8, 0],\\n  ].map(([source, target, stroke, strokeWidth]) => ({ source, target, stroke, strokeWidth }))}\\n/>\\n\")), mdx(ComponentDoc, {\n    json: ConnectedCircleDoc,\n    mdxType: \"ComponentDoc\"\n  }), mdx(\"p\", null, \"See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../pitch-class-sets/\"\n  }, \"Pitch Class Sets\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../3limit-just-intonation/#tuning-circle\"\n  }, \"Tuning Circle\")), mdx(\"h2\", {\n    \"id\": \"d3shell\"\n  }, \"D3Shell\"), mdx(\"p\", null, \"See barChart\"), mdx(\"h2\", {\n    \"id\": \"dynamicfilter\"\n  }, \"DynamicFilter\"), mdx(\"p\", null, \"see \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./DynamicFilter\"\n  }, \"DynamicFilter\")), mdx(\"h2\", {\n    \"id\": \"dynamictable\"\n  }, \"DynamicTable\"), mdx(\"p\", null, \"See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./DynamicTable\"\n  }, \"DynamicTable\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../ireal-analytics/\"\n  }, \"Parsing iReal Chord Changes\")), mdx(\"h2\", {\n    \"id\": \"flatten\"\n  }, \"flatten\"), mdx(\"p\", null, \"helper to flatten nested array. only used in 5limit-just-intonation post.\"), mdx(\"p\", null, \"TBD: move to tuning?\"), mdx(\"h2\", {\n    \"id\": \"formiktest\"\n  }, \"FormikTest\"), mdx(\"p\", null, \"See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../coding/formik\"\n  }, \"here\"), \".\"), mdx(\"h2\", {\n    \"id\": \"fractioncircle\"\n  }, \"FractionCircle\"), mdx(\"p\", null, \"svg subcomponent to display fractions:\"), mdx(\"p\", null, \"As frequency ratio:\"), mdx(\"svg\", {\n    width: 42,\n    height: 42\n  }, mdx(FractionCircle, {\n    top: 2,\n    bottom: 3,\n    radius: 20,\n    cx: 20,\n    cy: 20,\n    mdxType: \"FractionCircle\"\n  })), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<svg width={42} height={42}>\\n  <FractionCircle top={2} bottom={3} radius={20} cx={20} cy={20} />\\n</svg>\\n\")), mdx(\"p\", null, \"As length ration (uses invert):\"), mdx(\"svg\", {\n    width: 42,\n    height: 42\n  }, mdx(FractionCircle, {\n    top: 2,\n    bottom: 3,\n    radius: 20,\n    cx: 20,\n    cy: 20,\n    invert: true,\n    mdxType: \"FractionCircle\"\n  })), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<svg width={42} height={42}>\\n  <FractionCircle top={2} bottom={3} radius={20} cx={20} cy={20} invert={true} />\\n</svg>\\n\")), mdx(\"p\", null, \"See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../intervals/\"\n  }, \"Pure Intervals\")), mdx(\"h2\", {\n    \"id\": \"functionplot\"\n  }, \"FunctionPlot\"), mdx(\"p\", null, \"Plots the given function(s). Only used in blog post. Newer version is Plot (see below).\"), mdx(\"p\", null, \"See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../../plotting-functions\"\n  }, \"Plotting Functions\")), mdx(\"p\", null, \"TBD: pull into blog post?\"), mdx(\"h2\", {\n    \"id\": \"gcd\"\n  }, \"gcd\"), mdx(\"p\", null, \"greatest common denominator, used in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./Lambdoma\"\n  }, \"Lambdoma\")), mdx(\"h2\", {\n    \"id\": \"harp\"\n  }, \"harp\"), mdx(\"p\", null, \"Little synth to play frequencies / pitches:\"), mdx(\"button\", {\n    onClick: function onClick() {\n      return harp.triggerAttackRelease(440, 1);\n    }\n  }, \"Play\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<button onClick={() => harp.triggerAttackRelease(440, 1)}>Play</button>\\n\")), mdx(\"h2\", {\n    \"id\": \"isprime\"\n  }, \"isPrime\"), mdx(\"p\", null, \"returns true if the given number is prime. Currently unused\"), mdx(\"p\", null, \"TBD: kill?\"), mdx(\"h2\", {\n    \"id\": \"jsonviewer\"\n  }, \"JSONViewer\"), mdx(\"p\", null, \"simple wrapper around \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/react-json-view\"\n  }, \"react-json-view\"), \".\"), mdx(JSONViewer, {\n    src: {\n      foo: true\n    },\n    name: false,\n    displayObjectSize: false,\n    displayDataTypes: false,\n    enableClipboard: false,\n    collapsed: 3,\n    mdxType: \"JSONViewer\"\n  }), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<JSONViewer\\n  src={{ foo: true }}\\n  name={false}\\n  displayObjectSize={false}\\n  displayDataTypes={false}\\n  enableClipboard={false}\\n  collapsed={3}\\n/>\\n\")), mdx(\"h2\", {\n    \"id\": \"plot\"\n  }, \"Plot\"), mdx(Plot, {\n    functions: [function (x) {\n      return Math.sin(x);\n    }, function (x) {\n      return Math.cos(x);\n    }],\n    range: {\n      x: [-Math.PI, Math.PI],\n      y: [-1, 1]\n    },\n    mdxType: \"Plot\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<Plot functions={[(x) => Math.sin(x), (x) => Math.cos(x)]} range={{ x: [-Math.PI, Math.PI], y: [-1, 1] }} />\\n\")), mdx(\"h2\", {\n    \"id\": \"polarplot\"\n  }, \"PolarPlot\"), mdx(PolarPlot, {\n    maxAngle: 2 * Math.PI,\n    radius: 1,\n    functions: [function (t) {\n      return Math.sin(2 * t);\n    }],\n    mdxType: \"PolarPlot\"\n  }), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<PolarPlot maxAngle={2 * Math.PI} radius={1} functions={[(t) => Math.sin(2 * t)]} />\\n\")), mdx(\"h2\", {\n    \"id\": \"popover--simplepopover\"\n  }, \"Popover / SimplePopover\"), mdx(SimplePopover, {\n    placement: \"left-start\",\n    mdxType: \"SimplePopover\"\n  }, mdx(\"p\", null, \"Hello\")), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<SimplePopover placement=\\\"left-start\\\">\\n  <p>Hello</p>\\n</SimplePopover>\\n\")), mdx(\"p\", null, \"Good for component testing, see e.g. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./Lambdoma\"\n  }, \"Lambdoma\"), \".\"), mdx(\"h2\", {\n    \"id\": \"simpleselect\"\n  }, \"SimpleSelect\"), mdx(SimpleSelect, {\n    label: \"What?\",\n    value: 'Milk',\n    onChange: function onChange(v) {\n      return console.log(v);\n    },\n    values: ['Mouse', 'Man', 'Milk'],\n    mdxType: \"SimpleSelect\"\n  }), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<SimpleSelect label=\\\"What?\\\" value={'Milk'} onChange={(v) => console.log(v)} values={['Mouse', 'Man', 'Milk']} />\\n\")), mdx(\"h2\", {\n    \"id\": \"sketch\"\n  }, \"Sketch\"), mdx(\"p\", null, \"For p5 sketches. Currently commented out.\"), mdx(\"p\", null, \"TBD: remove?\"), mdx(\"h2\", {\n    \"id\": \"slider\"\n  }, \"Slider\"), mdx(\"p\", null, \"Wraps Material UI slider:\"), mdx(Slider, {\n    min: 2,\n    max: 64,\n    value: 20,\n    onChange: function onChange(e, partials) {\n      return console.log(e, partials);\n    },\n    mdxType: \"Slider\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<Slider min={2} max={64} value={20} onChange={(e, partials) => console.log(e, partials)} />\\n\")), mdx(\"h2\", {\n    \"id\": \"spiral\"\n  }, \"Spiral\"), mdx(Spiral, {\n    width: 600,\n    height: 600,\n    stroke: \"gray\",\n    zoom: 0.11,\n    spin: 0,\n    precision: 4,\n    min: 0,\n    max: 6,\n    strokeWidth: 3,\n    mdxType: \"Spiral\"\n  }), mdx(\"p\", null, \"See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../spirals\"\n  }, \"spirals\"), \".\"), mdx(\"h2\", {\n    \"id\": \"spiralsettings\"\n  }, \"SpiralSettings\"), mdx(\"p\", null, \"See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../spirals\"\n  }, \"spirals\"), \".\"), mdx(\"h2\", {\n    \"id\": \"statistics\"\n  }, \"statistics\"), mdx(\"p\", null, \"normalizeProperty -> normalizeNumbers. Only used in DynamicFilter.\"), mdx(\"p\", null, \"TBD: do sth..\"), mdx(\"h2\", {\n    \"id\": \"treemap\"\n  }, \"treeMap\"), mdx(\"p\", null, \"treeMap helper for D3Shell\"), mdx(DShell, {\n    render: function render(container) {\n      return treeMap(container, {\n        children: Array(10).fill().map(function (_, i) {\n          return {\n            name: i + 1,\n            value: i + 1,\n            id: i,\n            selected: i === 2,\n            onClick: function onClick() {\n              return console.log('clicked', i);\n            }\n          };\n        })\n      });\n    },\n    mdxType: \"DShell\"\n  }), mdx(\"h2\", {\n    \"id\": \"treevisitor\"\n  }, \"TreeVisitor\"), mdx(\"p\", null, \"See rhythmical-trees.\"), mdx(\"p\", null, \"TBD: move to rhythmical/tree ?\"), mdx(\"h2\", {\n    \"id\": \"useframe\"\n  }, \"useFrame\"), mdx(\"p\", null, \"used in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./AnimationFrame\"\n  }, \"AnimationFrame\"), \".\"), mdx(\"h2\", {\n    \"id\": \"usegenerator\"\n  }, \"useGenerator\"), mdx(\"p\", null, \"see TreeVisitor\"), mdx(\"h2\", {\n    \"id\": \"usesynth\"\n  }, \"useSynth\"), mdx(\"p\", null, \"see Monochord, Lambdoma, Harmonics, Partials..\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"site":{"siteMetadata":{"title":"Loophole Letters"}}},"pageContext":{"id":"59ea7a4a-4767-510d-b337-86fb5658e51b","parent":{"name":"common","base":"common.mdx","relativePath":"components/common.mdx","sourceInstanceName":"content/notes"},"title":"common"}},"staticQueryHashes":[]}