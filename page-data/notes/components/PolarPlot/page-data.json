{"componentChunkName":"component---node-modules-gatsby-theme-notes-src-templates-note-js","path":"/notes/components/PolarPlot","result":{"data":{"note":{"id":"f907daaf-fd39-5a66-bd0d-be50a628d6c7","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"polarplot\"\n  }, \"PolarPlot\"), mdx(\"p\", null, \"This component plots functions in a polar coordinate system\"), mdx(AnimationFrame, {\n    autostart: true,\n    mdxType: \"AnimationFrame\"\n  }, function (_ref2) {\n    var time = _ref2.time;\n    return mdx(State, {\n      initial: {\n        frequency: 5,\n        rotation: 0,\n        speed: 1\n      },\n      mdxType: \"State\"\n    }, function (_ref3) {\n      var state = _ref3.state,\n          setState = _ref3.setState;\n      var rotation = -time.fromStart * state.speed / 10000 * Math.PI;\n\n      var limacon = function limacon() {\n        var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        return function (t) {\n          return a + b * Math.sin(t + offset);\n        };\n      };\n\n      var rose = function rose(a, n) {\n        var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        return function (t) {\n          return a * Math.sin(n * t + offset);\n        };\n      }; // dunno how to plot quadratic radius?! dont care for now..\n\n      /* const lemniscates = (a = 1) => (t) =>\n        Math.sqrt(Math.abs(2 * Math.pow(a, 2) * Math.cos(2 * t))); */\n\n\n      return mdx(React.Fragment, null, mdx(PolarPlot, {\n        maxAngle: 2 * Math.PI,\n        radius: 1,\n        functions: [// (t) => Math.sin(state.frequency * (t + rotation)),\n        // limacon(1, -1),\n        // limacon(1, 1),\n        // limacon(1, 1, Math.PI / 2),\n        // limacon(1, 1, -Math.PI / 2),\n        rose(1, state.frequency, Math.PI * rotation)],\n        mdxType: \"PolarPlot\"\n      }), mdx(\"br\", null), mdx(\"label\", null, \"frequency \", state.frequency, mdx(Slider, {\n        min: -10,\n        step: 0.1,\n        max: 10,\n        value: state.frequency,\n        onChange: function onChange(e, v) {\n          return v !== state.frequency && setState({\n            frequency: v\n          });\n        },\n        mdxType: \"Slider\"\n      })), mdx(\"br\", null), mdx(\"label\", null, \"speed \", state.speed, mdx(Slider, {\n        min: 0,\n        step: 0.01,\n        max: 10,\n        value: state.speed,\n        onChange: function onChange(e, v) {\n          return v !== state.maxAngle && setState({\n            speed: v\n          });\n        },\n        mdxType: \"Slider\"\n      })));\n    });\n  }), mdx(\"h2\", {\n    \"id\": \"links\"\n  }, \"Links\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.youtube.com/watch?v=p98hm1Dksew\"\n  }), \"graphs (limacon, cardiod, rose curves, lemniscates)\"))), mdx(\"h2\", {\n    \"id\": \"tbd\"\n  }, \"TBD\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://bl.ocks.org/mbostock/4583749\"\n  }), \"add axis + grid\"))));\n}\n;\nMDXContent.isMDXComponent = true;"},"image":{"src":"/static/og-image/polar-plot-16bb7d2a1e.png"},"site":{"siteMetadata":{"title":"Loophole Letters"}}},"pageContext":{"id":"f907daaf-fd39-5a66-bd0d-be50a628d6c7","parent":{"name":"PolarPlot","base":"PolarPlot.mdx","relativePath":"components/PolarPlot.mdx","sourceInstanceName":"content/notes"},"title":"PolarPlot"}}}