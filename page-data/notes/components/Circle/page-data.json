{"componentChunkName":"component---node-modules-gatsby-theme-notes-src-templates-note-js","path":"/notes/components/Circle","result":{"data":{"note":{"id":"585904fa-5169-5e00-8b8b-c9b5c3978b29","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"connectedcircle\"\n  }, \"ConnectedCircle\"), mdx(\"h3\", {\n    \"id\": \"tbd\"\n  }, \"TBD\"), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"show ticks\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"inside + outside ticks with two labels for one value\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  })), \" \", \"draggable nodes to change value on circle\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  })), \" \", \"use d3 scaleLog to make use of invert\")), mdx(\"h2\", {\n    \"id\": \"just-tuning\"\n  }, \"Just Tuning\"), mdx(State, {\n    initial: {\n      toggle: false,\n      interval: 1,\n      focus: undefined\n    },\n    mdxType: \"State\"\n  }, function (_ref2) {\n    var state = _ref2.state,\n        setState = _ref2.setState;\n    var base = 440;\n    var nodes = getNodes([1, 9 / 8, 5 / 4, 4 / 3, 3 / 2, 5 / 3, 15 / 8], base, state.toggle ? \"cents\" : \"ratios\", state.focus);\n    var links = getLinks(nodes, state.interval, base, state.focus);\n    var intervals = [\"2nds\", \"3rds\", \"4ths\", \"5ths\", \"6ths\", \"7ths\"];\n\n    function onlyUnique(value, index, self) {\n      return self.indexOf(value) === index;\n    }\n\n    var unique = links.map(function (l) {\n      return Math.round(l.value.frequency);\n    }).filter(onlyUnique);\n    return mdx(React.Fragment, null, mdx(\"label\", null, \"ratios\", mdx(Switch, {\n      checked: state.toggle,\n      color: \"default\",\n      onChange: function onChange(e) {\n        return setState({\n          toggle: e.target.checked\n        });\n      },\n      mdxType: \"Switch\"\n    }), \"cents\"), mdx(\"br\", null), mdx(ConnectedCircle, {\n      onClick: function onClick(_ref3) {\n        var link = _ref3.link;\n        return setState({\n          focus: link\n        });\n      },\n      onHover: function onHover(_ref4) {\n        var link = _ref4.link;\n        return setState({\n          focus: link\n        });\n      },\n      nodeRadius: 30,\n      r: 140,\n      links: links,\n      nodes: nodes,\n      mdxType: \"ConnectedCircle\"\n    }), mdx(\"br\", null), mdx(\"label\", null, \"compare \", intervals[state.interval - 1], \" (\", intervals[intervals.length - state.interval], \")\", mdx(\"br\", null), mdx(Slider, {\n      min: 1,\n      max: 6,\n      step: 1,\n      style: {\n        width: 350\n      },\n      value: state.interval,\n      onChange: function onChange(e, v) {\n        return setState({\n          interval: v\n        });\n      },\n      mdxType: \"Slider\"\n    })), mdx(\"br\", null), mdx(IntervalSet, {\n      onClick: function onClick(link) {\n        return setState({\n          focus: link\n        });\n      },\n      onHover: function onHover(link) {\n        return setState({\n          focus: link\n        });\n      },\n      links: links,\n      view: state.toggle ? \"cents\" : \"ratios\",\n      base: base,\n      focus: state.focus,\n      mdxType: \"IntervalSet\"\n    }), mdx(\"br\", null), \"there are \", unique.length, \" different \", intervals[state.interval - 1]);\n  }), mdx(\"h3\", {\n    \"id\": \"with-both-combined\"\n  }, \"with both combined:\"), mdx(ConnectedCircle, {\n    nodeRadius: 20,\n    r: 120,\n    nodes: [1, 9 / 8, 5 / 4, 4 / 3, 3 / 2, 5 / 3, 15 / 8].map(function (ratio, i, notes) {\n      return {\n        ratio: ratio,\n        cents: cents(ratio),\n        value: cents(ratio) / 1200,\n        frequency: ratio * Note.freq(\"A4\")\n      };\n    }).reduce(function (nodes, _ref5, i, notes) {\n      var value = _ref5.value,\n          ratio = _ref5.ratio,\n          frequency = _ref5.frequency,\n          cents = _ref5.cents;\n      return nodes.concat([{\n        id: \"cents-\".concat(i),\n        // label: new Fraction(frequency).toFraction(true),\n        label: Math.round(cents),\n        value: value,\n        fill: frequencyColor(frequency),\n        //fill: \"white\",\n        radius: 20,\n        distance: 90\n      }, {\n        id: \"ratio-\".concat(i),\n        label: new Fraction(ratio).toFraction(),\n        value: value,\n        fill: frequencyColor(frequency),\n        //fill: \"white\",\n        radius: 20,\n        distance: 150\n      }]);\n    }, []),\n    mdxType: \"ConnectedCircle\"\n  }), mdx(\"h3\", {\n    \"id\": \"tbd-1\"\n  }, \"TBD\"), mdx(\"ul\", {\n    \"className\": \"contains-task-list\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": false,\n    \"disabled\": true\n  })), \" \", \"add colored lines from tonic to ratios\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"show all possible intervals of same type\"), mdx(\"li\", _extends({\n    parentName: \"ul\"\n  }, {\n    \"className\": \"task-list-item\"\n  }), mdx(\"input\", _extends({\n    parentName: \"li\"\n  }, {\n    \"type\": \"checkbox\",\n    \"checked\": true,\n    \"disabled\": true\n  })), \" \", \"calculate ratios dynamically with limit n\")), mdx(\"h2\", {\n    \"id\": \"equal-temperament\"\n  }, \"Equal Temperament\"), mdx(\"p\", null, \"To get the frequencies for equal temperament we can use:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const equal = Array.from({ length: 12 }, (_, i) => Math.pow(2, i / 12))\\n\")), mdx(\"p\", null, \"This will result in equidistant frequencies:\"), mdx(ConnectedCircle, {\n    nodeRadius: 25,\n    r: 120,\n    nodes: Array.from({\n      length: 12\n    }, function (_, i) {\n      return Math.pow(2, i / 12);\n    }).map(function (ratio, i, notes) {\n      return {\n        ratio: ratio,\n        value: cents(ratio) / 1200,\n        frequency: ratio * Note.freq(\"A4\")\n      };\n    }).map(function (_ref6, i, notes) {\n      var value = _ref6.value,\n          ratio = _ref6.ratio,\n          frequency = _ref6.frequency;\n      return {\n        id: i,\n        label: Math.round(frequency * 2) / 2,\n        value: value,\n        fill: frequencyColor(frequency)\n      };\n    }),\n    mdxType: \"ConnectedCircle\"\n  }), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Note that the frequencies are rounded.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Using ratios would be useless as we are in the irrational number space\")), mdx(\"h3\", {\n    \"id\": \"tbd-2\"\n  }, \"TBD\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Allow setting different octave divisons (other than 12)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"show deviation from just ratios\")), mdx(\"h2\", {\n    \"id\": \"pythagorean\"\n  }, \"Pythagorean\"), mdx(\"p\", null, \"labeled number of fifths applied:\"), mdx(ConnectedCircle, {\n    nodes: [1, 1024 / 729, 256 / 243, 128 / 81, 32 / 27, 16 / 9, 4 / 3, 3 / 2, 9 / 8, 27 / 16, 81 / 64, 243 / 128, 729 / 512].map(function (ratio, i, notes) {\n      return {\n        id: i,\n        label: i,\n        value: cents(ratio) / 1200,\n        fill: frequencyColor(ratio * Note.freq(\"A3\"))\n      };\n    }),\n    mdxType: \"ConnectedCircle\"\n  }), mdx(\"h3\", {\n    \"id\": \"tbd-3\"\n  }, \"TBD\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"show diff to just intervals\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"show comma\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"show wolf fifth\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"calculate ratios dynamically, being able to rotate\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"spiral representation?\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can change distance from nodes to big circle center\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"diff from circle is diff to equal temperament\")))), mdx(\"h2\", {\n    \"id\": \"scale-circle\"\n  }, \"Scale Circle\"), mdx(State, {\n    initial: {\n      tonic: \"C\",\n      scale: \"major\",\n      allNotes: false\n    },\n    mdxType: \"State\"\n  }, function (_ref7) {\n    var state = _ref7.state,\n        setState = _ref7.setState;\n    var scale = Scale.get(\"\".concat(state.tonic, \" \").concat(state.scale));\n    var notes = state.allNotes ? Range.chromatic([\"C3\", \"B3\"]) : scale.intervals.map(function (interval) {\n      return Note.transpose(state.tonic + \"3\", interval);\n    });\n    return mdx(React.Fragment, null, mdx(ConnectedCircle, {\n      nodes: notes.map(function (note, i, notes) {\n        return {\n          id: Note.chroma(note),\n          label: Note.get(note).pc,\n          value: i / notes.length,\n          fill: frequencyColor(Note.freq(note))\n        };\n      }),\n      links: [],\n      sets: [{\n        set: scale.notes.concat([state.tonic]).map(function (n) {\n          return Note.chroma(n);\n        }),\n        stroke: \"steelblue\"\n      }],\n      r: 120,\n      mdxType: \"ConnectedCircle\"\n    }), mdx(\"br\", null), mdx(\"select\", {\n      value: state.tonic,\n      onChange: function onChange(e) {\n        return setState({\n          tonic: e.target.value\n        });\n      }\n    }, Range.chromatic([\"C3\", \"B3\"]).map(function (note, index) {\n      return mdx(\"option\", {\n        key: index\n      }, Note.get(note).pc);\n    })), mdx(\"select\", {\n      value: state.scale,\n      onChange: function onChange(e) {\n        return setState({\n          scale: e.target.value\n        });\n      }\n    }, Scale.names().sort().map(function (_scale, index) {\n      return mdx(\"option\", {\n        key: index\n      }, _scale);\n    })), mdx(\"label\", null, \"allNotes\", mdx(Switch, {\n      checked: state.allNotes,\n      color: \"primary\",\n      onChange: function onChange(e) {\n        return setState({\n          allNotes: e.target.checked\n        });\n      },\n      mdxType: \"Switch\"\n    })));\n  }), mdx(\"h3\", {\n    \"id\": \"tbd-4\"\n  }, \"TBD\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"show correct accidentals when allNotes true\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"show subsets (chords & scales that fit inside)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"group scales by number of notes + darkness\")), mdx(\"h1\", {\n    \"id\": \"other-circles\"\n  }, \"Other Circles\"), mdx(\"h2\", {\n    \"id\": \"fractioncircle\"\n  }, \"FractionCircle\"), mdx(\"p\", null, \"As frequency ratio:\"), mdx(\"svg\", {\n    width: 42,\n    height: 42\n  }, mdx(FractionCircle, {\n    top: 2,\n    bottom: 3,\n    radius: 20,\n    cx: 20,\n    cy: 20,\n    mdxType: \"FractionCircle\"\n  })), mdx(\"p\", null, \"As length ration (uses invert):\"), mdx(\"svg\", {\n    width: 42,\n    height: 42\n  }, mdx(FractionCircle, {\n    top: 2,\n    bottom: 3,\n    radius: 20,\n    cx: 20,\n    cy: 20,\n    invert: true,\n    mdxType: \"FractionCircle\"\n  })), mdx(\"h2\", {\n    \"id\": \"note-circle\"\n  }, \"Note Circle\"), mdx(\"svg\", {\n    width: 42,\n    height: 42\n  }, mdx(NoteCircle, {\n    radius: 20,\n    cx: 20,\n    cy: 20,\n    frequency: 440,\n    mdxType: \"NoteCircle\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;"},"image":{"src":"/static/og-image/circle-20d1a8a085.png"},"site":{"siteMetadata":{"title":"Loophole Letters"}}},"pageContext":{"id":"585904fa-5169-5e00-8b8b-c9b5c3978b29","parent":{"name":"Circle","base":"Circle.mdx","relativePath":"components/Circle.mdx","sourceInstanceName":"content/notes"},"title":"Circle"}}}