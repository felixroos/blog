{"componentChunkName":"component---node-modules-gatsby-theme-notes-src-templates-note-js","path":"/notes/components/AnimationFrame","result":{"data":{"note":{"id":"2e354021-0fb4-5888-b213-3a01e9c3d5e0","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"animation\"\n  }, \"Animation\"), mdx(\"h2\", {\n    \"id\": \"animationframe\"\n  }, \"AnimationFrame\"), mdx(\"p\", null, \"The AnimationFrame component can be used to use an animation callback without creating a component.\\nThis is useful for example animating stuff in MDX:\"), mdx(\"h3\", {\n    \"id\": \"with-progress\"\n  }, \"with progress\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"<AnimationFrame>\\n  {({ time, isRunning, start, stop, toggle }) => (\\n    <>\\n      <Fab onClick={() => start(1000)}>\\n        {!isRunning ? <PlayArrowIcon /> : <StopIcon />}\\n      </Fab>\\n      <h1 style={{ opacity: time.progress }}>\\n        {Math.round(time.progress * 100)}%\\n      </h1>\\n    </>\\n  )}\\n</AnimationFrame>\\n\")), mdx(AnimationFrame, {\n    mdxType: \"AnimationFrame\"\n  }, function (_ref2) {\n    var toggle = _ref2.toggle,\n        time = _ref2.time,\n        isRunning = _ref2.isRunning,\n        start = _ref2.start,\n        stop = _ref2.stop;\n    return mdx(React.Fragment, null, mdx(Fab, {\n      onClick: function onClick() {\n        return start(1000);\n      },\n      mdxType: \"Fab\"\n    }, !isRunning ? mdx(PlayArrowIcon, {\n      mdxType: \"PlayArrowIcon\"\n    }) : mdx(StopIcon, {\n      mdxType: \"StopIcon\"\n    })), mdx(\"h1\", {\n      style: {\n        opacity: time.progress\n      }\n    }, Math.round(time.progress * 100), \"%\"));\n  }), mdx(\"h3\", {\n    \"id\": \"without-fixed-end\"\n  }, \"without fixed end\"), mdx(AnimationFrame, {\n    mdxType: \"AnimationFrame\"\n  }, function (_ref3) {\n    var toggle = _ref3.toggle,\n        time = _ref3.time,\n        isRunning = _ref3.isRunning,\n        start = _ref3.start;\n    return mdx(React.Fragment, null, mdx(Fab, {\n      onClick: function onClick() {\n        return toggle();\n      },\n      mdxType: \"Fab\"\n    }, !isRunning ? mdx(PlayArrowIcon, {\n      mdxType: \"PlayArrowIcon\"\n    }) : mdx(StopIcon, {\n      mdxType: \"StopIcon\"\n    })), time && mdx(React.Fragment, null, mdx(\"p\", null, \"time.fromStart:\", \" \", mdx(\"span\", {\n      style: {\n        color: \"yellow\"\n      }\n    }, Math.round(time.fromStart / 10) / 100, \"s\")), mdx(\"p\", null, \"time.fromFirstStart:\", \" \", mdx(\"span\", {\n      style: {\n        color: \"green\"\n      }\n    }, Math.round(time.fromFirstStart / 10) / 100, \"s\")), mdx(\"p\", null, \"time.delta: \", Math.round(time.delta), \"ms =\", \" \", Math.round(1000 / time.delta), \"fps\"), time && mdx(Plot, {\n      range: {\n        x: [0, Math.PI],\n        y: [0, 1]\n      },\n      height: 330,\n      functions: [function (x) {\n        return Math.abs(Math.sin(x + time.fromFirstStart / 1000));\n      }, function (x) {\n        return Math.abs(Math.sin(x + time.fromStart / 1000));\n      }],\n      colors: [\"green\", \"yellow\"],\n      mdxType: \"Plot\"\n    }), mdx(\"svg\", {\n      width: 100,\n      height: 300\n    }, mdx(\"circle\", {\n      cy: 300 - Math.abs(Math.sin(time.fromStart / 1000)) * (300 - 20) - 10,\n      cx: 40,\n      r: 10,\n      fill: \"yellow\"\n    }), mdx(\"circle\", {\n      cy: 300 - Math.abs(Math.sin(time.fromFirstStart / 1000)) * (300 - 20) - 10,\n      cx: 10,\n      r: 10,\n      fill: \"green\"\n    }))), mdx(\"br\", null));\n  }), mdx(\"h2\", {\n    \"id\": \"useframe-hook\"\n  }, \"useFrame hook\"), mdx(\"p\", null, \"The AnimationFrame component is based on the useFrame hook.\"), mdx(\"h2\", {\n    \"id\": \"next-steps\"\n  }, \"Next steps\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://observablehq.com/@d3/learn-d3-animation\"\n  }), \"https://observablehq.com/@d3/learn-d3-animation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/nearform/react-animation\"\n  }), \"https://github.com/nearform/react-animation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://reactcommunity.org/react-transition-group/\"\n  }), \"https://reactcommunity.org/react-transition-group/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.react-spring.io/\"\n  }), \"https://www.react-spring.io/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/react-restart/hooks/blob/master/src/useAnimationFrame.ts\"\n  }), \"https://github.com/react-restart/hooks/blob/master/src/useAnimationFrame.ts\"))));\n}\n;\nMDXContent.isMDXComponent = true;"},"site":{"siteMetadata":{"title":"Loophole Letters"}}},"pageContext":{"id":"2e354021-0fb4-5888-b213-3a01e9c3d5e0","parent":{"name":"AnimationFrame","base":"AnimationFrame.mdx","relativePath":"components/AnimationFrame.mdx","sourceInstanceName":"content/notes"},"title":"AnimationFrame"}},"staticQueryHashes":[]}