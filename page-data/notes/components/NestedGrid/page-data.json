{"componentChunkName":"component---node-modules-gatsby-theme-notes-src-templates-note-js","path":"/notes/components/NestedGrid","result":{"data":{"note":{"id":"bc811923-4adc-5268-9d29-478e88e611c9","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar gridStyle = function gridStyle(cells) {\n  var gridGap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '1px';\n  return {\n    display: 'grid',\n    gridTemplateColumns: cells.map(function (n) {\n      return \"\".concat(n, \"fr\");\n    }).join(' '),\n    gridGap: gridGap\n  };\n};\n\nvar boxStyle = {\n  border: '1px solid #444',\n  padding: '1px'\n};\n\nvar box = function box(label, backgroundColor) {\n  return mdx(\"div\", {\n    style: {\n      backgroundColor: backgroundColor\n    }\n  }, label);\n};\n\nvar _frontmatter = {};\nvar layoutProps = {\n  gridStyle: gridStyle,\n  box: box,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"nested-css-grid\"\n  }, \"Nested CSS Grid\"), mdx(\"p\", null, \"Let\\u2019s play around with CSS Grid + React.\"), mdx(\"h2\", {\n    \"id\": \"automatic-cell-styles\"\n  }, \"Automatic Cell Styles\"), mdx(\"p\", null, \"The grid styles are generated like this (inspired by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://gridbyexample.com/examples/\"\n  }, \"Grid by Example\"), \"):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"export const gridStyle = (cells, gridGap = '1px') => ({\\n  display: 'grid',\\n  gridTemplateColumns: cells.map((n) => `${n}fr`).join(' '),\\n  gridGap,\\n});\\nexport const boxStyle = { border: '1px solid #444', padding: '1px' };\\n\")), mdx(\"p\", null, \"This grid has 4 equal cells:\"), mdx(\"div\", {\n    style: gridStyle([1, 1, 1, 1])\n  }, mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"A\"), mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"B\"), mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"C\"), mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"D\")), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<div style={gridStyle([1, 1, 1, 1])}>\\n  <div style={{ ...boxStyle }}>A</div>\\n  <div style={{ ...boxStyle }}>B</div>\\n  <div style={{ ...boxStyle }}>C</div>\\n  <div style={{ ...boxStyle }}>D</div>\\n</div>\\n\")), mdx(\"p\", null, \"This grid has a bigger first cell:\"), mdx(\"div\", {\n    style: gridStyle([2, 1, 1])\n  }, mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"A\"), mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"B\"), mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"C\")), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<div style={gridStyle([2, 1, 1])}>\\n  <div style={{ ...boxStyle }}>A</div>\\n  <div style={{ ...boxStyle }}>B</div>\\n  <div style={{ ...boxStyle }}>C</div>\\n</div>\\n\")), mdx(\"p\", null, \"This grid has 2 equal cells with a nested grid inside the second cell:\"), mdx(\"div\", {\n    style: gridStyle([1, 1])\n  }, mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"A\"), mdx(\"div\", {\n    style: _objectSpread(_objectSpread({}, boxStyle), gridStyle([1, 1]))\n  }, mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"B\"), mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"C\"))), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<div style={gridStyle([1, 1])}>\\n  <div style={{ ...boxStyle }}>A</div>\\n  <div style={{ ...boxStyle, ...gridStyle([1, 1]) }}>\\n    <div style={{ ...boxStyle }}>B</div>\\n    <div style={{ ...boxStyle }}>C</div>\\n  </div>\\n</div>\\n\")), mdx(\"p\", null, \"This grid is the same as above, but the second cell has no border:\"), mdx(\"div\", {\n    style: gridStyle([1, 1])\n  }, mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"A\"), mdx(\"div\", {\n    style: _objectSpread({}, gridStyle([1, 1]))\n  }, mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"B\"), mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"C\"))), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<div style={gridStyle([1, 1])}>\\n  <div style={{ ...boxStyle }}>A</div>\\n  <div style={{ ...gridStyle([1, 1]) }}>\\n    <div style={{ ...boxStyle }}>B</div>\\n    <div style={{ ...boxStyle }}>C</div>\\n  </div>\\n</div>\\n\")), mdx(\"p\", null, \"This grid has more than one line:\"), mdx(\"div\", {\n    style: gridStyle([1, 1, 1, 1])\n  }, mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"A\"), mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"B\"), mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"C\"), mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"D\"), mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"E\"), mdx(\"div\", {\n    style: _objectSpread(_objectSpread({}, boxStyle), gridStyle([1, 1]))\n  }, mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"F\"), mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"G\")), mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"H\"), mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"I\")), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<div style={gridStyle([1, 1, 1, 1])}>\\n  <div style={{ ...boxStyle }}>A</div>\\n  <div style={{ ...boxStyle }}>B</div>\\n  <div style={{ ...boxStyle }}>C</div>\\n  <div style={{ ...boxStyle }}>D</div>\\n  <div style={{ ...boxStyle }}>E</div>\\n  <div style={{ ...boxStyle, ...gridStyle([1, 1]) }}>\\n    <div style={{ ...boxStyle }}>F</div>\\n    <div style={{ ...boxStyle }}>G</div>\\n  </div>\\n  <div style={{ ...boxStyle }}>H</div>\\n  <div style={{ ...boxStyle }}>I</div>\\n</div>\\n\")), mdx(\"h2\", {\n    \"id\": \"nested-array-to-grid\"\n  }, \"Nested Array to Grid\"), mdx(\"p\", null, \"It would be nice to be able to turn nested arrays to grids:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<NestedGrid cells={['A', ['B', 'C']]} />\\n\")), mdx(\"p\", null, \"to\"), mdx(\"div\", {\n    style: gridStyle([1, 1])\n  }, mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"A\"), mdx(\"div\", {\n    style: _objectSpread(_objectSpread({}, boxStyle), gridStyle([1, 1]))\n  }, mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"B\"), mdx(\"div\", {\n    style: _objectSpread({}, boxStyle)\n  }, \"C\"))), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<div style={gridStyle([1, 1])}>\\n  <div style={{ ...boxStyle }}>A</div>\\n  <div style={{ ...boxStyle, ...gridStyle([1, 1]) }}>\\n    <div style={{ ...boxStyle }}>B</div>\\n    <div style={{ ...boxStyle }}>C</div>\\n  </div>\\n</div>\\n\")), mdx(\"p\", null, \"This can be solved with a recursive react component:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"export default function NestedGrid(props: any) {\\n  const { cells, outerBorders, innerBorders, rows } = props;\\n  if (!Array.isArray(cells)) {\\n    return <div style={innerBorders ? boxStyle : {}}>{cells}</div>;\\n  }\\n  return (\\n    <div style={{ ...(outerBorders ? boxStyle : {}), ...gridStyle(rows || cells.map(() => 1)) }}>\\n      {cells?.map((content, i) => (\\n        <NestedGrid key={i} {...props} cells={content} rows={undefined} />\\n      ))}\\n    </div>\\n  );\\n}\\n\")), mdx(\"p\", null, \"No Borders:\"), mdx(NestedGrid, {\n    cells: ['A', ['B', 'C']],\n    mdxType: \"NestedGrid\"\n  }), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<NestedGrid cells={['A', ['B', 'C']]} />\\n\")), mdx(\"p\", null, \"Inner + Outer Borders:\"), mdx(NestedGrid, {\n    cells: ['A', ['B', 'C']],\n    innerBorders: true,\n    outerBorders: true,\n    mdxType: \"NestedGrid\"\n  }), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<NestedGrid cells={['A', ['B', 'C']]} innerBorders={true} outerBorders={true} />\\n\")), mdx(\"p\", null, \"Only Outer Borders:\"), mdx(NestedGrid, {\n    cells: ['A', ['B', 'C']],\n    outerBorders: true,\n    mdxType: \"NestedGrid\"\n  }), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<NestedGrid cells={['A', ['B', 'C']]} outerBorders={true} />\\n\")), mdx(\"p\", null, \"Only Inner Borders:\"), mdx(NestedGrid, {\n    cells: ['A', ['B', 'C']],\n    innerBorders: true,\n    mdxType: \"NestedGrid\"\n  }), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<NestedGrid cells={['A', ['B', 'C']]} innerBorders={true} />\\n\")), mdx(\"p\", null, \"The cool thing: it also works with elements:\"), mdx(NestedGrid, {\n    cells: [box('A', 'steelblue'), [box('B', 'salmon'), box('C', 'gray')]],\n    mdxType: \"NestedGrid\"\n  }), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"export const box = (label, backgroundColor) => <div style={{ backgroundColor }}>{label}</div>\\n\\n<NestedGrid cells={[box('A', 'steelblue'), [box('B', 'salmon'), box('C', 'gray')]]} />\\n\")), mdx(\"p\", null, \"Overflowing rows:\"), mdx(NestedGrid, {\n    rows: [1, 1],\n    cells: [box('A', 'steelblue'), [box('B', 'salmon'), box('C', 'gray')], box('D', 'steelblue'), [box('E', 'salmon'), box('F', 'gray')]],\n    mdxType: \"NestedGrid\"\n  }), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<NestedGrid\\n  rows={[1, 1]}\\n  cells={[\\n    box('A', 'steelblue'),\\n    [box('B', 'salmon'), box('C', 'gray')],\\n    box('D', 'steelblue'),\\n    [box('E', 'salmon'), box('F', 'gray')],\\n  ]}\\n/>\\n\")), mdx(\"p\", null, \"Different row sizes:\"), mdx(NestedGrid, {\n    rows: [1, 2],\n    cells: [box('A', 'steelblue'), [box('B', 'salmon'), box('C', 'gray')], box('D', 'steelblue'), [box('E', 'salmon'), box('F', 'gray')]],\n    mdxType: \"NestedGrid\"\n  }), mdx(\"br\", null), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"<NestedGrid\\n  rows={[1, 2]}\\n  cells={[\\n    box('A', 'steelblue'),\\n    [box('B', 'salmon'), box('C', 'gray')],\\n    box('D', 'steelblue'),\\n    [box('E', 'salmon'), box('F', 'gray')],\\n  ]}\\n/>\\n\")), mdx(\"p\", null, \"See \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"./SheetGrid\"\n  }, \"SheetGrid\"), \" for more practical examples!\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"site":{"siteMetadata":{"title":"Loophole Letters"}}},"pageContext":{"id":"bc811923-4adc-5268-9d29-478e88e611c9","parent":{"name":"NestedGrid","base":"NestedGrid.mdx","relativePath":"components/NestedGrid.mdx","sourceInstanceName":"content/notes"},"title":"NestedGrid"}},"staticQueryHashes":[]}