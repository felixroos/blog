{"componentChunkName":"component---node-modules-gatsby-theme-notes-src-templates-note-js","path":"/notes/components/Keyboard","result":{"data":{"note":{"id":"b7bdde57-e82f-58f6-a408-58c5e1099a44","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar isBrowser = typeof window !== \"undefined\";\nvar synth = isBrowser && new Synth({\n  volume: -12\n}).toMaster();\nvar poly = isBrowser && new PolySynth(6, Synth, {\n  volume: -12\n}).toMaster();\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"keyboards\"\n  }, \"Keyboards\"), mdx(\"p\", null, \"With Mouse Events + Synth\"), mdx(Keyboard, {\n    options: {\n      range: [\"C3\", \"C5\"]\n    },\n    onAttack: function onAttack(key) {\n      return synth && synth.triggerAttack(key.notes[0]);\n    },\n    onRelease: function onRelease(key) {\n      return synth && synth.triggerRelease([key.notes[0]]);\n    },\n    mdxType: \"Keyboard\"\n  }), mdx(\"h2\", {\n    \"id\": \"with-color\"\n  }, \"With Color\"), mdx(State, {\n    initial: {\n      offset: 60,\n      width: 1.4,\n      rotation: 180,\n      saturation: 80\n    },\n    mdxType: \"State\"\n  }, function (_ref2) {\n    var state = _ref2.state,\n        setState = _ref2.setState;\n    return mdx(React.Fragment, null, mdx(\"label\", null, mdx(\"input\", {\n      min: \"0\",\n      max: \"360\",\n      type: \"range\",\n      value: state.rotation,\n      step: \"1\",\n      onChange: function onChange(e) {\n        return setState({\n          rotation: parseInt(e.target.value)\n        });\n      }\n    }), \"rotation \", state.rotation), mdx(\"br\", null), mdx(\"label\", null, mdx(\"input\", {\n      min: \"0\",\n      max: \"100\",\n      type: \"range\",\n      value: state.offset,\n      step: \"1\",\n      onChange: function onChange(e) {\n        return setState(_objectSpread({}, state, {\n          offset: parseInt(e.target.value)\n        }));\n      }\n    }), \"center \", state.offset), mdx(\"br\", null), mdx(\"label\", null, mdx(\"input\", {\n      min: \"0.1\",\n      max: \"3.0\",\n      type: \"range\",\n      value: state.width,\n      step: \"0.1\",\n      onChange: function onChange(e) {\n        return setState(_objectSpread({}, state, {\n          width: parseFloat(e.target.value)\n        }));\n      }\n    }), \"width \", state.width), mdx(\"br\", null), mdx(\"label\", null, mdx(\"input\", {\n      min: \"0\",\n      max: \"100\",\n      type: \"range\",\n      value: state.saturation,\n      step: \"1\",\n      onChange: function onChange(e) {\n        return setState(_objectSpread({}, state, {\n          saturation: parseInt(e.target.value)\n        }));\n      }\n    }), \"saturation \", state.saturation), mdx(\"br\", null), mdx(\"p\", null, \"angry rainbow\"), mdx(ColorKeyboard, {\n      options: {\n        scaleX: 1,\n        scaleY: 1,\n        range: [\"C2\", \"C6\"]\n      },\n      colorizer: function colorizer(note) {\n        return noteColor(note, state.rotation).desaturate(100 - state.saturation).lighten(noteLightness(note, state.offset, 1 / state.width)).toHex();\n      },\n      mdxType: \"ColorKeyboard\"\n    }), mdx(\"p\", null, \"sinebow\"), mdx(ColorKeyboard, {\n      options: {\n        scaleX: 1,\n        scaleY: 1,\n        range: [\"C2\", \"C6\"]\n      },\n      colorizer: function colorizer(note) {\n        return rainbow(note, state.rotation).desaturate(100 - state.saturation).lighten(noteLightness(note, state.offset, 1 / state.width)).toHex();\n      },\n      mdxType: \"ColorKeyboard\"\n    }), mdx(\"p\", null, \"less angry rainbow\"), mdx(ColorKeyboard, {\n      options: {\n        scaleX: 1,\n        scaleY: 1,\n        range: [\"C2\", \"C6\"]\n      },\n      colorizer: function colorizer(note) {\n        return sinebow(note, state.rotation).desaturate(100 - state.saturation).lighten(noteLightness(note, state.offset, 1 / state.width)).toHex();\n      },\n      mdxType: \"ColorKeyboard\"\n    }));\n  }), mdx(\"h2\", {\n    \"id\": \"chords\"\n  }, \"Chords\"), mdx(ChordDisplay, {\n    mdxType: \"ChordDisplay\"\n  }), mdx(\"h2\", {\n    \"id\": \"scales\"\n  }, \"Scales\"), mdx(ScaleDisplay, {\n    mdxType: \"ScaleDisplay\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"},"image":{"src":"/static/og-image/keyboard-436027a739.png"},"site":{"siteMetadata":{"title":"Loophole Letters"}}},"pageContext":{"id":"b7bdde57-e82f-58f6-a408-58c5e1099a44","parent":{"name":"Keyboard","base":"Keyboard.mdx","relativePath":"components/Keyboard.mdx","sourceInstanceName":"content/notes"},"title":"Keyboard"}}}