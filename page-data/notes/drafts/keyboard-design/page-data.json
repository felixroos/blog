{"componentChunkName":"component---node-modules-gatsby-theme-notes-src-templates-note-js","path":"/notes/drafts/keyboard-design","result":{"data":{"note":{"id":"fa4da441-c447-5050-804d-25e045edfa50","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", {\n    \"id\": \"keyboard-design\"\n  }, \"Keyboard design\"), mdx(\"p\", null, \"Just imagine we want to design a keyboard layout for the piano, without knowing anything about its current design.\"), mdx(\"p\", null, \"Those are the design requirements:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"There are 12 different notes\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The 12 keys repeat to up to 88 keys to fill the human hearing range\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Our eyes & fingers should be able to find key locations quickly\")), mdx(\"p\", null, \"Design insight #1:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"If we would make all the keys look the same, we would have no clue which is which.\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"What if we label the keys with letters ABCDEFGHIJKL?\")), mdx(\"p\", null, \"This would, to some extent, work for our eyes, but our fingers alone would be clueless\"), mdx(\"p\", null, \"Design insight #2:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"We need at least two different types of keys, to give haptic information\")), mdx(\"p\", null, \"So we can comprehend the decision to use white and black keys\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"they have different colors (eyes)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"and different positions/forms (fingers)\")), mdx(\"p\", null, \"Having two types of keys, we have to decide how many of each we will use:\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"What about 6 white and 6 black keys?\")), mdx(\"p\", null, \"Schematically, this would look something like this:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X\")), mdx(\"p\", null, \"or this\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"XX\\u2014XX\\u2014XX\\u2014\")), mdx(\"p\", null, \"or this\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"XXX---XXX---\")), mdx(\"p\", null, \"or this\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"XXXXXX------\")), mdx(\"p\", null, \"or this\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"XXXX\\u2014XX----\")), mdx(\"p\", null, \"\\u2026or any other permutation of 6 inside 12.\"), mdx(\"p\", null, \"(\\u201CX\\u201D is one type of key, and \\u201D-\\u201D the other type)\"), mdx(\"p\", null, \"If we think through the above proposals, none of them, except maybe the last one meet our requirements.\"), mdx(\"p\", null, \"Design insight #3:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Regular patterns create ambiguity\")), mdx(\"p\", null, \"This means, that for example in the first proposal, there are no quickly recognizable properties of a certain key:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-txt\"\n  }), \"X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-\\n          ^ this is the 6th X key from the left\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-txt\"\n  }), \"X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-X-\\n                                ^ this is the 5th X key from the right\\n\")), mdx(\"p\", null, \"As you see, we can not recognize a key without counting.\\nIf we want a keyboard that fills the human hearing range, we need about 80 keys.\\nThis would make 40 white and 40 black keys. Counting from left or right, to identify a key in the middle, we have to count at max to 20!\"), mdx(\"p\", null, \"Without going into detail, thinking through the other proposals, yields a similar result:\\nWe always have to count our way to the middle if we want to recognize a key.\"), mdx(\"p\", null, \"Design insight #4:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Irregular patterns create recognizable anchors\")), mdx(\"p\", null, \"The last pattern is the only one thats irregular. Lets extend it to more keys:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-txt\"\n  }), \"XXXX--XX----XXXX--XX----XXXX--XX----XXXX--XX----XXXX--XX----\\n             ^ this is the 2nd key of the 4 Xes\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-txt\"\n  }), \"XXXX--XX----XXXX--XX----XXXX--XX----XXXX--XX----XXXX--XX----\\n                              ^ this is first key of the 2 Xes\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-txt\"\n  }), \"XXXX--XX----XXXX--XX----XXXX--XX----XXXX--XX----XXXX--XX----\\n                     ^ this is second key after the 2 Xes\\n\")), mdx(\"p\", null, \"This is great! We no longer have to count to the middle to find identify one of the 12 keys.\\nAll we have to do is looking at a smaller region of keys to find out its relation to the others.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Can we do better?\")), mdx(\"p\", null, \"In the 4 vs 2 design, we have to count up to 4, or to two if we use the from the right/left shortcut.\\nMaybe there are patterns that are better in terms of max count size & simplicity.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Design insight #5: If irregularity is the key, maybe we should use numbers that do NOT divide 12\")), mdx(\"p\", null, \"So which numbers do not divide 12? AHA: 5 and 7:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"X-X-X\\u2014X-X\\u2014\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"X-----------\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"X-----X-----\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"X---X---X---\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"X\\u2014X\\u2014X\\u2014X\\u2014\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"X-X-X\\u2014X-X\\u2014\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"X-X-X-X-X-X-\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"?\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"-XX-XX-XX-XX\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"-XXX-XXX-XXX\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"-XXXXX-XXXXX\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"-XXXXXXXXXXX\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"XXXXXXXXXXXX\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"site":{"siteMetadata":{"title":"Loophole Letters"}}},"pageContext":{"id":"fa4da441-c447-5050-804d-25e045edfa50","parent":{"name":"keyboard-design","base":"keyboard-design.mdx","relativePath":"drafts/keyboard-design.mdx","sourceInstanceName":"content/notes"},"title":"keyboard-design"}},"staticQueryHashes":[]}