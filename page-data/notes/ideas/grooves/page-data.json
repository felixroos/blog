{"componentChunkName":"component---node-modules-gatsby-theme-notes-src-templates-note-js","path":"/notes/ideas/grooves","result":{"data":{"note":{"id":"d57e655a-17e0-5fd6-9bf1-4b140f17c1aa","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"taken from notes\"), mdx(\"h1\", {\n    \"id\": \"grooves\"\n  }, \"Grooves\"), mdx(\"p\", null, \"This document tries to find a format to express grooves for different musical styles.\"), mdx(\"h2\", {\n    \"id\": \"format\"\n  }, \"Format\"), mdx(\"p\", null, \"A groove is expressed in rhythmic \\u201CTidal\\u201D Notation, e.g.:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"[[1 5] 8 / /]\\\"\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The above would be two eigths no notes followed by a half note with a dot (three beats long).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The numbers, in this case for a bassline, tell which degree of the current chord/scale is played (see patterns for more on that)\")), mdx(\"h3\", {\n    \"id\": \"problems\"\n  }, \"Problems\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to express simultaneous notes? => use st  rings and \\u2019,\\u2019 like Tidal?\")), mdx(\"h3\", {\n    \"id\": \"multiple-bar-patterns\"\n  }, \"Multiple bar patterns\"), mdx(\"p\", null, \"A groove could also be longer than a bar:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"[\\n  [1 3 4 [0 1]]\\n  [[0 5] [0 b5] 4 0]\\n]\\\"\\n\")), mdx(\"p\", null, \"The above groove (Smoke on the Water) has a length of two bars.\"), mdx(\"h3\", {\n    \"id\": \"randomness\"\n  }, \"randomness\"), mdx(\"p\", null, \"A groove could also be passed as a generator function:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"() => [1, randomElement(3,5), 5, randomElement(3,5)]\\n\")), mdx(\"p\", null, \"The function could then be called, each time the groove is generated.\"), mdx(\"h4\", {\n    \"id\": \"random-chains\"\n  }, \"random chains\"), mdx(\"p\", null, \"Shuffling could be effective to avoid doubling notes / omitting others:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"() => {\\n  const n = shuffle([1,3,5],[1]); // possible combinations 351 531 513 315\\n  return [1, n[0], n[1], n[2]]\\n}\\n\")), mdx(\"p\", null, \"syntax:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"shuffle(array, notFirst?, notLast?)\\n\")), mdx(\"p\", null, \"instead of notFirst/notLast, a filter function could be used for maximal freedom.\"), mdx(\"h2\", {\n    \"id\": \"interpretation\"\n  }, \"Interpretation\"), mdx(\"p\", null, \"The format can then be interpreted to be rendered to actual notes. The important questions to be answered are:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"When should the groove be inserted?\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Which scale should be used?\")), mdx(\"h2\", {\n    \"id\": \"information\"\n  }, \"Information\"), mdx(\"p\", null, \"The following information could be given as a basis of interpretation:\"), mdx(\"h3\", {\n    \"id\": \"chords\"\n  }, \"chords\"), mdx(\"p\", null, \"The chords are given as an Array of SequenceEvents. Each event has a certain time when it occurs and a chord symbol. The time could act as a starting point (1) and the chord as root note for a scale (2).\\nAdditionally, each event could contain a proposed scale that should be used.\"), mdx(\"h3\", {\n    \"id\": \"options\"\n  }, \"options\"), mdx(\"p\", null, \"The options define how the groove should behave:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"loop: boolean. if true, the groove will loop as long as the next start triggers.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"loopStart: path where the loop begins, defaults to 0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"loopEnd: path where the loop ends (default: next 1 == length of groove)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"retrigger: boolean. if true, the groove will be triggered each time a chord starts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"lazy: boolean. if true, the retrigger will only occur when the chord has changed since the last trigger\")), mdx(\"h2\", {\n    \"id\": \"example-1\"\n  }, \"Example 1\"), mdx(\"p\", null, \"Lets start with a simple bass groove:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"groove: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[[1,3], 5, 8, '/']\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"chords: [\\u2018C^7\\u2019, \\u2018C^7\\u2019, \", \"[\\u2018D-7\\u2019, \\u2018G7\\u2019]\", \"]\")), mdx(\"h3\", {\n    \"id\": \"setting-1\"\n  }, \"Setting 1\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"options: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"{ loop:true, retrigger: true }\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"[\\n  [['C2', 'E2'], 'G2', 'C3', '/'],\\n  [['C2', 'E2'], 'G2', 'C3', '/'],\\n  [[['D2', 'F2'], 'A2', ['G2', 'B2'] 'D3'],\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"keeps melodic structure\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"alters groove pace\")), mdx(\"h3\", {\n    \"id\": \"setting-2\"\n  }, \"Setting 2\"), mdx(\"p\", null, \"The same with options \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{ loop:true, retrigger: false }\"), \"\\nloopEnd defaults to path 1, as the groove is one bar long:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"[\\n  ['C2', 'G2', 'C3', '/'],\\n  ['C2', 'G2', 'C3', '/'],\\n  ['D2', 'A2', 'G3', '/'],\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"keeps groove pace\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"alters melodic structure\")), mdx(\"h3\", {\n    \"id\": \"problems-1\"\n  }, \"Problems\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"How to handle retrigger: false when notes \\u201Clean over\\u201D the chord change? \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"e.g. groove \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[1,5]\"), \" (half notes) with chords \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"['C6','A7','D-7','G7']\"), \" (quarters)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"=> result \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"['C','A']\"), \". As soon as the A7 arrives, the C no longer fits, nor does the A on the G.\")))));\n}\n;\nMDXContent.isMDXComponent = true;"},"site":{"siteMetadata":{"title":"Loophole Letters"}}},"pageContext":{"id":"d57e655a-17e0-5fd6-9bf1-4b140f17c1aa","parent":{"name":"grooves","base":"grooves.md","relativePath":"ideas/grooves.md","sourceInstanceName":"content/notes"},"title":"grooves"}},"staticQueryHashes":[]}