{"componentChunkName":"component---node-modules-gatsby-theme-notes-src-templates-note-js","path":"/notes/ideas/rhythm-permutation","result":{"data":{"note":{"id":"03d2dae4-96a0-5ac3-abd9-bb4666db3694","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Moved from harmonical\"), mdx(\"h2\", {\n    \"id\": \"idea-1-numbers-as-lengths\"\n  }, \"Idea 1: numbers as lengths\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[2,1,1]\"), \" could be half, quarter quarter\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"rhythmPermutations(4)\\n\")), mdx(\"p\", null, \"could yield:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"[[1, 1, 1, 1], [1, 1, 2], [1, 2, 1], [1, 3], [2, 1, 1], [2, 2], [3, 1], [4]]\\n\")), mdx(\"p\", null, \"Which runs the permutator with all numbers that fit into the grid size (4).\\nThe result can be interpreted as all possible rhythms inside a grid of 4 units.\"), mdx(\"h3\", {\n    \"id\": \"restrict-sizes\"\n  }, \"restrict sizes\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"rhythmPermutations(4, { allowedSizes: [1, 2, 4] })\\n\")), mdx(\"p\", null, \"could yield:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"[[1, 1, 1, 1], [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2], [4]]\\n\")), mdx(\"h3\", {\n    \"id\": \"forbid-syncopation\"\n  }, \"forbid syncopation\"), mdx(\"p\", null, \"to be able to test if a rhythm syncopates, we need those two helpers:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function sum(path) {\\n  return path.reduce((sum, size) => sum + size, 0)\\n}\\nfunction positionInGroup(path, groupSize) {\\n  return sum(path) % groupSize\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"sum just adds all given numbers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"positionInGroup tells the position inside a given group size:\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"positionInGroup([2, 1], 2) // 1 e.g. in quarter grid: after half and quarter note\\npositionInGroup([1, 1], 2) // 0\\npositionInGroup([1, 1], 3) // 2\\npositionInGroup([1, 1, 1], 4) // 3 e.g. in 8ths grid: offbeat on 4ths 8th note (= index 3)\\npositionInGroup([1, 1, 1, 1], 3) // 1 e.g. 2 of second measure in 3/4\\n\")), mdx(\"p\", null, \"To tell if a syncopation would happen, we can do this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function exceedsGroup(groupSize) {\\n  return (path, next) => return positionInGroup(path, groupSize) + next <= groupSize;\\n}\\n\\nfunction isSyncopating(path, next) {\\n  return (groupSize) => return positionInGroup(path, groupSize) + next <= groupSize;\\n}\\n\")), mdx(\"p\", null, \"examples:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"isSyncopating([1], 2)()\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"rhythmPermutations(4, { validate: (path, next) =>  });\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"site":{"siteMetadata":{"title":"Loophole Letters"}}},"pageContext":{"id":"03d2dae4-96a0-5ac3-abd9-bb4666db3694","parent":{"name":"rhythm-permutation","base":"rhythm-permutation.md","relativePath":"ideas/rhythm-permutation.md","sourceInstanceName":"content/notes"},"title":"rhythm-permutation"}},"staticQueryHashes":[]}