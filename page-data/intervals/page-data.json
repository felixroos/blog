{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/intervals/","result":{"data":{"site":{"siteMetadata":{"title":"Loophole Letters","social":[{"name":"github","url":"https://github.com/felixroos"},{"name":"GitHub","url":"https://github.com/gatsbyjs"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"0f840e45-c3a8-513f-a9a4-3534990868c4","excerpt":"This article examines pure intervals and presents different systems to organize them.\nI will try to be not influenced by current musicalâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Pure Intervals\",\n  \"date\": \"2020-04-22T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This article examines pure intervals and presents different systems to organize them.\\nI will try to be not influenced by current musical practice, only using musical interval terms as a reference.\"), mdx(\"h2\", {\n    \"id\": \"ratios-on-a-monochord\"\n  }, \"Ratios on a Monochord\"), mdx(\"p\", null, \"A pure interval is a ratio of two pitches, that can be defined as a fraction of natural numbers:\"), mdx(Monochord, {\n    value: 1,\n    base: 440,\n    mdxType: \"Monochord\"\n  }), mdx(Monochord, {\n    value: 4 / 5,\n    base: 440,\n    mdxType: \"Monochord\"\n  }), mdx(Monochord, {\n    value: 2 / 3,\n    base: 440,\n    mdxType: \"Monochord\"\n  }), mdx(Monochord, {\n    value: 1 / 2,\n    base: 440,\n    mdxType: \"Monochord\"\n  }), mdx(\"p\", null, \"The above monochords play a pure major triad (+octave).\\nYou can activate them by hovering over the strings or clicking/tapping on the circles.\"), mdx(\"h3\", {\n    \"id\": \"length-ratios\"\n  }, \"Length Ratios\"), mdx(\"p\", null, \"The fractions on the left of the monochords above describe the relation of the vibrating length to the total length.\\nIf we wanted to build a real instrument with those intervals, we could calculate the lengths like that:\"), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"L_1 = 100cm\"), mdx(\"br\", null), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"L_2 = \\\\frac{4}{5}*100cm = 80cm\"), mdx(\"br\", null), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"L_3 = \\\\frac{2}{3}*100cm = 66 \\\\frac{2}{3}cm\"), mdx(\"br\", null), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"L_4 = \\\\frac{1}{2}*100cm = 50cm\"), mdx(\"br\", null), mdx(\"br\", null), mdx(\"h3\", {\n    \"id\": \"frequency-ratios\"\n  }, \"Frequency Ratios\"), mdx(\"p\", null, \"It can be confusing to describe the ratios as length fractions, as the length is antiproportional to the pitch:\\nIf the length gets shorter, the pitch goes up.\\nBecause of that, the standard way of describing pitch ratios is the inversion of the length ratio, which is the ratio of the frequencies:\"), mdx(Monochord, {\n    value: 1,\n    base: 440,\n    invert: true,\n    mdxType: \"Monochord\"\n  }), mdx(Monochord, {\n    value: 4 / 5,\n    base: 440,\n    invert: true,\n    mdxType: \"Monochord\"\n  }), mdx(Monochord, {\n    value: 2 / 3,\n    base: 440,\n    invert: true,\n    mdxType: \"Monochord\"\n  }), mdx(Monochord, {\n    value: 1 / 2,\n    base: 440,\n    invert: true,\n    mdxType: \"Monochord\"\n  }), mdx(\"p\", null, \"With those ratios, we can calculate the frequencies like that:\"), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"f_1 = 440hz\"), mdx(\"br\", null), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"f_2 = \\\\frac{5}{4}*440hz = 550hz\"), mdx(\"br\", null), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"f_3 = \\\\frac{3}{2}*440hz = 660hz\"), mdx(\"br\", null), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"f_4 = \\\\frac{2}{1}*440hz = 880hz\"), mdx(\"br\", null), mdx(\"br\", null), mdx(\"h2\", {\n    \"id\": \"ordering-ratios\"\n  }, \"Ordering Ratios\"), mdx(\"p\", null, \"As a general rule, we can observe that simpler ratios result in more consonant sounds, while more complex ratios are more dissonant.\\nConsonance is often defined as pleasant and soft, while dissonance is unpleasant and edgy.\"), mdx(\"p\", null, \"This invites us to think about putting ratios in a specific order to get insights of their nature.\"), mdx(\"h3\", {\n    \"id\": \"the-harmonic-series\"\n  }, \"The Harmonic Series\"), mdx(\"p\", null, \"The harmonic series is a natural way of sorting ratios. As already shown in my last post, the harmonic series is a collection of pitches that can be generated by multiplying a base frequency by natural numbers:\"), mdx(Monochord, {\n    label: 1,\n    harmonic: 1,\n    amplitude: 1,\n    base: 110,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{2}{1}\"), \" octave\", mdx(Monochord, {\n    label: 2,\n    harmonic: 2,\n    amplitude: 1,\n    base: 110,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{3}{2}\"), \" perfect fifth\", mdx(Monochord, {\n    label: 3,\n    harmonic: 3,\n    amplitude: 1,\n    base: 110,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{4}{3}\"), \" perfect fourth\", mdx(Monochord, {\n    label: 4,\n    harmonic: 4,\n    amplitude: 1,\n    base: 110,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{5}{4}\"), \" major third\", mdx(Monochord, {\n    label: 5,\n    harmonic: 5,\n    amplitude: 1,\n    base: 110,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{6}{5}\"), \" minor third\", mdx(Monochord, {\n    label: 6,\n    harmonic: 6,\n    amplitude: 1,\n    base: 110,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{7}{6}\"), \" minor third\", mdx(Monochord, {\n    label: 7,\n    harmonic: 7,\n    amplitude: 1,\n    base: 110,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{8}{7}\"), \" major second\", mdx(Monochord, {\n    label: 8,\n    harmonic: 8,\n    amplitude: 1,\n    base: 110,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{9}{8}\"), \" major second\", mdx(Monochord, {\n    label: 9,\n    harmonic: 9,\n    amplitude: 1,\n    base: 110,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{10}{9}\"), \" major second\", mdx(Monochord, {\n    label: 10,\n    harmonic: 10,\n    amplitude: 1,\n    base: 110,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{11}{10}\"), \" ? second\", mdx(Monochord, {\n    label: 11,\n    harmonic: 11,\n    amplitude: 1,\n    base: 110,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{12}{11}\"), \" ? second\", mdx(Monochord, {\n    label: 12,\n    harmonic: 12,\n    amplitude: 1,\n    base: 110,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{13}{12}\"), \" ? second\", mdx(Monochord, {\n    label: 13,\n    harmonic: 13,\n    amplitude: 1,\n    base: 110,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{14}{13}\"), \" minor second\", mdx(Monochord, {\n    label: 14,\n    harmonic: 14,\n    amplitude: 1,\n    base: 110,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{15}{14}\"), \" minor second\", mdx(Monochord, {\n    label: 15,\n    harmonic: 15,\n    amplitude: 1,\n    base: 110,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{16}{15}\"), \" minor second\", mdx(Monochord, {\n    label: 16,\n    harmonic: 16,\n    amplitude: 1,\n    base: 110,\n    mdxType: \"Monochord\"\n  }), mdx(\"br\", null), mdx(\"br\", null), \"The fractions on the right show the ratios of consecutive harmonics + the name of the closest musical interval.\", mdx(\"p\", null, \"As you can see, there are many different major and minor seconds, as well as seconds that are somewhere in the middle.\\nIf you have no music background, don\\u2019t worry much about the names.\"), mdx(\"p\", null, \"Additionally, we can also form ratios between non-consecutive harmonics, like 5/3.\\nThis gives us a lot of options, which are difficult to visualize in this one dimensional manner.\"), mdx(\"h3\", {\n    \"id\": \"the-lambdoma\"\n  }, \"The Lambdoma\"), mdx(\"p\", null, \"The Lambdoma arranges ratios in a two dimensional grid, using one dimension for the numerator and another for the denominator:\"), mdx(State, {\n    initial: {\n      size: 8,\n      clamp: true,\n      rotate: true,\n      hideExtensions: false,\n      playWithTonic: true,\n      playOnHover: true\n    },\n    mdxType: \"State\"\n  }, function (_ref2) {\n    var state = _ref2.state,\n        setState = _ref2.setState;\n    return mdx(React.Fragment, null, mdx(\"p\", null, \"Size \", state.size, \"x\", state.size, mdx(\"br\", null), mdx(Slider, {\n      step: 1,\n      min: 1,\n      max: 32,\n      value: state.size,\n      onChange: function onChange(_, v) {\n        return setState({\n          size: v\n        });\n      },\n      mdxType: \"Slider\"\n    })), mdx(Lambdoma, {\n      margin: 0,\n      cols: state.size,\n      rows: state.size,\n      angle: state.rotate ? 45 : 0,\n      radius: 20,\n      base: 440,\n      clamp: state.clamp,\n      hideExtensions: state.hideExtensions,\n      hideLines: false,\n      hideZeroes: false,\n      playWithTonic: state.playWithTonic,\n      playOnHover: state.playOnHover,\n      mdxType: \"Lambdoma\"\n    }), mdx(\"br\", null), mdx(\"h4\", null, \"Options\"), mdx(\"label\", null, mdx(Switch, {\n      checked: state.playOnHover,\n      color: \"primary\",\n      onChange: function onChange(e) {\n        return setState({\n          playOnHover: e.target.checked\n        });\n      },\n      mdxType: \"Switch\"\n    }), \"Autplay on hover\"), mdx(\"br\", null), mdx(\"label\", null, mdx(Switch, {\n      checked: state.playWithTonic,\n      color: \"primary\",\n      onChange: function onChange(e) {\n        return setState({\n          playWithTonic: e.target.checked\n        });\n      },\n      mdxType: \"Switch\"\n    }), \"Play together with fundamental pitch\"), mdx(\"br\", null), mdx(\"label\", null, mdx(Switch, {\n      checked: state.clamp,\n      color: \"primary\",\n      onChange: function onChange(e) {\n        return setState({\n          clamp: e.target.checked\n        });\n      },\n      mdxType: \"Switch\"\n    }), \"Only show fractions from -1 to +1 octave, which are all ratios inside \", mdx(InlineMath, {\n      mdxType: \"InlineMath\"\n    }, \"[\\\\frac{1}{2}, \\\\frac{2}{2}]\")), mdx(\"br\", null), mdx(\"label\", null, mdx(Switch, {\n      checked: state.hideExtensions,\n      color: \"primary\",\n      onChange: function onChange(e) {\n        return setState({\n          hideExtensions: e.target.checked\n        });\n      },\n      mdxType: \"Switch\"\n    }), \"Only show reduced fractions\"));\n  }), mdx(\"br\", null), mdx(\"br\", null), mdx(\"h4\", {\n    \"id\": \"observations\"\n  }, \"Observations\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Extensions of simpler fractions represent the same interval\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All extensions lay on lines that go from 0/0 to infinity\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The vertical line is the fundamental ratio\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ratios on the left fall below, while ratios on the right rise above the\\nfundamental.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Each diagonal line that goes down right follows the pattern of the harmonic series\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Each diagonal line that goes down left follows the pattern of the subharmonic series, which is a mirrored version of the harmonic series\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ratios get more complicated as we go down\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Many of the intervals further down sound \\u201Cout of tune\\u201D, compared to standard\\nmusical intervals\")), mdx(\"h3\", {\n    \"id\": \"calculating-with-ratios\"\n  }, \"Calculating with Ratios\"), mdx(\"p\", null, \"Before we explore further ways of ordering ratios, we need to look at basic calculation rules:\"), mdx(\"h4\", {\n    \"id\": \"adding-ratios\"\n  }, \"Adding ratios\"), mdx(\"p\", null, \"We can add ratios together by multiplying:\"), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{3}{2}*\\\\frac{4}{3} = \\\\frac{12}{6} = \\\\frac{2}{1}\"), mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", null, \"Here we add a fifth and a fourth together, resulting in the ratio for one octave\\nhigher. In length ratios, this would be inversed:\"), mdx(Monochord, {\n    value: 2 / 3,\n    invert: false,\n    base: 440,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"*\\\\frac{3}{4}\"), mdx(Monochord, {\n    value: 1 / 2,\n    invert: false,\n    base: 440,\n    mdxType: \"Monochord\"\n  }), mdx(\"br\", null), mdx(\"br\", null), mdx(\"h4\", {\n    \"id\": \"subtracting-ratios\"\n  }, \"Subtracting ratios\"), mdx(\"p\", null, \"As opposed to adding by multiplying, we can subtract ratios by dividing:\"), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{2}{1}:\\\\frac{4}{3} = \\\\frac{2}{1}*\\\\frac{3}{4} = \\\\frac{6}{4} = \\\\frac{3}{2}\"), mdx(\"br\", null), mdx(\"br\", null), \"If we subtract a fourth from one octave, we get a fifth. The same with length ratios\", mdx(Monochord, {\n    value: 1 / 2,\n    invert: false,\n    base: 440,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \":\\\\frac{3}{4} = *\\\\frac{4}{3}\"), mdx(Monochord, {\n    value: 2 / 3,\n    invert: false,\n    base: 440,\n    mdxType: \"Monochord\"\n  }), mdx(\"br\", null), mdx(\"br\", null), mdx(\"h4\", {\n    \"id\": \"stacking-ratios\"\n  }, \"Stacking ratios\"), mdx(\"p\", null, \"To stack a ratio n times, we can just use the power of n\"), mdx(\"p\", null, \"For example, \", mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{3}{2}^{n}\"), \" stacks n fifths\"), \"On a monochord, stacking 4 fifths would look like that:\", mdx(State, {\n    mdxType: \"State\"\n  }, function () {\n    return Array.from({\n      length: 5\n    }, function (_, i) {\n      return mdx(React.Fragment, {\n        key: i\n      }, mdx(Monochord, {\n        value: Math.pow(2 / 3, i),\n        invert: false,\n        base: 220,\n        mdxType: \"Monochord\"\n      }), mdx(InlineMath, {\n        mdxType: \"InlineMath\"\n      }, \"\\\\frac{2}{3}^{\".concat(i, \"}\")));\n    });\n  }), mdx(\"br\", null), mdx(\"br\", null), mdx(\"h4\", {\n    \"id\": \"octave-reduction\"\n  }, \"Octave Reduction\"), mdx(\"p\", null, \"In most cases, we are only interested in intervals that are inside one octave.\\nMoving ratios inside that range is called octave reduction.\"), mdx(\"p\", null, \"We can move any ratio by n octaves if we multiply it with \", mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"2^n\")), mdx(\"p\", null, \"For example, we could reduce the above stacked fifths into one octave like that:\"), mdx(Monochord, {\n    value: 1,\n    invert: false,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{2}{3}^{0}*2^0\"), mdx(Monochord, {\n    value: 2 / 3,\n    invert: false,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{2}{3}^{1}*2^0\"), mdx(Monochord, {\n    value: 8 / 9,\n    invert: false,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{2}{3}^{2}*2^1\"), mdx(Monochord, {\n    value: 16 / 27,\n    invert: false,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{2}{3}^{3} * 2^1\"), mdx(Monochord, {\n    value: 64 / 81,\n    invert: false,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{2}{3}^{4}*2^2\"), mdx(\"p\", null, \"Note that with length ratios, the movement direction is reversed (like above, positive exponents move down).\"), mdx(\"br\", null), mdx(\"h4\", {\n    \"id\": \"sorting-ratios\"\n  }, \"Sorting ratios\"), mdx(\"p\", null, \"Ratios that have been octave reduced can be sorted, to receive a harmonious scale:\"), mdx(Monochord, {\n    value: 1,\n    invert: false,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{2}{3}^{0}*2^0\"), mdx(Monochord, {\n    value: 8 / 9,\n    invert: false,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{2}{3}^{2}*2^1\"), mdx(Monochord, {\n    value: 64 / 81,\n    invert: false,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{2}{3}^{4}*2^2\"), mdx(Monochord, {\n    value: 2 / 3,\n    invert: false,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{2}{3}^{1}*2^0\"), mdx(Monochord, {\n    value: 16 / 27,\n    invert: false,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"\\\\frac{2}{3}^{3} * 2^1\"), mdx(\"p\", null, \"Here we can hear that 4 octave reduced stacked fifths result in a major pentatonic scale.\"), mdx(\"p\", null, \"This is just the beginning, as there are more possibilities to organize ratios.\"), mdx(\"p\", null, \"In the next post, we will look at n-Limit tuning and compare just intonation systems to equal tempered ones.\"));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/intervals/","title":"Pure Intervals","tags":[],"keywords":[],"date":"April 22, 2020"},"previous":{"__typename":"MdxBlogPost","id":"f32b7e0f-4d3d-55fb-8e79-2892c936ef3d","excerpt":"Let's understand the harmonic series by looking at a monochord: You can play it by hovering over it with the mouse.\nThe length / pitch canâ€¦","slug":"/harmonics/","title":"The Harmonic Series & Additive Synthesis","date":"April 20, 2020"},"next":null},"pageContext":{"id":"0f840e45-c3a8-513f-a9a4-3534990868c4","previousId":"f32b7e0f-4d3d-55fb-8e79-2892c936ef3d"}}}