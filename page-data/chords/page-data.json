{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/chords/","result":{"data":{"site":{"siteMetadata":{"title":"Loophole Letters","social":[{"name":"github","url":"https://github.com/felixroos"},{"name":"GitHub","url":"https://github.com/gatsbyjs"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"8bb5e8c2-38f0-5043-b36e-0dd0e3ce18a1","excerpt":"Chords Let's use the SVG Piano to display chords. My favourite lib for music theory in javascript is  tonal .\nIt comes with a dictionary…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Chords and Scales\",\n  \"date\": \"2020-03-27T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"chords\"\n  }, \"Chords\"), mdx(\"p\", null, \"Let\\u2019s use the SVG Piano to display chords. My favourite lib for music theory in javascript is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/tonaljs/tonal\"\n  }, \"tonal\"), \".\\nIt comes with a dictionary that contains all more or less common chords. We will use that to build a simple chord selection.\\nTo get the notes of a chord on a certain root, we can do it like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// we can get all chord symbols with ChordType.names()\\nfunction getChordNotes(tonic, symbol) {\\n  return ChordType.get(symbol).intervals.map(interval =>\\n    Note.transpose(tonic, interval)\\n  )\\n}\\n\")), mdx(\"p\", null, \"If we combine this with our svg piano, and some mouse events + colorization + labels, we can build this:\"), mdx(ChordDisplay, {\n    mdxType: \"ChordDisplay\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/felixroos/blog/blob/master/content/components/ChordDisplay.js\"\n  }, \"show source\")), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"scales--step-chords\"\n  }, \"Scales + Step Chords\"), mdx(\"p\", null, \"Tonal also knows scales:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function getScaleWithNumerals(root, name) {\\n  const scale = Scale.get(`${root} ${name}`)\\n  const numerals = scale.intervals.map(\\n    interval => RomanNumeral.get(Interval.get(interval)).name\\n  )\\n  return { ...scale, numerals }\\n}\\n\")), mdx(\"p\", null, \"It would be cool to trigger step chords with the mouse.\\nA step chord is nothing but a every other note in the scale starting from any note in the scale:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// variables obtained from getScaleWithNumerals:\\n// notes = pitches in scale\\n// intervals = intervals of scale\\nfunction getStepChord(root, count = 3) {\\n  let chordNotes = [root]\\n  for (let i = 1; i < count; ++i) {\\n    const lastNote = chordNotes[chordNotes.length - 1]\\n    const index = notes.indexOf(Note.get(lastNote).pc)\\n    const nextIndex = index + 2\\n    let nextInterval = intervals[nextIndex % intervals.length]\\n    if (nextIndex > intervals.length - 1) {\\n      nextInterval = Interval.add(nextInterval, \\\"8P\\\")\\n    }\\n    // make next interval relative to current root\\n    nextInterval = Interval.substract(nextInterval, intervals[index])\\n    const nextNote = Note.transpose(lastNote, nextInterval)\\n    chordNotes.push(nextNote)\\n  }\\n  return chordNotes\\n}\\n\")), mdx(\"p\", null, \"Disabling all keys that are not in scale + applying coloring (blue = scale note, yellow = played note).\\nMake sure you try more than one note to let the magic happen!\"), mdx(ScaleDisplay, {\n    mdxType: \"ScaleDisplay\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/felixroos/blog/blob/master/content/components/ScaleDisplay.js\"\n  }, \"show source\")));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/chords/","title":"Chords and Scales","tags":[],"keywords":[],"date":"March 27, 2020","image":null,"imageAlt":null,"socialImage":null},"previous":{"__typename":"MdxBlogPost","id":"d9b97b82-b5d4-5b61-ab6b-49f9b717860d","excerpt":"Let's talk about (virtual) keyboards: They are good to visualize chords as a static image ...and melodies as an animation. they are…","slug":"/svg-piano/","title":"SVG Piano","date":"March 26, 2020"},"next":{"__typename":"MdxBlogPost","id":"9e433633-2afd-5cc7-9082-8fe6ccbace1d","excerpt":"This article explains a recursive algorithm that performs a combinatorial search.\nThe concept will be used in a future post to find all…","slug":"/combinatorial-search/","title":"Combinatorial Search","date":"March 31, 2020"}},"pageContext":{"id":"8bb5e8c2-38f0-5043-b36e-0dd0e3ce18a1","previousId":"d9b97b82-b5d4-5b61-ab6b-49f9b717860d","nextId":"9e433633-2afd-5cc7-9082-8fe6ccbace1d"}},"staticQueryHashes":["386998304","4198970465","764694655"]}