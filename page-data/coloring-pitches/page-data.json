{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/coloring-pitches/","result":{"data":{"site":{"siteMetadata":{"title":"Loophole Letters","social":[{"name":"github","url":"https://github.com/felixroos"},{"name":"GitHub","url":"https://github.com/gatsbyjs"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"26f772d2-9d92-57d7-953c-c6aa8bb6e664","excerpt":"Let's play with colors. Vizualization loves color. To map musical notes to color, we can do various things. rainbow with hsl One simpleâ€¦","body":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Coloring Pitches\",\n  \"date\": \"2020-04-01T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(ColorKeyboard, {\n    options: {\n      scaleX: 0.5,\n      scaleY: 0.5,\n      range: [\"C0\", \"C7\"]\n    },\n    colorizer: function colorizer(note) {\n      return sinebow(note).desaturate(20).toHex();\n    },\n    mdxType: \"ColorKeyboard\"\n  }), mdx(\"p\", null, \"Let\\u2019s play with colors. Vizualization loves color. To map musical notes to color, we can do various things.\"), mdx(\"h2\", {\n    \"id\": \"rainbow-with-hsl\"\n  }, \"rainbow with hsl\"), mdx(\"p\", null, \"One simple approach is using the hsl color, dividing the 360 degrees through 12 pitches:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { TinyColor } from \\\"@ctrl/tinycolor\\\"\\nimport { Note } from \\\"@tonaljs/tonal\\\"\\n\\nexport function noteColor(note: string, rotate = 0): TinyColor {\\n  return new TinyColor({\\n    h: Math.floor((rotate + (Note.chroma(note) / 12) * 360) % 360),\\n    s: 100,\\n    l: 50,\\n  })\\n}\\n\")), mdx(\"p\", null, \"If we throw that into the svg-piano:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-tsx\"\n  }), \"import { Range } from \\\"@tonaljs/tonal\\\"\\n\\nexport function ColorKeyboard({ options, colorizer = noteColor }) {\\n  options = { range: [\\\"C3\\\", \\\"C4\\\"], ...options }\\n  return (\\n    <Keyboard\\n      options={{\\n        ...options,\\n        colorize: Range.chromatic(options.range).map(note => ({\\n          keys: [note],\\n          color: colorizer(note).toHex(),\\n        })),\\n      }}\\n    />\\n  )\\n}\\n\")), mdx(ColorKeyboard, {\n    options: {\n      scaleX: 1,\n      scaleY: 1,\n      range: [\"C2\", \"C6\"]\n    },\n    mdxType: \"ColorKeyboard\"\n  }), mdx(\"p\", null, \"If this is too aggressive for you, read on..\"), mdx(\"h2\", {\n    \"id\": \"using-d3-scale-chromatic\"\n  }, \"Using d3-scale-chromatic\"), mdx(\"p\", null, \"After just scratching the surface of color research, I found out that there is a universe of color nerds out there, most of them coming from the data viz world.\\nThe best color scales for this purpose I found so far are the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/d3/d3-scale-chromatic#cyclical\"\n  }), \"cyclical scales of d3-scale-chromatic\"), \".\"), mdx(\"h3\", {\n    \"id\": \"sinebow\"\n  }, \"sinebow\"), mdx(ColorKeyboard, {\n    options: {\n      scaleX: 1,\n      scaleY: 1,\n      range: [\"C2\", \"C6\"]\n    },\n    colorizer: function colorizer(note) {\n      return sinebow(note).toHex();\n    },\n    mdxType: \"ColorKeyboard\"\n  }), mdx(\"h3\", {\n    \"id\": \"less-angry-rainbow\"\n  }, \"Less angry rainbow\"), mdx(ColorKeyboard, {\n    options: {\n      scaleX: 1,\n      scaleY: 1,\n      range: [\"C2\", \"C6\"]\n    },\n    colorizer: function colorizer(note) {\n      return rainbow(note).toHex();\n    },\n    mdxType: \"ColorKeyboard\"\n  }), mdx(\"p\", null, \"I like this one the most\"), mdx(\"h2\", {\n    \"id\": \"note-height-as-lightening-factor\"\n  }, \"Note height as lightening factor\"), mdx(State, {\n    initial: {\n      offset: 60,\n      width: 1.4,\n      rotation: 180,\n      saturation: 80\n    },\n    mdxType: \"State\"\n  }, function (_ref2) {\n    var state = _ref2.state,\n        setState = _ref2.setState;\n    return mdx(React.Fragment, null, mdx(\"label\", null, mdx(\"input\", {\n      min: \"0\",\n      max: \"360\",\n      type: \"range\",\n      value: state.rotation,\n      step: \"1\",\n      onChange: function onChange(e) {\n        return setState({\n          rotation: parseInt(e.target.value)\n        });\n      }\n    }), \"rotation \", state.rotation), mdx(\"br\", null), mdx(\"label\", null, mdx(\"input\", {\n      min: \"0\",\n      max: \"100\",\n      type: \"range\",\n      value: state.offset,\n      step: \"1\",\n      onChange: function onChange(e) {\n        return setState(_objectSpread({}, state, {\n          offset: parseInt(e.target.value)\n        }));\n      }\n    }), \"center \", state.offset), mdx(\"br\", null), mdx(\"label\", null, mdx(\"input\", {\n      min: \"0.1\",\n      max: \"3.0\",\n      type: \"range\",\n      value: state.width,\n      step: \"0.1\",\n      onChange: function onChange(e) {\n        return setState(_objectSpread({}, state, {\n          width: parseFloat(e.target.value)\n        }));\n      }\n    }), \"width \", state.width), mdx(\"br\", null), mdx(\"label\", null, mdx(\"input\", {\n      min: \"0\",\n      max: \"100\",\n      type: \"range\",\n      value: state.saturation,\n      step: \"1\",\n      onChange: function onChange(e) {\n        return setState(_objectSpread({}, state, {\n          saturation: parseInt(e.target.value)\n        }));\n      }\n    }), \"saturation \", state.saturation), mdx(\"br\", null), mdx(\"p\", null, \"angry rainbow\"), mdx(ColorKeyboard, {\n      options: {\n        scaleX: 1,\n        scaleY: 1,\n        range: [\"C2\", \"C6\"]\n      },\n      colorizer: function colorizer(note) {\n        return noteColor(note, state.rotation).desaturate(100 - state.saturation).lighten(noteLightness(note, state.offset, 1 / state.width)).toHex();\n      },\n      mdxType: \"ColorKeyboard\"\n    }), mdx(\"p\", null, \"sinebow\"), mdx(ColorKeyboard, {\n      options: {\n        scaleX: 1,\n        scaleY: 1,\n        range: [\"C2\", \"C6\"]\n      },\n      colorizer: function colorizer(note) {\n        return rainbow(note, state.rotation).desaturate(100 - state.saturation).lighten(noteLightness(note, state.offset, 1 / state.width)).toHex();\n      },\n      mdxType: \"ColorKeyboard\"\n    }), mdx(\"p\", null, \"less angry rainbow\"), mdx(ColorKeyboard, {\n      options: {\n        scaleX: 1,\n        scaleY: 1,\n        range: [\"C2\", \"C6\"]\n      },\n      colorizer: function colorizer(note) {\n        return sinebow(note, state.rotation).desaturate(100 - state.saturation).lighten(noteLightness(note, state.offset, 1 / state.width)).toHex();\n      },\n      mdxType: \"ColorKeyboard\"\n    }));\n  }), mdx(\"h2\", {\n    \"id\": \"next-steps\"\n  }, \"Next Steps\"), mdx(\"p\", null, \"Thats enough for today. More ideas for the future:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"colorize based on the circle of fifths instead of chromatically\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"mix chord colors out of individual note colors\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use non cyclic color scales for things like interval \\u201Cspice\\u201D or voicing diff\")), mdx(\"h2\", {\n    \"id\": \"links-from-the-colorsphere\"\n  }, \"Links from the colorsphere\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://krazydad.com/tutorials/makecolors.php\"\n  }), \"https://krazydad.com/tutorials/makecolors.php\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://basecase.org/env/on-rainbows\"\n  }), \"http://basecase.org/env/on-rainbows\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://mycarta.wordpress.com/2013/02/21/perceptual-rainbow-palette-the-method/\"\n  }), \"https://mycarta.wordpress.com/2013/02/21/perceptual-rainbow-palette-the-method/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/gka/chroma.js\"\n  }), \"https://github.com/gka/chroma.js\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/d3/d3-color\"\n  }), \"https://github.com/d3/d3-color\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://bl.ocks.org/mbostock/310c99e53880faec2434\"\n  }), \"https://bl.ocks.org/mbostock/310c99e53880faec2434\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://bl.ocks.org/mbostock/310c99e53880faec2434\"\n  }), \"https://bl.ocks.org/mbostock/310c99e53880faec2434\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://whitneymusicbox.org/\"\n  }), \"http://whitneymusicbox.org/\"))));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/coloring-pitches/","title":"Coloring Pitches","tags":[],"keywords":[],"date":"April 01, 2020"},"previous":{"__typename":"MdxBlogPost","id":"9e433633-2afd-5cc7-9082-8fe6ccbace1d","excerpt":"This article explains a recursive algorithm that performs a combinatorial search.\nThe concept will be used in a future post to find allâ€¦","slug":"/combinatorial-search/","title":"Combinatorial Search","date":"March 31, 2020"},"next":null},"pageContext":{"id":"26f772d2-9d92-57d7-953c-c6aa8bb6e664","previousId":"9e433633-2afd-5cc7-9082-8fe6ccbace1d"}}}