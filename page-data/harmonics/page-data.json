{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/harmonics/","result":{"data":{"site":{"siteMetadata":{"title":"Loophole Letters","social":[{"name":"github","url":"https://github.com/felixroos"},{"name":"GitHub","url":"https://github.com/gatsbyjs"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"f32b7e0f-4d3d-55fb-8e79-2892c936ef3d","excerpt":"Let's understand the harmonic series by looking at a monochord: You can play it by hovering over it with the mouse.\nThe length / pitch canâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"The Harmonic Series & Additive Synthesis\",\n  \"date\": \"2020-04-20T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Let\\u2019s understand the harmonic series by looking at a monochord:\"), mdx(Monochord, {\n    draggable: true,\n    mdxType: \"Monochord\"\n  }), mdx(\"p\", null, \"You can play it by hovering over it with the mouse.\\nThe length / pitch can be adjusted by dragging the right circle.\"), mdx(\"h2\", {\n    \"id\": \"overtones-of-the-harmonic-series\"\n  }, \"Overtones of the Harmonic Series\"), mdx(\"p\", null, \"Generally, frequencies that are higher than a certain fundamental frequency are called overtones.\\nStrings that are fixed on both ends will produce a set of sine wave overtones that are whole number multiples of the fundamental frequency.\\nThis subset of overtones is called the harmonic series:\"), mdx(Monochord, {\n    label: 1,\n    harmonic: 1,\n    amplitude: 1,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(Monochord, {\n    label: 2,\n    harmonic: 2,\n    amplitude: 1,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(Monochord, {\n    label: 3,\n    harmonic: 3,\n    amplitude: 1,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(Monochord, {\n    label: 4,\n    harmonic: 4,\n    amplitude: 1,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(Monochord, {\n    label: 5,\n    harmonic: 5,\n    amplitude: 1,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(Monochord, {\n    label: 6,\n    harmonic: 6,\n    amplitude: 1,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(Monochord, {\n    label: 7,\n    harmonic: 7,\n    amplitude: 1,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(Monochord, {\n    label: 8,\n    harmonic: 8,\n    amplitude: 1,\n    base: 220,\n    mdxType: \"Monochord\"\n  }), mdx(\"p\", null, \"Those are the first 8 harmonics of a fundamental frequency of 220Hz.\\nThe first string vibrates 220 times per second while the strings below vibrate with 2, 3, 4, 5, 6, 7 and 8 times 220Hz.\\nWe could of course use any other fundamental frequency or add more overtones.\\nThe fundamental frequency and its multiples are also called partials.\"), mdx(\"p\", null, \"you can see harmonics on ropes here:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.youtube.com/watch?v=-n1d1rycvj4\"\n  }), \"https://www.youtube.com/watch?v=-n1d1rycvj4\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.youtube.com/watch?v=no7ZPPqtZEg\"\n  }), \"https://www.youtube.com/watch?v=no7ZPPqtZEg\"))), mdx(\"h3\", {\n    \"id\": \"timbre\"\n  }, \"Timbre\"), mdx(\"p\", null, \"When a physical object vibrates, its harmonic overtones will all sound at once, at different amplitudes.\\nGenerally, the higher the frequency, the quieter the amplitude will be.\\nThe relation of the different harmonics is called timbre.\\nIt gives any instrument its unique character.\\nDepending on the shape and material of the instrument, some partials will be amplified, while some will be dampened.\\nThe sum of all sinewave partials will produce a more complex waveform.\"), mdx(\"h2\", {\n    \"id\": \"additive-synthesis-of-common-waveforms\"\n  }, \"Additive Synthesis of Common Waveforms\"), mdx(\"p\", null, \"Let\\u2019s look at the harmonics of some common waveforms.\\nEach waveform is represented with a bar chart of the partial amplitudes and a graphical plot of all partials + their sum (green).\\nThe waves are made audible by using additive synthesis, which means playing all sine wave partials at the same time.\\nYou can change the number of partials by dragging the slider.\"), mdx(\"h3\", {\n    \"id\": \"sawtooth\"\n  }, \"Sawtooth\"), mdx(\"p\", null, \"Sawtooth waves have a really sharp timbre. For example, all bowed instruments produce sawtooth waves.\\nThe friction between the bow and the string will move the string in the direction of the bow.\\nAt some point, the force of the string will be larger than the friction, which will all of a sudden pull the string back again.\\nThis back and fourth ends up looking like a sawtooth motion:\"), mdx(\"iframe\", {\n    width: \"560\",\n    height: \"315\",\n    src: \"https://www.youtube.com/embed/6JeyiM0YNo4\",\n    frameBorder: \"0\",\n    allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n    allowFullScreen: true\n  }), mdx(\"p\", null, \"We can recreate this waveform by adding harmonic partials with amplitudes of:\"), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"A = \\\\frac{1}{n*\\\\pi}\"), mdx(\"p\", null, \"where n is the partial number\"), mdx(Partials, {\n    generator: Waveform.saw,\n    mdxType: \"Partials\"\n  }), mdx(\"h3\", {\n    \"id\": \"triangle\"\n  }, \"Triangle\"), mdx(\"p\", null, \"Triangle waves can be produced by plucking a string exactly at the center:\"), mdx(\"iframe\", {\n    width: \"560\",\n    height: \"315\",\n    src: \"https://www.youtube.com/embed/Qr_rxqwc1jE\",\n    frameBorder: \"0\",\n    allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n    allowFullScreen: true\n  }), mdx(\"p\", null, \"It contains only odd partials, with an amplitude of\"), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"A = \\\\frac{4}{(n*\\\\pi)^2}\"), mdx(\"p\", null, \"where n is the partial number\"), mdx(Partials, {\n    generator: Waveform.triangle,\n    mdxType: \"Partials\"\n  }), mdx(\"h3\", {\n    \"id\": \"square\"\n  }, \"Square\"), mdx(\"p\", null, \"A perfect square wave cannot be produced in an analog way, thus they have a digital and unnatural hard feel.\\nWith less harmonics, they are similar to reed instruments, as they only have odd partials. You can imagine a reed bouncing back and forth, closing and opening the air canal:\"), mdx(\"iframe\", {\n    width: \"560\",\n    height: \"315\",\n    src: \"https://www.youtube.com/embed/UMvuThaOqjw\",\n    frameBorder: \"0\",\n    allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n    allowFullScreen: true\n  }), mdx(\"p\", null, \"So every even number of bounces, the canal is closed, which leads to no overtone being generated.\\nThe square wave amplitudes are defined by\"), mdx(InlineMath, {\n    mdxType: \"InlineMath\"\n  }, \"A = \\\\frac{2}{n*\\\\pi}\"), mdx(\"p\", null, \"where n is the partial number\"), mdx(Partials, {\n    generator: Waveform.square,\n    mdxType: \"Partials\"\n  }), mdx(\"h3\", {\n    \"id\": \"observations\"\n  }, \"Observations\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"If we add new harmonics, we first hear them as seperate pitches, but soon they blend into the overall sound. This happens because our ears are so used to the harmonic series that we perceive multiple harmonics as a single pitch.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Reducing the number of harmonics is like applying a low pass filter, without using one.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The waveforms all have an \\u201Corgan-like\\u201D quality, as they do not morph over time. In the real world, harmonics will move independently, creating a more organic feel.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In addition to the timbre morphing, the overall envelope of the sound is another important characteristic that is not contained in the timbre, for example the harsh hitting of a mallet vs the soft bowing of a string.\")), mdx(\"h3\", {\n    \"id\": \"further-reading\"\n  }, \"Further Reading\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.dspguide.com/ch13/4.htm\"\n  }), \"Waveforms in the DSP Guide\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.soundonsound.com/techniques/introduction-additive-synthesis\"\n  }), \"Introduction to Additive Synthesis\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.amazon.de/Physics-Musical-Instruments-Neville-Fletcher/dp/0387983740\"\n  }), \"Physics of Musical Instruments\"))));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/harmonics/","title":"The Harmonic Series & Additive Synthesis","tags":[],"keywords":[],"date":"April 20, 2020"},"previous":{"__typename":"MdxBlogPost","id":"5b4e9753-a8e6-5932-a877-bf3fb1bb1930","excerpt":"Let's make a react component that can be used to animate anything directly inside MDX files: The above Animation uses a component calledâ€¦","slug":"/animation/","title":"Animating React Components","date":"April 19, 2020"},"next":{"__typename":"MdxBlogPost","id":"0f840e45-c3a8-513f-a9a4-3534990868c4","excerpt":"This article is the first of a series about Just Intonation. Using pure (or just) intervals to build musical tuning systems is called \"Justâ€¦","slug":"/intervals/","title":"Pure Intervals","date":"April 22, 2020"}},"pageContext":{"id":"f32b7e0f-4d3d-55fb-8e79-2892c936ef3d","previousId":"5b4e9753-a8e6-5932-a877-bf3fb1bb1930","nextId":"0f840e45-c3a8-513f-a9a4-3534990868c4"}}}