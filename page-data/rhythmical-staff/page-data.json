{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/rhythmical-staff/","result":{"data":{"site":{"siteMetadata":{"title":"Loophole Letters","social":[{"name":"github","url":"https://github.com/felixroos"},{"name":"GitHub","url":"https://github.com/gatsbyjs"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"8a099b31-c986-5be4-923e-803592f97811","excerpt":"In this post, I want to find out how I can render  rhythmical format  as staff notation. About rhythmical In short, rhythmical is a smallâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Rhythmical Staff Notation\",\n  \"date\": \"2020-05-24T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Score, {\n    width: 660,\n    height: 100,\n    staves: rhythmicalScore([['e5', ['b4', 'c5'], 'd5', ['c5', 'b4']], ['a4', ['a4', 'c5'], 'e5', ['d5', 'c5']], ['b4', ['r', 'c5'], 'd5', 'e5'], ['c5', 'a4', 'a4', 'r']]),\n    mdxType: \"Score\"\n  }), mdx(Score, {\n    width: 660,\n    height: 100,\n    timeSignature: \"\",\n    clef: \"\",\n    staves: rhythmicalScore([[['r', 'd5'], ['r', 'f5'], 'a5', ['g5', 'f5']], ['e5', ['r', 'c5'], 'e5', ['d5', 'c5']], ['b4', ['b4', 'c5'], 'd5', 'e5'], ['c5', 'a4', 'a4', 'r']]),\n    mdxType: \"Score\"\n  }), mdx(PlayButton, {\n    events: renderRhythmObject({\n      duration: 16,\n      value: [['e5', ['b4', 'c5'], 'd5', ['c5', 'b4']], ['a4', ['a4', 'c5'], 'e5', ['d5', 'c5']], ['b4', ['r', 'c5'], 'd5', 'e5'], ['c5', 'a4', 'a4', 'r'], [['r', 'd5'], ['r', 'f5'], 'a5', ['g5', 'f5']], ['e5', ['r', 'c5'], 'e5', ['d5', 'c5']], ['b4', ['b4', 'c5'], 'd5', 'e5'], ['c5', 'a4', 'a4', 'r']]\n    }),\n    mdxType: \"PlayButton\"\n  }), mdx(\"p\", null, \"In this post, I want to find out how I can render \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/felixroos/rhythmical\"\n  }), \"rhythmical format\"), \" as staff notation.\"), mdx(\"h2\", {\n    \"id\": \"about-rhythmical\"\n  }, \"About rhythmical\"), mdx(\"p\", null, \"In short, rhythmical is a small lib that transforms a nested array of primitives (typically note strings) to a flat array of note events:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"Rhythm.render(\\n  ['C', ['E', 'G'], 'B', 'D'],\\n  4\\n).map(({ value, time, duration }) => [value, time, duration]);\\n\")), mdx(\"p\", null, \"outputs:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"[\\n  ['C', 0, 1],\\n  ['E', 1, 0.5],\\n  ['G', 1.5, 0.5],\\n  ['B', 2, 1],\\n  ['D', 3, 1]\\n];\\n\")), mdx(\"p\", null, \"That flat output can easily be played back with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Tonejs/Tone.js\"\n  }), \"Tone.js\"), \" or anything that works like MIDI.\"), mdx(\"p\", null, \"In my opinion, this is the closest to human way to represent rhythm as a data structure + it is also really easy to understand. The format is strongly influenced by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://tidalcycles.org/\"\n  }), \"TidalCycles\"), \".\"), mdx(\"p\", null, \"To find out more, you can either read the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/felixroos/rhythmical#rhythmical\"\n  }), \"README\"), \" or check out the (still experimental) \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://felixroos.github.io/rhythmical/\"\n  }), \"REPL\"), \".\"), mdx(\"h2\", {\n    \"id\": \"staff-rendering-in-the-browser\"\n  }, \"Staff Rendering in the Browser\"), mdx(\"p\", null, \"As staff notation is the standard way to read and write music among musicians, i would be very happy if i could render rhythmical directly as a score.\\nIn the digital world, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.musicxml.com/de/\"\n  }), \"musicXML\"), \" is the broadly supported standard format.\"), mdx(\"p\", null, \"In the browser, one of the most feature rich libs to render scores is \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/0xfe/vexflow\"\n  }), \"vexflow\"), \", though it is relatively low level.\\nWith \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://opensheetmusicdisplay.org/\"\n  }), \"opensheetmusicdisplay\"), \" musicXML can be rendered directly with vexflow at its core.\"), mdx(\"p\", null, \"To bridge the gap between musicXML and a hackable solution, I started implementing a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/felixroos/json2musicxml\"\n  }), \"json2musicXML renderer\"), \".\\nAs musicXML is really verbose and XML is not the best format to parse with JS, I wanted to be able to generate a valid musicXML file from JSON.\\nAlso, musicXML is relatively low level, as it is non opinionated about how accidentals, beams and ties should be used.\"), mdx(\"h3\", {\n    \"id\": \"unwritten-rules-of-sheet-music-notation\"\n  }, \"Unwritten \\u201CRules\\u201D of Sheet Music Notation\"), mdx(\"p\", null, \"There is a relatively clear consensus among musicians of how a good music sheet should look like, so most of the decisions could be made automatically (with json2musicxml), for example:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"accidentals should only appear once in a measure\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All successive notes that are shorter than a quarter (8ths, 16ths etc..) should be beamed together\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The beams should not cross barlines, or the middle of a bar\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Also, note values should not cross the middle of a bar, split with a tie\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The bars should be grouped logically (e.g. 4 bars per line)\")), mdx(\"p\", null, \"Most of those decisions benefit readability. These \\u201Crules\\u201D are more or less automatically applied by every good music notation program.\"), mdx(\"h3\", {\n    \"id\": \"whats-missing\"\n  }, \"What\\u2019s missing\"), mdx(\"p\", null, \"If all of the above rules are applied automatically, only a few things are needed to render a score:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"clef\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"time signature\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"list of notes with\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"note (\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Scientific_pitch_notation\"\n  }), \"scientific pitch notation\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"duration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tie flag\")))), mdx(\"p\", null, \"That\\u2019s it! So a pseudo JSON format as input could look like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"{\\n  clef: 'treble',\\n  timeSignature: '4/4',\\n  measures: [\\n    [['C4', 4], ['D4', 8], ['E4', 8], ['F4', 4], ['G3', 8], ['C4', 8]],\\n    [['C4', 1, true]]\\n  ]\\n}\\n\")), mdx(\"p\", null, \"Dont fixate too much about the actual format, this could also be an object syntax or slightly different semantics.\\nOf course there are several more advanced score notation features like multiple voices and multiple staffs,\\njump signs chord symbols etc. but for this post, I will just concentrate on the core transformation of rhythmical to measures.\"), mdx(\"h3\", {\n    \"id\": \"the-goal-of-this-post\"\n  }, \"The goal of this post\"), mdx(\"p\", null, \"This post does not aim to present the last solution, but more of a proof of concept, with a basic way to transform rhythmical to a format like the above.\\nIn the end, I probably will go with json2musicxml but the transition from rhythmical will be usable nevertheless.\"), mdx(\"h2\", {\n    \"id\": \"score-notation-vs-rhythmical\"\n  }, \"Score notation vs rhythmical\"), mdx(\"p\", null, \"I already did a basic implementation of a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../notes/components/Score\"\n  }), \"score rendering component\"), \" using vexflow.\\nFor example, this is the classic tetris melody:\"), mdx(Score, {\n    width: 660,\n    height: 100,\n    staves: [{\n      setBegBarType: 'REPEAT_BEGIN',\n      notes: [['e5', 'q'], ['b4', 8], ['c5', 8], ['d5', 'q'], ['c5', 8], ['b4', 8]]\n    }, [['a4', 'q'], ['a4', 8], ['c5', 8], ['e5', 'q'], ['d5', 8], ['c5', 8]], [['b4', 'q'], ['b4', '8r'], ['c5', 8], ['d5', 'q'], ['e5', 'q']], [['c5', 'q'], ['a4', 'q'], ['a4', 'q'], ['b4', '4r']]],\n    mdxType: \"Score\"\n  }), mdx(Score, {\n    width: 660,\n    height: 100,\n    timeSignature: \"\",\n    clef: \"\",\n    staves: [[['b4', '8r'], ['d5', 8], ['b4', '8r'], ['f5', 8], ['a5', 'q'], ['g5', 8], ['f5', 8]], [['e5', 'q'], ['b4', '8r'], ['c5', 8], ['e5', 'q'], ['d5', 8], ['c5', 8]], [['b4', 'q'], ['b4', 8], ['c5', 8], ['d5', 'q'], ['e5', 'q']], {\n      notes: [['c5', 'q'], ['a4', 'q'], ['a4', 'q'], ['b4', '4r']],\n      setEndBarType: 'REPEAT_END'\n    }],\n    mdxType: \"Score\"\n  }), mdx(\"details\", null, mdx(\"summary\", null, \"show source\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\n<Score\\n  width={660}\\n  height={100}\\n  staves={[\\n    {\\n      setBegBarType: 'REPEAT_BEGIN',\\n      notes: [\\n        ['e5', 'q'],\\n        ['b4', 8],\\n        ['c5', 8],\\n        ['d5', 'q'],\\n        ['c5', 8],\\n        ['b4', 8]\\n      ]\\n    },\\n    [\\n      ['a4', 'q'],\\n      ['a4', 8],\\n      ['c5', 8],\\n      ['e5', 'q'],\\n      ['d5', 8],\\n      ['c5', 8]\\n    ],\\n    [\\n      ['b4', 'q'],\\n      ['b4', '8r'],\\n      ['c5', 8],\\n      ['d5', 'q'],\\n      ['e5', 'q']\\n    ],\\n    [\\n      ['c5', 'q'],\\n      ['a4', 'q'],\\n      ['a4', 'q'],\\n      ['b4', '4r']\\n    ]\\n  ]}\\n/>\\n<Score\\n  width={660}\\n  height={100}\\n  timeSignature=\\\"\\\"\\n  clef=\\\"\\\"\\n  staves={[\\n    [\\n      ['b4', '8r'],\\n      ['d5', 8],\\n      ['b4', '8r'],\\n      ['f5', 8],\\n      ['a5', 'q'],\\n      ['g5', 8],\\n      ['f5', 8]\\n    ],\\n    [\\n      ['e5', 'q'],\\n      ['b4', '8r'],\\n      ['c5', 8],\\n      ['e5', 'q'],\\n      ['d5', 8],\\n      ['c5', 8]\\n    ],\\n    [\\n      ['b4', 'q'],\\n      ['b4', 8],\\n      ['c5', 8],\\n      ['d5', 'q'],\\n      ['e5', 'q']\\n    ],\\n    {\\n      notes: [\\n        ['c5', 'q'],\\n        ['a4', 'q'],\\n        ['a4', 'q'],\\n        ['b4', '4r']\\n      ],\\n      setEndBarType: 'REPEAT_END'\\n    }\\n  ]}\\n/>\\n\"))), mdx(\"br\", null), mdx(\"p\", null, \"See \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../notes/components/Score\"\n  }), \"this page\"), \" for more examples on the score component. There are still a few features missing, like tuplets or automated accidentals, but it is enough for a proof of concept.\"), mdx(\"p\", null, \"In rhythmical format (non DSL), the above score can be represented with:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"let events = Rhythm.render(\\n  [\\n    ['e5', ['b4', 'c5'], 'd5', ['c5', 'b4']],\\n    ['a4', ['a4', 'c5'], 'e5', ['d5', 'c5']],\\n    ['b4', ['r', 'c5'], 'd5', 'e5'],\\n    ['c5', 'a4', 'a4', 'r'],\\n    [['r', 'd5'], ['r', 'f5'], 'a5', ['g5', 'f5']],\\n    ['e5', ['r', 'c5'], 'e5', ['d5', 'c5']],\\n    ['b4', ['b4', 'c5'], 'd5', 'e5'],\\n    ['c5', 'a4', 'a4', 'r']\\n  ],\\n  8\\n).map(({ value, time, duration }) => [value, time, duration]); // simplify\\n\")), mdx(\"details\", null, mdx(\"summary\", null, \"show output\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"[\\n  ['e5', 0, 0.25],\\n  ['b4', 0.25, 0.125],\\n  ['c5', 0.375, 0.125],\\n  ['d5', 0.5, 0.25],\\n  ['c5', 0.75, 0.125],\\n  ['b4', 0.875, 0.125],\\n  ['a4', 1, 0.25],\\n  ['a4', 1.25, 0.125],\\n  ['c5', 1.375, 0.125],\\n  ['e5', 1.5, 0.25],\\n  ['d5', 1.75, 0.125],\\n  ['c5', 1.875, 0.125],\\n  ['b4', 2, 0.25],\\n  ['r', 2.25, 0.125],\\n  ['c5', 2.375, 0.125],\\n  ['d5', 2.5, 0.25],\\n  ['e5', 2.75, 0.25],\\n  ['c5', 3, 0.25],\\n  ['a4', 3.25, 0.25],\\n  ['a4', 3.5, 0.25],\\n  ['r', 3.75, 0.25],\\n  ['r', 4, 0.125],\\n  ['d5', 4.125, 0.125],\\n  ['r', 4.25, 0.125],\\n  ['f5', 4.375, 0.125],\\n  ['a5', 4.5, 0.25],\\n  ['g5', 4.75, 0.125],\\n  ['f5', 4.875, 0.125],\\n  ['e5', 5, 0.25],\\n  ['r', 5.25, 0.125],\\n  ['c5', 5.375, 0.125],\\n  ['e5', 5.5, 0.25],\\n  ['d5', 5.75, 0.125],\\n  ['c5', 5.875, 0.125],\\n  ['b4', 6, 0.25],\\n  ['b4', 6.25, 0.125],\\n  ['c5', 6.375, 0.125],\\n  ['d5', 6.5, 0.25],\\n  ['e5', 6.75, 0.25],\\n  ['c5', 7, 0.25],\\n  ['a4', 7.25, 0.25],\\n  ['a4', 7.5, 0.25],\\n  ['r', 7.75, 0.25]\\n];\\n\"))), mdx(\"p\", null, \"The output format is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[note, time, duration]\"), \".\"), mdx(\"p\", null, \"We can easily calculate the note value with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1/duration\"), \" + floor the time to get the bar index (this works because we rendered 8 bars to 8 seconds):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"events.map(([note, time, duration]) => [note, Math.floor(time), 1 / duration);\\n\")), mdx(\"details\", null, mdx(\"summary\", null, \"show output\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"[\\n  ['e5', 0, 4],\\n  ['b4', 0, 8],\\n  ['c5', 0, 8],\\n  ['d5', 0, 4],\\n  ['c5', 0, 8],\\n  ['b4', 0, 8],\\n  ['a4', 1, 4],\\n  ['a4', 1, 8],\\n  ['c5', 1, 8],\\n  ['e5', 1, 4],\\n  ['d5', 1, 8],\\n  ['c5', 1, 8],\\n  ['b4', 2, 4],\\n  ['r', 2, 8],\\n  ['c5', 2, 8],\\n  ['d5', 2, 4],\\n  ['e5', 2, 4],\\n  ['c5', 3, 4],\\n  ['a4', 3, 4],\\n  ['a4', 3, 4],\\n  ['r', 3, 4],\\n  ['r', 4, 8],\\n  ['d5', 4, 8],\\n  ['r', 4, 8],\\n  ['f5', 4, 8],\\n  ['a5', 4, 4],\\n  ['g5', 4, 8],\\n  ['f5', 4, 8],\\n  ['e5', 5, 4],\\n  ['r', 5, 8],\\n  ['c5', 5, 8],\\n  ['e5', 5, 4],\\n  ['d5', 5, 8],\\n  ['c5', 5, 8],\\n  ['b4', 6, 4],\\n  ['b4', 6, 8],\\n  ['c5', 6, 8],\\n  ['d5', 6, 4],\\n  ['e5', 6, 4],\\n  ['c5', 7, 4],\\n  ['a4', 7, 4],\\n  ['a4', 7, 4],\\n  ['r', 7, 4]\\n];\\n\"))), mdx(\"p\", null, \"Now, the format is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[note, bar, value]\"), \".\"), mdx(\"p\", null, \"This is pretty close to the score format. The last step is to group the notes by bar and apply some (vexflow specific) fixes for rests and quarter notes:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"events.reduce((groups, [note, bar, value]) => {\\n  if (!groups.length || bar > groups.length - 1) {\\n    groups.push([]);\\n  }\\n  if (value === 4) {\\n    value = 'q'; // this fixes a vexflow bug: value 4 has wrong stem directions, q works\\n  }\\n  if (note === 'r') {\\n    // fix rests\\n    value = value + 'r';\\n    note = 'b4';\\n  }\\n  groups[groups.length - 1].push([note, value]);\\n  return groups;\\n}, []);\\n\")), mdx(\"details\", null, mdx(\"summary\", null, \"show output\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"[\\n  [\\n    ['e5', 'q'],\\n    ['b4', 8],\\n    ['c5', 8],\\n    ['d5', 'q'],\\n    ['c5', 8],\\n    ['b4', 8]\\n  ],\\n  [\\n    ['a4', 'q'],\\n    ['a4', 8],\\n    ['c5', 8],\\n    ['e5', 'q'],\\n    ['d5', 8],\\n    ['c5', 8]\\n  ],\\n  [\\n    ['b4', 'q'],\\n    ['b4', '8r'],\\n    ['c5', 8],\\n    ['d5', 'q'],\\n    ['e5', 'q']\\n  ],\\n  [\\n    ['c5', 'q'],\\n    ['a4', 'q'],\\n    ['a4', 'q'],\\n    ['b4', '4r']\\n  ],\\n  [\\n    ['b4', '8r'],\\n    ['d5', 8],\\n    ['b4', '8r'],\\n    ['f5', 8],\\n    ['a5', 'q'],\\n    ['g5', 8],\\n    ['f5', 8]\\n  ],\\n  [\\n    ['e5', 'q'],\\n    ['b4', '8r'],\\n    ['c5', 8],\\n    ['e5', 'q'],\\n    ['d5', 8],\\n    ['c5', 8]\\n  ],\\n  [\\n    ['b4', 'q'],\\n    ['b4', 8],\\n    ['c5', 8],\\n    ['d5', 'q'],\\n    ['e5', 'q']\\n  ],\\n  [\\n    ['c5', 'q'],\\n    ['a4', 'q'],\\n    ['a4', 'q'],\\n    ['b4', '4r']\\n  ]\\n];\\n\"))), mdx(\"p\", null, \"This is it! We can test if it really works by throwing this into the Score component:\"), mdx(Score, {\n    width: 660,\n    height: 100,\n    staves: [[['e5', 'q'], ['b4', 8], ['c5', 8], ['d5', 'q'], ['c5', 8], ['b4', 8]], [['a4', 'q'], ['a4', 8], ['c5', 8], ['e5', 'q'], ['d5', 8], ['c5', 8]], [['b4', 'q'], ['b4', '8r'], ['c5', 8], ['d5', 'q'], ['e5', 'q']], [['c5', 'q'], ['a4', 'q'], ['a4', 'q'], ['b4', '4r']]],\n    mdxType: \"Score\"\n  }), mdx(Score, {\n    width: 660,\n    height: 100,\n    timeSignature: \"\",\n    clef: \"\",\n    staves: [[['e5', 'q'], ['b4', 8], ['c5', 8], ['d5', 'q'], ['c5', 8], ['b4', 8]], [['a4', 'q'], ['a4', 8], ['c5', 8], ['e5', 'q'], ['d5', 8], ['c5', 8]], [['b4', 'q'], ['b4', '8r'], ['c5', 8], ['d5', 'q'], ['e5', 'q']], [['c5', 'q'], ['a4', 'q'], ['a4', 'q'], ['b4', '4r']]],\n    mdxType: \"Score\"\n  }), mdx(\"details\", null, mdx(\"summary\", null, \"show source\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\n<Score\\n  width={660}\\n  height={100}\\n  staves={[\\n    [\\n      ['e5', 'q'],\\n      ['b4', 8],\\n      ['c5', 8],\\n      ['d5', 'q'],\\n      ['c5', 8],\\n      ['b4', 8]\\n    ],\\n    [\\n      ['a4', 'q'],\\n      ['a4', 8],\\n      ['c5', 8],\\n      ['e5', 'q'],\\n      ['d5', 8],\\n      ['c5', 8]\\n    ],\\n    [\\n      ['b4', 'q'],\\n      ['b4', '8r'],\\n      ['c5', 8],\\n      ['d5', 'q'],\\n      ['e5', 'q']\\n    ],\\n    [\\n      ['c5', 'q'],\\n      ['a4', 'q'],\\n      ['a4', 'q'],\\n      ['b4', '4r']\\n    ]\\n  ]}\\n/>\\n<Score\\n  width={660}\\n  height={100}\\n  timeSignature=\\\"\\\"\\n  clef=\\\"\\\"\\n  staves={[\\n    [\\n      ['e5', 'q'],\\n      ['b4', 8],\\n      ['c5', 8],\\n      ['d5', 'q'],\\n      ['c5', 8],\\n      ['b4', 8]\\n    ],\\n    [\\n      ['a4', 'q'],\\n      ['a4', 8],\\n      ['c5', 8],\\n      ['e5', 'q'],\\n      ['d5', 8],\\n      ['c5', 8]\\n    ],\\n    [\\n      ['b4', 'q'],\\n      ['b4', '8r'],\\n      ['c5', 8],\\n      ['d5', 'q'],\\n      ['e5', 'q']\\n    ],\\n    [\\n      ['c5', 'q'],\\n      ['a4', 'q'],\\n      ['a4', 'q'],\\n      ['b4', '4r']\\n    ]\\n  ]}\\n/>\\n\"))), mdx(\"p\", null, \"Awesome! We can now sum everything up with this function:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import { Rhythm } from 'rhythmical';\\nimport { NestedRhythm } from 'rhythmical/lib/Rhythm';\\n\\nexport function rhythmicalScore(rhythm: NestedRhythm<string>) {\\n  return Rhythm.render(rhythm, rhythm.length)\\n    .map((e) => [e.value, Math.floor(e.time), 1 / e.duration])\\n    .reduce((groups: any[][], [note, bar, duration]) => {\\n      if (!groups.length || bar > groups.length - 1) {\\n        groups.push([]);\\n      }\\n      if (duration === 4) {\\n        duration = 'q';\\n      }\\n      if (note === 'r') {\\n        duration = duration + 'r';\\n        note = 'b4';\\n      }\\n      groups[groups.length - 1].push([note, duration]);\\n      return groups;\\n    }, []);\\n}\\n\")), mdx(\"p\", null, \"This function is now usable with the score component directly:\"), mdx(Score, {\n    width: 660,\n    height: 100,\n    staves: rhythmicalScore([['e5', ['b4', 'c5'], 'd5', ['c5', 'b4']], ['a4', ['a4', 'c5'], 'e5', ['d5', 'c5']], ['b4', ['r', 'c5'], 'd5', 'e5'], ['c5', 'a4', 'a4', 'r']]),\n    mdxType: \"Score\"\n  }), mdx(Score, {\n    width: 660,\n    height: 100,\n    timeSignature: \"\",\n    clef: \"\",\n    staves: rhythmicalScore([[['r', 'd5'], ['r', 'f5'], 'a5', ['g5', 'f5']], ['e5', ['r', 'c5'], 'e5', ['d5', 'c5']], ['b4', ['b4', 'c5'], 'd5', 'e5'], ['c5', 'a4', 'a4', 'r']]),\n    mdxType: \"Score\"\n  }), mdx(\"details\", null, mdx(\"summary\", null, \"show source\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Score\\n  width={660}\\n  height={100}\\n  staves={rhythmicalScore([\\n    ['e5', ['b4', 'c5'], 'd5', ['c5', 'b4']],\\n    ['a4', ['a4', 'c5'], 'e5', ['d5', 'c5']],\\n    ['b4', ['r', 'c5'], 'd5', 'e5'],\\n    ['c5', 'a4', 'a4', 'r']\\n  ])}\\n/>\\n<Score\\n  width={660}\\n  height={100}\\n  timeSignature=\\\"\\\"\\n  clef=\\\"\\\"\\n  staves={rhythmicalScore([\\n    [['r', 'd5'], ['r', 'f5'], 'a5', ['g5', 'f5']],\\n    ['e5', ['r', 'c5'], 'e5', ['d5', 'c5']],\\n    ['b4', ['b4', 'c5'], 'd5', 'e5'],\\n    ['c5', 'a4', 'a4', 'r']\\n  ])}\\n/>\\n\"))), mdx(\"p\", null, \"Now compare the source above to the non-rhythmical version:\"), mdx(\"details\", null, mdx(\"summary\", null, \"show source\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"<Score\\n  width={660}\\n  height={100}\\n  staves={[\\n      [\\n        ['e5', 'q'],\\n        ['b4', 8],\\n        ['c5', 8],\\n        ['d5', 'q'],\\n        ['c5', 8],\\n        ['b4', 8]\\n      ]\\n    [\\n      ['a4', 'q'],\\n      ['a4', 8],\\n      ['c5', 8],\\n      ['e5', 'q'],\\n      ['d5', 8],\\n      ['c5', 8]\\n    ],\\n    [\\n      ['b4', 'q'],\\n      ['b4', '8r'],\\n      ['c5', 8],\\n      ['d5', 'q'],\\n      ['e5', 'q']\\n    ],\\n    [\\n      ['c5', 'q'],\\n      ['a4', 'q'],\\n      ['a4', 'q'],\\n      ['b4', '4r']\\n    ]\\n  ]}\\n/>\\n<Score\\n  width={660}\\n  height={100}\\n  timeSignature=\\\"\\\"\\n  clef=\\\"\\\"\\n  staves={[\\n    [\\n      ['b4', '8r'],\\n      ['d5', 8],\\n      ['b4', '8r'],\\n      ['f5', 8],\\n      ['a5', 'q'],\\n      ['g5', 8],\\n      ['f5', 8]\\n    ],\\n    [\\n      ['e5', 'q'],\\n      ['b4', '8r'],\\n      ['c5', 8],\\n      ['e5', 'q'],\\n      ['d5', 8],\\n      ['c5', 8]\\n    ],\\n    [\\n      ['b4', 'q'],\\n      ['b4', 8],\\n      ['c5', 8],\\n      ['d5', 'q'],\\n      ['e5', 'q']\\n    ],\\n    [\\n      ['c5', 'q'],\\n      ['a4', 'q'],\\n      ['a4', 'q'],\\n      ['b4', '4r']\\n    ]\\n  ]}\\n/>\\n\"))), mdx(\"p\", null, \"I think this is a pretty drastic improvement, as the lines went down from 73 to 22 which is 70% less. With this method, I can write music directly in MDX as part of my blog posts.\"), mdx(\"p\", null, \"Of course this is still pretty basic as it does not support tuplets / ties / repeat signs etc, but it is a good starting point.\"), mdx(\"h2\", {\n    \"id\": \"next-steps\"\n  }, \"Next Steps\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"colored notes to sync actual playback with score\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"improve score component to accept multiple lines\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"chords\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ties\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tuplets\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"use \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/felixroos/rhythmical\"\n  }), \"extended rhythmical format\"), \" for\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"barlines\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"multiple voices\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"articulation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"etc\\u2026\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"implement \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/felixroos/json2musicxml\"\n  }), \"json2musicxml\"), \" and use rhythmical with it\")));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/rhythmical-staff/","title":"Rhythmical Staff Notation","tags":[],"keywords":[],"date":"May 24, 2020"},"previous":{"__typename":"MdxBlogPost","id":"d0b4abab-ce23-5672-8aea-2e5d74cdd7ec","excerpt":"The harmonic spiral from last post can also be used to vizualize the harmonics of instruments that work with overblowing, like a trumpetâ€¦","slug":"/trumpet-harmonics/","title":"Trumpet Harmonics","date":"May 19, 2020"},"next":{"__typename":"MdxBlogPost","id":"3dc66d40-f4bc-5565-9061-581e1b6a44cf","excerpt":"In this post, I want to describe how and why  rhythmical  is implemented. Nested vs Flat Arrays The goal of rhythmical is to convert rhythmsâ€¦","slug":"/rhythmical-arrays/","title":"Rhythmical Arrays","date":"May 27, 2020"}},"pageContext":{"id":"8a099b31-c986-5be4-923e-803592f97811","previousId":"d0b4abab-ce23-5672-8aea-2e5d74cdd7ec","nextId":"3dc66d40-f4bc-5565-9061-581e1b6a44cf"}}}